<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="33413831509"><g><title>[libexpat.so.1.10.0] (12,596,300 samples, 0.04%)</title><rect x="0.0317%" y="581" width="0.0377%" height="15" fill="rgb(227,0,7)" fg:x="10608216" fg:w="12596300"/><text x="0.2817%" y="591.50"></text></g><g><title>[libexpat.so.1.10.0] (3,758,992 samples, 0.01%)</title><rect x="0.0582%" y="565" width="0.0112%" height="15" fill="rgb(217,0,24)" fg:x="19445524" fg:w="3758992"/><text x="0.3082%" y="575.50"></text></g><g><title>[libexpat.so.1.10.0] (3,758,992 samples, 0.01%)</title><rect x="0.0582%" y="549" width="0.0112%" height="15" fill="rgb(221,193,54)" fg:x="19445524" fg:w="3758992"/><text x="0.3082%" y="559.50"></text></g><g><title>XML_ParseBuffer (18,768,215 samples, 0.06%)</title><rect x="0.0222%" y="661" width="0.0562%" height="15" fill="rgb(248,212,6)" fg:x="7412059" fg:w="18768215"/><text x="0.2722%" y="671.50"></text></g><g><title>[libexpat.so.1.10.0] (18,768,215 samples, 0.06%)</title><rect x="0.0222%" y="645" width="0.0562%" height="15" fill="rgb(208,68,35)" fg:x="7412059" fg:w="18768215"/><text x="0.2722%" y="655.50"></text></g><g><title>[libexpat.so.1.10.0] (18,768,215 samples, 0.06%)</title><rect x="0.0222%" y="629" width="0.0562%" height="15" fill="rgb(232,128,0)" fg:x="7412059" fg:w="18768215"/><text x="0.2722%" y="639.50"></text></g><g><title>[libexpat.so.1.10.0] (18,768,215 samples, 0.06%)</title><rect x="0.0222%" y="613" width="0.0562%" height="15" fill="rgb(207,160,47)" fg:x="7412059" fg:w="18768215"/><text x="0.2722%" y="623.50"></text></g><g><title>[libexpat.so.1.10.0] (18,768,215 samples, 0.06%)</title><rect x="0.0222%" y="597" width="0.0562%" height="15" fill="rgb(228,23,34)" fg:x="7412059" fg:w="18768215"/><text x="0.2722%" y="607.50"></text></g><g><title>[libfontconfig.so.1.14.0] (24,960,751 samples, 0.07%)</title><rect x="0.0137%" y="693" width="0.0747%" height="15" fill="rgb(218,30,26)" fg:x="4573114" fg:w="24960751"/><text x="0.2637%" y="703.50"></text></g><g><title>[libfontconfig.so.1.14.0] (24,960,751 samples, 0.07%)</title><rect x="0.0137%" y="677" width="0.0747%" height="15" fill="rgb(220,122,19)" fg:x="4573114" fg:w="24960751"/><text x="0.2637%" y="687.50"></text></g><g><title>XML_ParserFree (3,353,591 samples, 0.01%)</title><rect x="0.0784%" y="661" width="0.0100%" height="15" fill="rgb(250,228,42)" fg:x="26180274" fg:w="3353591"/><text x="0.3284%" y="671.50"></text></g><g><title>[libexpat.so.1.10.0] (3,353,591 samples, 0.01%)</title><rect x="0.0784%" y="645" width="0.0100%" height="15" fill="rgb(240,193,28)" fg:x="26180274" fg:w="3353591"/><text x="0.3284%" y="655.50"></text></g><g><title>exit (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="645" width="0.0100%" height="15" fill="rgb(216,20,37)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="655.50"></text></g><g><title>[libc.so.6] (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="629" width="0.0100%" height="15" fill="rgb(206,188,39)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="639.50"></text></g><g><title>__call_tls_dtors (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="613" width="0.0100%" height="15" fill="rgb(217,207,13)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="623.50"></text></g><g><title>std::sys::thread_local::native::lazy::destroy (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="597" width="0.0100%" height="15" fill="rgb(231,73,38)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="607.50"></text></g><g><title>std::sys::thread_local::abort_on_dtor_unwind (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="581" width="0.0100%" height="15" fill="rgb(225,20,46)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="591.50"></text></g><g><title>std::sys::thread_local::native::lazy::destroy::_{{closure}} (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="565" width="0.0100%" height="15" fill="rgb(210,31,41)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="575.50"></text></g><g><title>core::mem::drop (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="549" width="0.0100%" height="15" fill="rgb(221,200,47)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::thread_local::native::lazy::State&lt;font_kit::sources::fontconfig::FontconfigSource,()&gt;&gt; (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="533" width="0.0100%" height="15" fill="rgb(226,26,5)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;font_kit::sources::fontconfig::FontconfigSource&gt; (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="517" width="0.0100%" height="15" fill="rgb(249,33,26)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;font_kit::sources::fontconfig::fc::Config&gt; (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="501" width="0.0100%" height="15" fill="rgb(235,183,28)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="511.50"></text></g><g><title>[libfontconfig.so.1.14.0] (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="485" width="0.0100%" height="15" fill="rgb(221,5,38)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="495.50"></text></g><g><title>[libfontconfig.so.1.14.0] (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="469" width="0.0100%" height="15" fill="rgb(247,18,42)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="479.50"></text></g><g><title>[libfontconfig.so.1.14.0] (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="453" width="0.0100%" height="15" fill="rgb(241,131,45)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="463.50"></text></g><g><title>[libfontconfig.so.1.14.0] (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="437" width="0.0100%" height="15" fill="rgb(249,31,29)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="447.50"></text></g><g><title>FcRuleDestroy (3,356,470 samples, 0.01%)</title><rect x="0.0971%" y="421" width="0.0100%" height="15" fill="rgb(225,111,53)" fg:x="32460209" fg:w="3356470"/><text x="0.3471%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="405" width="0.0125%" height="15" fill="rgb(238,160,17)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="389" width="0.0125%" height="15" fill="rgb(214,148,48)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="373" width="0.0125%" height="15" fill="rgb(232,36,49)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="357" width="0.0125%" height="15" fill="rgb(209,103,24)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="341" width="0.0125%" height="15" fill="rgb(229,88,8)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="325" width="0.0125%" height="15" fill="rgb(213,181,19)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="309" width="0.0125%" height="15" fill="rgb(254,191,54)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="293" width="0.0125%" height="15" fill="rgb(241,83,37)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="277" width="0.0125%" height="15" fill="rgb(233,36,39)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="261" width="0.0125%" height="15" fill="rgb(226,3,54)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="245" width="0.0125%" height="15" fill="rgb(245,192,40)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="229" width="0.0125%" height="15" fill="rgb(238,167,29)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="239.50"></text></g><g><title>alloc::alloc::realloc (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="213" width="0.0125%" height="15" fill="rgb(232,182,51)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="223.50"></text></g><g><title>__rust_realloc (4,192,374 samples, 0.01%)</title><rect x="0.1072%" y="197" width="0.0125%" height="15" fill="rgb(231,60,39)" fg:x="35816679" fg:w="4192374"/><text x="0.3572%" y="207.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (92,942,571 samples, 0.28%)</title><rect x="0.1197%" y="405" width="0.2782%" height="15" fill="rgb(208,69,12)" fg:x="40009053" fg:w="92942571"/><text x="0.3697%" y="415.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (92,942,571 samples, 0.28%)</title><rect x="0.1197%" y="389" width="0.2782%" height="15" fill="rgb(235,93,37)" fg:x="40009053" fg:w="92942571"/><text x="0.3697%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (92,942,571 samples, 0.28%)</title><rect x="0.1197%" y="373" width="0.2782%" height="15" fill="rgb(213,116,39)" fg:x="40009053" fg:w="92942571"/><text x="0.3697%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (92,942,571 samples, 0.28%)</title><rect x="0.1197%" y="357" width="0.2782%" height="15" fill="rgb(222,207,29)" fg:x="40009053" fg:w="92942571"/><text x="0.3697%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (92,942,571 samples, 0.28%)</title><rect x="0.1197%" y="341" width="0.2782%" height="15" fill="rgb(206,96,30)" fg:x="40009053" fg:w="92942571"/><text x="0.3697%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (92,942,571 samples, 0.28%)</title><rect x="0.1197%" y="325" width="0.2782%" height="15" fill="rgb(218,138,4)" fg:x="40009053" fg:w="92942571"/><text x="0.3697%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (92,942,571 samples, 0.28%)</title><rect x="0.1197%" y="309" width="0.2782%" height="15" fill="rgb(250,191,14)" fg:x="40009053" fg:w="92942571"/><text x="0.3697%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (92,942,571 samples, 0.28%)</title><rect x="0.1197%" y="293" width="0.2782%" height="15" fill="rgb(239,60,40)" fg:x="40009053" fg:w="92942571"/><text x="0.3697%" y="303.50"></text></g><g><title>[libc.so.6] (92,942,571 samples, 0.28%)</title><rect x="0.1197%" y="277" width="0.2782%" height="15" fill="rgb(206,27,48)" fg:x="40009053" fg:w="92942571"/><text x="0.3697%" y="287.50"></text></g><g><title>[unknown] (42,229,940 samples, 0.13%)</title><rect x="0.2715%" y="261" width="0.1264%" height="15" fill="rgb(225,35,8)" fg:x="90721684" fg:w="42229940"/><text x="0.5215%" y="271.50"></text></g><g><title>[unknown] (8,341,268 samples, 0.02%)</title><rect x="0.3729%" y="245" width="0.0250%" height="15" fill="rgb(250,213,24)" fg:x="124610356" fg:w="8341268"/><text x="0.6229%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::linalg::cholesky::Cholesky&lt;f64,nalgebra::base::dimension::Dyn&gt;&gt; (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="373" width="0.0124%" height="15" fill="rgb(247,123,22)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt; (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="357" width="0.0124%" height="15" fill="rgb(231,138,38)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt; (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="341" width="0.0124%" height="15" fill="rgb(231,145,46)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="325" width="0.0124%" height="15" fill="rgb(251,118,11)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="309" width="0.0124%" height="15" fill="rgb(217,147,25)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="293" width="0.0124%" height="15" fill="rgb(247,81,37)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="277" width="0.0124%" height="15" fill="rgb(209,12,38)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="261" width="0.0124%" height="15" fill="rgb(227,1,9)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="245" width="0.0124%" height="15" fill="rgb(248,47,43)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="255.50"></text></g><g><title>cfree (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="229" width="0.0124%" height="15" fill="rgb(221,10,30)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="239.50"></text></g><g><title>[libc.so.6] (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="213" width="0.0124%" height="15" fill="rgb(210,229,1)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="223.50"></text></g><g><title>__default_morecore (4,131,206 samples, 0.01%)</title><rect x="0.3979%" y="197" width="0.0124%" height="15" fill="rgb(222,148,37)" fg:x="132951624" fg:w="4131206"/><text x="0.6479%" y="207.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::ad_solve_lower_triangular_unchecked_mut (4,235,167 samples, 0.01%)</title><rect x="0.4103%" y="341" width="0.0127%" height="15" fill="rgb(234,67,33)" fg:x="137082830" fg:w="4235167"/><text x="0.6603%" y="351.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::xx_solve_lower_triangular_vector_unchecked_mut (4,235,167 samples, 0.01%)</title><rect x="0.4103%" y="325" width="0.0127%" height="15" fill="rgb(247,98,35)" fg:x="137082830" fg:w="4235167"/><text x="0.6603%" y="335.50"></text></g><g><title>nalgebra::linalg::solve::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::ad_solve_lower_triangular_unchecked_mut::_{{closure}} (4,235,167 samples, 0.01%)</title><rect x="0.4103%" y="309" width="0.0127%" height="15" fill="rgb(247,138,52)" fg:x="137082830" fg:w="4235167"/><text x="0.6603%" y="319.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (4,235,167 samples, 0.01%)</title><rect x="0.4103%" y="293" width="0.0127%" height="15" fill="rgb(213,79,30)" fg:x="137082830" fg:w="4235167"/><text x="0.6603%" y="303.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx (4,235,167 samples, 0.01%)</title><rect x="0.4103%" y="277" width="0.0127%" height="15" fill="rgb(246,177,23)" fg:x="137082830" fg:w="4235167"/><text x="0.6603%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,235,167 samples, 0.01%)</title><rect x="0.4103%" y="261" width="0.0127%" height="15" fill="rgb(230,62,27)" fg:x="137082830" fg:w="4235167"/><text x="0.6603%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,235,167 samples, 0.01%)</title><rect x="0.4103%" y="245" width="0.0127%" height="15" fill="rgb(216,154,8)" fg:x="137082830" fg:w="4235167"/><text x="0.6603%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4,235,167 samples, 0.01%)</title><rect x="0.4103%" y="229" width="0.0127%" height="15" fill="rgb(244,35,45)" fg:x="137082830" fg:w="4235167"/><text x="0.6603%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (4,214,848 samples, 0.01%)</title><rect x="0.4609%" y="245" width="0.0126%" height="15" fill="rgb(251,115,12)" fg:x="154001582" fg:w="4214848"/><text x="0.7109%" y="255.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (4,263,487 samples, 0.01%)</title><rect x="0.4735%" y="245" width="0.0128%" height="15" fill="rgb(240,54,50)" fg:x="158216430" fg:w="4263487"/><text x="0.7235%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (37,788,101 samples, 0.11%)</title><rect x="0.3979%" y="405" width="0.1131%" height="15" fill="rgb(233,84,52)" fg:x="132951624" fg:w="37788101"/><text x="0.6479%" y="415.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit::_{{closure}} (37,788,101 samples, 0.11%)</title><rect x="0.3979%" y="389" width="0.1131%" height="15" fill="rgb(207,117,47)" fg:x="132951624" fg:w="37788101"/><text x="0.6479%" y="399.50"></text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::solve (33,656,895 samples, 0.10%)</title><rect x="0.4103%" y="373" width="0.1007%" height="15" fill="rgb(249,43,39)" fg:x="137082830" fg:w="33656895"/><text x="0.6603%" y="383.50"></text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::solve_mut (33,656,895 samples, 0.10%)</title><rect x="0.4103%" y="357" width="0.1007%" height="15" fill="rgb(209,38,44)" fg:x="137082830" fg:w="33656895"/><text x="0.6603%" y="367.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::solve_lower_triangular_unchecked_mut (29,421,728 samples, 0.09%)</title><rect x="0.4229%" y="341" width="0.0881%" height="15" fill="rgb(236,212,23)" fg:x="141317997" fg:w="29421728"/><text x="0.6729%" y="351.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::solve_lower_triangular_vector_unchecked_mut (29,421,728 samples, 0.09%)</title><rect x="0.4229%" y="325" width="0.0881%" height="15" fill="rgb(242,79,21)" fg:x="141317997" fg:w="29421728"/><text x="0.6729%" y="335.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (29,421,728 samples, 0.09%)</title><rect x="0.4229%" y="309" width="0.0881%" height="15" fill="rgb(211,96,35)" fg:x="141317997" fg:w="29421728"/><text x="0.6729%" y="319.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (29,421,728 samples, 0.09%)</title><rect x="0.4229%" y="293" width="0.0881%" height="15" fill="rgb(253,215,40)" fg:x="141317997" fg:w="29421728"/><text x="0.6729%" y="303.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (29,421,728 samples, 0.09%)</title><rect x="0.4229%" y="277" width="0.0881%" height="15" fill="rgb(211,81,21)" fg:x="141317997" fg:w="29421728"/><text x="0.6729%" y="287.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (29,421,728 samples, 0.09%)</title><rect x="0.4229%" y="261" width="0.0881%" height="15" fill="rgb(208,190,38)" fg:x="141317997" fg:w="29421728"/><text x="0.6729%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8,259,808 samples, 0.02%)</title><rect x="0.4863%" y="245" width="0.0247%" height="15" fill="rgb(235,213,38)" fg:x="162479917" fg:w="8259808"/><text x="0.7363%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8,259,808 samples, 0.02%)</title><rect x="0.4863%" y="229" width="0.0247%" height="15" fill="rgb(237,122,38)" fg:x="162479917" fg:w="8259808"/><text x="0.7363%" y="239.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (8,259,808 samples, 0.02%)</title><rect x="0.4863%" y="213" width="0.0247%" height="15" fill="rgb(244,218,35)" fg:x="162479917" fg:w="8259808"/><text x="0.7363%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (8,259,808 samples, 0.02%)</title><rect x="0.4863%" y="197" width="0.0247%" height="15" fill="rgb(240,68,47)" fg:x="162479917" fg:w="8259808"/><text x="0.7363%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt; (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="405" width="0.0126%" height="15" fill="rgb(210,16,53)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="389" width="0.0126%" height="15" fill="rgb(235,124,12)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;]&gt; (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="373" width="0.0126%" height="15" fill="rgb(224,169,11)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt; (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="357" width="0.0126%" height="15" fill="rgb(250,166,2)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;&gt; (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="341" width="0.0126%" height="15" fill="rgb(242,216,29)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="351.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="325" width="0.0126%" height="15" fill="rgb(230,116,27)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="309" width="0.0126%" height="15" fill="rgb(228,99,48)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="293" width="0.0126%" height="15" fill="rgb(253,11,6)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="277" width="0.0126%" height="15" fill="rgb(247,143,39)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="261" width="0.0126%" height="15" fill="rgb(236,97,10)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="245" width="0.0126%" height="15" fill="rgb(233,208,19)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="229" width="0.0126%" height="15" fill="rgb(216,164,2)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="239.50"></text></g><g><title>__rdl_dealloc (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="213" width="0.0126%" height="15" fill="rgb(220,129,5)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4,217,971 samples, 0.01%)</title><rect x="0.5110%" y="197" width="0.0126%" height="15" fill="rgb(242,17,10)" fg:x="170739725" fg:w="4217971"/><text x="0.7610%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33,642,791 samples, 0.10%)</title><rect x="0.5329%" y="373" width="0.1007%" height="15" fill="rgb(242,107,0)" fg:x="178047036" fg:w="33642791"/><text x="0.7829%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (15,302,033 samples, 0.05%)</title><rect x="0.5877%" y="357" width="0.0458%" height="15" fill="rgb(251,28,31)" fg:x="196387794" fg:w="15302033"/><text x="0.8377%" y="367.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (15,302,033 samples, 0.05%)</title><rect x="0.5877%" y="341" width="0.0458%" height="15" fill="rgb(233,223,10)" fg:x="196387794" fg:w="15302033"/><text x="0.8377%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (15,302,033 samples, 0.05%)</title><rect x="0.5877%" y="325" width="0.0458%" height="15" fill="rgb(215,21,27)" fg:x="196387794" fg:w="15302033"/><text x="0.8377%" y="335.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_row_slice (266,456,493 samples, 0.80%)</title><rect x="0.5329%" y="405" width="0.7974%" height="15" fill="rgb(232,23,21)" fg:x="178047036" fg:w="266456493"/><text x="0.7829%" y="415.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_row_slice_generic (266,456,493 samples, 0.80%)</title><rect x="0.5329%" y="389" width="0.7974%" height="15" fill="rgb(244,5,23)" fg:x="178047036" fg:w="266456493"/><text x="0.7829%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (232,813,702 samples, 0.70%)</title><rect x="0.6335%" y="373" width="0.6968%" height="15" fill="rgb(226,81,46)" fg:x="211689827" fg:w="232813702"/><text x="0.8835%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (232,813,702 samples, 0.70%)</title><rect x="0.6335%" y="357" width="0.6968%" height="15" fill="rgb(247,70,30)" fg:x="211689827" fg:w="232813702"/><text x="0.8835%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (232,813,702 samples, 0.70%)</title><rect x="0.6335%" y="341" width="0.6968%" height="15" fill="rgb(212,68,19)" fg:x="211689827" fg:w="232813702"/><text x="0.8835%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (54,958,562 samples, 0.16%)</title><rect x="1.3303%" y="229" width="0.1645%" height="15" fill="rgb(240,187,13)" fg:x="444503529" fg:w="54958562"/><text x="1.5803%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (54,958,562 samples, 0.16%)</title><rect x="1.3303%" y="213" width="0.1645%" height="15" fill="rgb(223,113,26)" fg:x="444503529" fg:w="54958562"/><text x="1.5803%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (54,958,562 samples, 0.16%)</title><rect x="1.3303%" y="197" width="0.1645%" height="15" fill="rgb(206,192,2)" fg:x="444503529" fg:w="54958562"/><text x="1.5803%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (54,958,562 samples, 0.16%)</title><rect x="1.3303%" y="181" width="0.1645%" height="15" fill="rgb(241,108,4)" fg:x="444503529" fg:w="54958562"/><text x="1.5803%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (54,958,562 samples, 0.16%)</title><rect x="1.3303%" y="165" width="0.1645%" height="15" fill="rgb(247,173,49)" fg:x="444503529" fg:w="54958562"/><text x="1.5803%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each::check::_{{closure}} (54,958,562 samples, 0.16%)</title><rect x="1.3303%" y="149" width="0.1645%" height="15" fill="rgb(224,114,35)" fg:x="444503529" fg:w="54958562"/><text x="1.5803%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (54,958,562 samples, 0.16%)</title><rect x="1.3303%" y="133" width="0.1645%" height="15" fill="rgb(245,159,27)" fg:x="444503529" fg:w="54958562"/><text x="1.5803%" y="143.50"></text></g><g><title>core::ptr::write (54,958,562 samples, 0.16%)</title><rect x="1.3303%" y="117" width="0.1645%" height="15" fill="rgb(245,172,44)" fg:x="444503529" fg:w="54958562"/><text x="1.5803%" y="127.50"></text></g><g><title>[libc.so.6] (54,958,562 samples, 0.16%)</title><rect x="1.3303%" y="101" width="0.1645%" height="15" fill="rgb(236,23,11)" fg:x="444503529" fg:w="54958562"/><text x="1.5803%" y="111.50"></text></g><g><title>[unknown] (17,147,620 samples, 0.05%)</title><rect x="1.4435%" y="85" width="0.0513%" height="15" fill="rgb(205,117,38)" fg:x="482314471" fg:w="17147620"/><text x="1.6935%" y="95.50"></text></g><g><title>[unknown] (17,147,620 samples, 0.05%)</title><rect x="1.4435%" y="69" width="0.0513%" height="15" fill="rgb(237,72,25)" fg:x="482314471" fg:w="17147620"/><text x="1.6935%" y="79.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::identity (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="405" width="0.1772%" height="15" fill="rgb(244,70,9)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="415.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::identity_generic (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="389" width="0.1772%" height="15" fill="rgb(217,125,39)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="399.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_diagonal_element_generic (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="373" width="0.1772%" height="15" fill="rgb(235,36,10)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="383.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::zeros_generic (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="357" width="0.1772%" height="15" fill="rgb(251,123,47)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="367.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_element_generic (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="341" width="0.1772%" height="15" fill="rgb(221,13,13)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="351.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator_generic (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="325" width="0.1772%" height="15" fill="rgb(238,131,9)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="335.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::allocate_from_iterator (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="309" width="0.1772%" height="15" fill="rgb(211,50,8)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="293" width="0.1772%" height="15" fill="rgb(245,182,24)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="277" width="0.1772%" height="15" fill="rgb(242,14,37)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="261" width="0.1772%" height="15" fill="rgb(246,228,12)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (59,212,899 samples, 0.18%)</title><rect x="1.3303%" y="245" width="0.1772%" height="15" fill="rgb(213,55,15)" fg:x="444503529" fg:w="59212899"/><text x="1.5803%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,254,337 samples, 0.01%)</title><rect x="1.4948%" y="229" width="0.0127%" height="15" fill="rgb(209,9,3)" fg:x="499462091" fg:w="4254337"/><text x="1.7448%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,254,337 samples, 0.01%)</title><rect x="1.4948%" y="213" width="0.0127%" height="15" fill="rgb(230,59,30)" fg:x="499462091" fg:w="4254337"/><text x="1.7448%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,254,337 samples, 0.01%)</title><rect x="1.4948%" y="197" width="0.0127%" height="15" fill="rgb(209,121,21)" fg:x="499462091" fg:w="4254337"/><text x="1.7448%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,254,337 samples, 0.01%)</title><rect x="1.4948%" y="181" width="0.0127%" height="15" fill="rgb(220,109,13)" fg:x="499462091" fg:w="4254337"/><text x="1.7448%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,254,337 samples, 0.01%)</title><rect x="1.4948%" y="165" width="0.0127%" height="15" fill="rgb(232,18,1)" fg:x="499462091" fg:w="4254337"/><text x="1.7448%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,254,337 samples, 0.01%)</title><rect x="1.4948%" y="149" width="0.0127%" height="15" fill="rgb(215,41,42)" fg:x="499462091" fg:w="4254337"/><text x="1.7448%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,254,337 samples, 0.01%)</title><rect x="1.4948%" y="133" width="0.0127%" height="15" fill="rgb(224,123,36)" fg:x="499462091" fg:w="4254337"/><text x="1.7448%" y="143.50"></text></g><g><title>alloc::alloc::alloc (4,254,337 samples, 0.01%)</title><rect x="1.4948%" y="117" width="0.0127%" height="15" fill="rgb(240,125,3)" fg:x="499462091" fg:w="4254337"/><text x="1.7448%" y="127.50"></text></g><g><title>malloc (4,254,337 samples, 0.01%)</title><rect x="1.4948%" y="101" width="0.0127%" height="15" fill="rgb(205,98,50)" fg:x="499462091" fg:w="4254337"/><text x="1.7448%" y="111.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (206,178,823 samples, 0.62%)</title><rect x="1.5075%" y="373" width="0.6170%" height="15" fill="rgb(205,185,37)" fg:x="503716428" fg:w="206178823"/><text x="1.7575%" y="383.50"></text></g><g><title>[unknown] (63,569,541 samples, 0.19%)</title><rect x="1.9343%" y="357" width="0.1902%" height="15" fill="rgb(238,207,15)" fg:x="646325710" fg:w="63569541"/><text x="2.1843%" y="367.50"></text></g><g><title>[unknown] (29,597,304 samples, 0.09%)</title><rect x="2.0360%" y="341" width="0.0886%" height="15" fill="rgb(213,199,42)" fg:x="680297947" fg:w="29597304"/><text x="2.2860%" y="351.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (51,091,780 samples, 0.15%)</title><rect x="2.1246%" y="373" width="0.1529%" height="15" fill="rgb(235,201,11)" fg:x="709895251" fg:w="51091780"/><text x="2.3746%" y="383.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (8,539,006 samples, 0.03%)</title><rect x="2.2902%" y="341" width="0.0256%" height="15" fill="rgb(207,46,11)" fg:x="765238128" fg:w="8539006"/><text x="2.5402%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (8,539,006 samples, 0.03%)</title><rect x="2.2902%" y="325" width="0.0256%" height="15" fill="rgb(241,35,35)" fg:x="765238128" fg:w="8539006"/><text x="2.5402%" y="335.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose (274,326,938 samples, 0.82%)</title><rect x="1.5075%" y="405" width="0.8210%" height="15" fill="rgb(243,32,47)" fg:x="503716428" fg:w="274326938"/><text x="1.7575%" y="415.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose_to_uninit (274,326,938 samples, 0.82%)</title><rect x="1.5075%" y="389" width="0.8210%" height="15" fill="rgb(247,202,23)" fg:x="503716428" fg:w="274326938"/><text x="1.7575%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (17,056,335 samples, 0.05%)</title><rect x="2.2775%" y="373" width="0.0510%" height="15" fill="rgb(219,102,11)" fg:x="760987031" fg:w="17056335"/><text x="2.5275%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (17,056,335 samples, 0.05%)</title><rect x="2.2775%" y="357" width="0.0510%" height="15" fill="rgb(243,110,44)" fg:x="760987031" fg:w="17056335"/><text x="2.5275%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4,266,232 samples, 0.01%)</title><rect x="2.3157%" y="341" width="0.0128%" height="15" fill="rgb(222,74,54)" fg:x="773777134" fg:w="4266232"/><text x="2.5657%" y="351.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (59,372,918 samples, 0.18%)</title><rect x="2.3285%" y="405" width="0.1777%" height="15" fill="rgb(216,99,12)" fg:x="778043366" fg:w="59372918"/><text x="2.5785%" y="415.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (59,372,918 samples, 0.18%)</title><rect x="2.3285%" y="389" width="0.1777%" height="15" fill="rgb(226,22,26)" fg:x="778043366" fg:w="59372918"/><text x="2.5785%" y="399.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (59,372,918 samples, 0.18%)</title><rect x="2.3285%" y="373" width="0.1777%" height="15" fill="rgb(217,163,10)" fg:x="778043366" fg:w="59372918"/><text x="2.5785%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (59,372,918 samples, 0.18%)</title><rect x="2.3285%" y="357" width="0.1777%" height="15" fill="rgb(213,25,53)" fg:x="778043366" fg:w="59372918"/><text x="2.5785%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (8,253,108 samples, 0.02%)</title><rect x="2.5439%" y="325" width="0.0247%" height="15" fill="rgb(252,105,26)" fg:x="850017617" fg:w="8253108"/><text x="2.7939%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4,136,198 samples, 0.01%)</title><rect x="2.5686%" y="325" width="0.0124%" height="15" fill="rgb(220,39,43)" fg:x="858270725" fg:w="4136198"/><text x="2.8186%" y="335.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (15,622,311 samples, 0.05%)</title><rect x="2.5810%" y="325" width="0.0468%" height="15" fill="rgb(229,68,48)" fg:x="862406923" fg:w="15622311"/><text x="2.8310%" y="335.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (49,172,504 samples, 0.15%)</title><rect x="2.5062%" y="405" width="0.1472%" height="15" fill="rgb(252,8,32)" fg:x="837416284" fg:w="49172504"/><text x="2.7562%" y="415.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (49,172,504 samples, 0.15%)</title><rect x="2.5062%" y="389" width="0.1472%" height="15" fill="rgb(223,20,43)" fg:x="837416284" fg:w="49172504"/><text x="2.7562%" y="399.50"></text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (49,172,504 samples, 0.15%)</title><rect x="2.5062%" y="373" width="0.1472%" height="15" fill="rgb(229,81,49)" fg:x="837416284" fg:w="49172504"/><text x="2.7562%" y="383.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (49,172,504 samples, 0.15%)</title><rect x="2.5062%" y="357" width="0.1472%" height="15" fill="rgb(236,28,36)" fg:x="837416284" fg:w="49172504"/><text x="2.7562%" y="367.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (49,172,504 samples, 0.15%)</title><rect x="2.5062%" y="341" width="0.1472%" height="15" fill="rgb(249,185,26)" fg:x="837416284" fg:w="49172504"/><text x="2.7562%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8,559,554 samples, 0.03%)</title><rect x="2.6277%" y="325" width="0.0256%" height="15" fill="rgb(249,174,33)" fg:x="878029234" fg:w="8559554"/><text x="2.8777%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8,559,554 samples, 0.03%)</title><rect x="2.6277%" y="309" width="0.0256%" height="15" fill="rgb(233,201,37)" fg:x="878029234" fg:w="8559554"/><text x="2.8777%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (4,293,329 samples, 0.01%)</title><rect x="2.6405%" y="293" width="0.0128%" height="15" fill="rgb(221,78,26)" fg:x="882295459" fg:w="4293329"/><text x="2.8905%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (4,293,329 samples, 0.01%)</title><rect x="2.6405%" y="277" width="0.0128%" height="15" fill="rgb(250,127,30)" fg:x="882295459" fg:w="4293329"/><text x="2.8905%" y="287.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;f64,R,C,S&gt;&gt; for f64&gt;::mul (34,253,478 samples, 0.10%)</title><rect x="2.6534%" y="405" width="0.1025%" height="15" fill="rgb(230,49,44)" fg:x="886588788" fg:w="34253478"/><text x="2.9034%" y="415.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (7,170,411 samples, 0.02%)</title><rect x="9.4522%" y="373" width="0.0215%" height="15" fill="rgb(229,67,23)" fg:x="3158340835" fg:w="7170411"/><text x="9.7022%" y="383.50"></text></g><g><title>[unknown] (7,170,411 samples, 0.02%)</title><rect x="9.4522%" y="357" width="0.0215%" height="15" fill="rgb(249,83,47)" fg:x="3158340835" fg:w="7170411"/><text x="9.7022%" y="367.50"></text></g><g><title>[unknown] (3,976,013 samples, 0.01%)</title><rect x="9.4618%" y="341" width="0.0119%" height="15" fill="rgb(215,43,3)" fg:x="3161535233" fg:w="3976013"/><text x="9.7118%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (61,560,072 samples, 0.18%)</title><rect x="9.4737%" y="373" width="0.1842%" height="15" fill="rgb(238,154,13)" fg:x="3165511246" fg:w="61560072"/><text x="9.7237%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (61,560,072 samples, 0.18%)</title><rect x="9.4737%" y="357" width="0.1842%" height="15" fill="rgb(219,56,2)" fg:x="3165511246" fg:w="61560072"/><text x="9.7237%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (143,300,249 samples, 0.43%)</title><rect x="19.4929%" y="325" width="0.4289%" height="15" fill="rgb(233,0,4)" fg:x="6513331771" fg:w="143300249"/><text x="19.7429%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (5,649,043,302 samples, 16.91%)</title><rect x="19.9218%" y="325" width="16.9063%" height="15" fill="rgb(235,30,7)" fg:x="6656632020" fg:w="5649043302"/><text x="20.1718%" y="335.50">&lt;f64 as core::ops::arith::..</text></g><g><title>[unknown] (4,061,369 samples, 0.01%)</title><rect x="36.8159%" y="309" width="0.0122%" height="15" fill="rgb(250,79,13)" fg:x="12301613953" fg:w="4061369"/><text x="37.0659%" y="319.50"></text></g><g><title>[unknown] (4,061,369 samples, 0.01%)</title><rect x="36.8159%" y="293" width="0.0122%" height="15" fill="rgb(211,146,34)" fg:x="12301613953" fg:w="4061369"/><text x="37.0659%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (662,515,276 samples, 1.98%)</title><rect x="36.8281%" y="325" width="1.9828%" height="15" fill="rgb(228,22,38)" fg:x="12305675322" fg:w="662515276"/><text x="37.0781%" y="335.50">&lt;..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (13,841,265,745 samples, 41.42%)</title><rect x="38.8108%" y="325" width="41.4238%" height="15" fill="rgb(235,168,5)" fg:x="12968190598" fg:w="13841265745"/><text x="39.0608%" y="335.50">core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone</text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::tr_mul (26,014,489,396 samples, 77.86%)</title><rect x="2.7559%" y="405" width="77.8555%" height="15" fill="rgb(221,155,16)" fg:x="920842266" fg:w="26014489396"/><text x="3.0059%" y="415.50">nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::tr_mul</text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::xx_mul_to_uninit (26,014,489,396 samples, 77.86%)</title><rect x="2.7559%" y="389" width="77.8555%" height="15" fill="rgb(215,215,53)" fg:x="920842266" fg:w="26014489396"/><text x="3.0059%" y="399.50">nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::xx_mul_to_uninit</text></g><g><title>nalgebra::base::ops::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::tr_mul::_{{closure}} (23,708,260,344 samples, 70.95%)</title><rect x="9.6579%" y="373" width="70.9534%" height="15" fill="rgb(223,4,10)" fg:x="3227071318" fg:w="23708260344"/><text x="9.9079%" y="383.50">nalgebra::base::ops::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::tr_mul::_{{closure}}</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (23,708,260,344 samples, 70.95%)</title><rect x="9.6579%" y="357" width="70.9534%" height="15" fill="rgb(234,103,6)" fg:x="3227071318" fg:w="23708260344"/><text x="9.9079%" y="367.50">nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx (23,708,260,344 samples, 70.95%)</title><rect x="9.6579%" y="341" width="70.9534%" height="15" fill="rgb(227,97,0)" fg:x="3227071318" fg:w="23708260344"/><text x="9.9079%" y="351.50">nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (125,875,319 samples, 0.38%)</title><rect x="80.2346%" y="325" width="0.3767%" height="15" fill="rgb(234,150,53)" fg:x="26809456343" fg:w="125875319"/><text x="80.4846%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (125,875,319 samples, 0.38%)</title><rect x="80.2346%" y="309" width="0.3767%" height="15" fill="rgb(228,201,54)" fg:x="26809456343" fg:w="125875319"/><text x="80.4846%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (125,875,319 samples, 0.38%)</title><rect x="80.2346%" y="293" width="0.3767%" height="15" fill="rgb(222,22,37)" fg:x="26809456343" fg:w="125875319"/><text x="80.4846%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1,843,791,666 samples, 5.52%)</title><rect x="83.5740%" y="293" width="5.5180%" height="15" fill="rgb(237,53,32)" fg:x="27925274598" fg:w="1843791666"/><text x="83.8240%" y="303.50">&lt;f64 as..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (710,892,985 samples, 2.13%)</title><rect x="89.0920%" y="293" width="2.1275%" height="15" fill="rgb(233,25,53)" fg:x="29769066264" fg:w="710892985"/><text x="89.3420%" y="303.50">c..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (4,135,801,865 samples, 12.38%)</title><rect x="81.2265%" y="357" width="12.3775%" height="15" fill="rgb(210,40,34)" fg:x="27140877151" fg:w="4135801865"/><text x="81.4765%" y="367.50">nalgebra::base::bl..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (4,135,801,865 samples, 12.38%)</title><rect x="81.2265%" y="341" width="12.3775%" height="15" fill="rgb(241,220,44)" fg:x="27140877151" fg:w="4135801865"/><text x="81.4765%" y="351.50">nalgebra::base::bl..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (4,135,801,865 samples, 12.38%)</title><rect x="81.2265%" y="325" width="12.3775%" height="15" fill="rgb(235,28,35)" fg:x="27140877151" fg:w="4135801865"/><text x="81.4765%" y="335.50">nalgebra::base::bl..</text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (4,135,801,865 samples, 12.38%)</title><rect x="81.2265%" y="309" width="12.3775%" height="15" fill="rgb(210,56,17)" fg:x="27140877151" fg:w="4135801865"/><text x="81.4765%" y="319.50">nalgebra::base::bl..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (796,719,767 samples, 2.38%)</title><rect x="91.2196%" y="293" width="2.3844%" height="15" fill="rgb(224,130,29)" fg:x="30479959249" fg:w="796719767"/><text x="91.4696%" y="303.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (796,719,767 samples, 2.38%)</title><rect x="91.2196%" y="277" width="2.3844%" height="15" fill="rgb(235,212,8)" fg:x="30479959249" fg:w="796719767"/><text x="91.4696%" y="287.50">&lt;c..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (780,394,864 samples, 2.34%)</title><rect x="91.2684%" y="261" width="2.3355%" height="15" fill="rgb(223,33,50)" fg:x="30496284152" fg:w="780394864"/><text x="91.5184%" y="271.50">&lt;..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (780,394,864 samples, 2.34%)</title><rect x="91.2684%" y="245" width="2.3355%" height="15" fill="rgb(219,149,13)" fg:x="30496284152" fg:w="780394864"/><text x="91.5184%" y="255.50">c..</text></g><g><title>nalgebra::base::matrix_view::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::columns_range_pair_mut (3,716,176 samples, 0.01%)</title><rect x="93.6040%" y="357" width="0.0111%" height="15" fill="rgb(250,156,29)" fg:x="31276679016" fg:w="3716176"/><text x="93.8540%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::DivAssign&gt;::div_assign (67,066,305 samples, 0.20%)</title><rect x="93.6151%" y="341" width="0.2007%" height="15" fill="rgb(216,193,19)" fg:x="31280395192" fg:w="67066305"/><text x="93.8651%" y="351.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::DivAssign&lt;T&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::div_assign (78,655,822 samples, 0.24%)</title><rect x="93.6151%" y="357" width="0.2354%" height="15" fill="rgb(216,135,14)" fg:x="31280395192" fg:w="78655822"/><text x="93.8651%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11,589,517 samples, 0.03%)</title><rect x="93.8158%" y="341" width="0.0347%" height="15" fill="rgb(241,47,5)" fg:x="31347461497" fg:w="11589517"/><text x="94.0658%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (11,589,517 samples, 0.03%)</title><rect x="93.8158%" y="325" width="0.0347%" height="15" fill="rgb(233,42,35)" fg:x="31347461497" fg:w="11589517"/><text x="94.0658%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (11,589,517 samples, 0.03%)</title><rect x="93.8158%" y="309" width="0.0347%" height="15" fill="rgb(231,13,6)" fg:x="31347461497" fg:w="11589517"/><text x="94.0658%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (11,589,517 samples, 0.03%)</title><rect x="93.8158%" y="293" width="0.0347%" height="15" fill="rgb(207,181,40)" fg:x="31347461497" fg:w="11589517"/><text x="94.0658%" y="303.50"></text></g><g><title>nalgebra::linalg::decomposition::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::cholesky (4,427,590,095 samples, 13.25%)</title><rect x="80.6113%" y="405" width="13.2508%" height="15" fill="rgb(254,173,49)" fg:x="26935331662" fg:w="4427590095"/><text x="80.8613%" y="415.50">nalgebra::linalg::de..</text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::new (4,427,590,095 samples, 13.25%)</title><rect x="80.6113%" y="389" width="13.2508%" height="15" fill="rgb(221,1,38)" fg:x="26935331662" fg:w="4427590095"/><text x="80.8613%" y="399.50">nalgebra::linalg::ch..</text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::new_internal (4,427,590,095 samples, 13.25%)</title><rect x="80.6113%" y="373" width="13.2508%" height="15" fill="rgb(206,124,46)" fg:x="26935331662" fg:w="4427590095"/><text x="80.8613%" y="383.50">nalgebra::linalg::ch..</text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::new_internal::_{{closure}} (3,870,743 samples, 0.01%)</title><rect x="93.8505%" y="357" width="0.0116%" height="15" fill="rgb(249,21,11)" fg:x="31359051014" fg:w="3870743"/><text x="94.1005%" y="367.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="389" width="0.0129%" height="15" fill="rgb(222,201,40)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="399.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="373" width="0.0129%" height="15" fill="rgb(235,61,29)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="357" width="0.0129%" height="15" fill="rgb(219,207,3)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="341" width="0.0129%" height="15" fill="rgb(222,56,46)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="325" width="0.0129%" height="15" fill="rgb(239,76,54)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="309" width="0.0129%" height="15" fill="rgb(231,124,27)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="293" width="0.0129%" height="15" fill="rgb(249,195,6)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="277" width="0.0129%" height="15" fill="rgb(237,174,47)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="261" width="0.0129%" height="15" fill="rgb(206,201,31)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="245" width="0.0129%" height="15" fill="rgb(231,57,52)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="255.50"></text></g><g><title>[libc.so.6] (4,300,044 samples, 0.01%)</title><rect x="93.8621%" y="229" width="0.0129%" height="15" fill="rgb(248,177,22)" fg:x="31362921757" fg:w="4300044"/><text x="94.1121%" y="239.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="389" width="0.0124%" height="15" fill="rgb(215,211,37)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="373" width="0.0124%" height="15" fill="rgb(241,128,51)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="357" width="0.0124%" height="15" fill="rgb(227,165,31)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="367.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="341" width="0.0124%" height="15" fill="rgb(228,167,24)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="325" width="0.0124%" height="15" fill="rgb(228,143,12)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="309" width="0.0124%" height="15" fill="rgb(249,149,8)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="293" width="0.0124%" height="15" fill="rgb(243,35,44)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="277" width="0.0124%" height="15" fill="rgb(246,89,9)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="261" width="0.0124%" height="15" fill="rgb(233,213,13)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="245" width="0.0124%" height="15" fill="rgb(233,141,41)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="229" width="0.0124%" height="15" fill="rgb(239,167,4)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="213" width="0.0124%" height="15" fill="rgb(209,217,16)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="197" width="0.0124%" height="15" fill="rgb(219,88,35)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="181" width="0.0124%" height="15" fill="rgb(220,193,23)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="165" width="0.0124%" height="15" fill="rgb(230,90,52)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="149" width="0.0124%" height="15" fill="rgb(252,106,19)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="159.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (4,133,862 samples, 0.01%)</title><rect x="93.8750%" y="133" width="0.0124%" height="15" fill="rgb(206,74,20)" fg:x="31367221801" fg:w="4133862"/><text x="94.1250%" y="143.50"></text></g><g><title>matrixmultiply::gemm::make_packing_buffer (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="325" width="0.0127%" height="15" fill="rgb(230,138,44)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="335.50"></text></g><g><title>matrixmultiply::aligned_alloc::Alloc&lt;T&gt;::new (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="309" width="0.0127%" height="15" fill="rgb(235,182,43)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="319.50"></text></g><g><title>alloc::alloc::alloc (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="293" width="0.0127%" height="15" fill="rgb(242,16,51)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="303.50"></text></g><g><title>__rdl_alloc (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="277" width="0.0127%" height="15" fill="rgb(248,9,4)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="261" width="0.0127%" height="15" fill="rgb(210,31,22)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="271.50"></text></g><g><title>std::sys::alloc::unix::aligned_malloc (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="245" width="0.0127%" height="15" fill="rgb(239,54,39)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="255.50"></text></g><g><title>posix_memalign (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="229" width="0.0127%" height="15" fill="rgb(230,99,41)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="239.50"></text></g><g><title>[libc.so.6] (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="213" width="0.0127%" height="15" fill="rgb(253,106,12)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="223.50"></text></g><g><title>[libc.so.6] (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="197" width="0.0127%" height="15" fill="rgb(213,46,41)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="207.50"></text></g><g><title>[libc.so.6] (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="181" width="0.0127%" height="15" fill="rgb(215,133,35)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="191.50"></text></g><g><title>[libc.so.6] (4,230,234 samples, 0.01%)</title><rect x="93.8873%" y="165" width="0.0127%" height="15" fill="rgb(213,28,5)" fg:x="31371355663" fg:w="4230234"/><text x="94.1373%" y="175.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (25,302,467 samples, 0.08%)</title><rect x="93.9377%" y="197" width="0.0757%" height="15" fill="rgb(215,77,49)" fg:x="31388192702" fg:w="25302467"/><text x="94.1877%" y="207.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (25,302,467 samples, 0.08%)</title><rect x="93.9377%" y="181" width="0.0757%" height="15" fill="rgb(248,100,22)" fg:x="31388192702" fg:w="25302467"/><text x="94.1877%" y="191.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (41,770,502 samples, 0.13%)</title><rect x="93.9000%" y="293" width="0.1250%" height="15" fill="rgb(208,67,9)" fg:x="31375585897" fg:w="41770502"/><text x="94.1500%" y="303.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (37,557,048 samples, 0.11%)</title><rect x="93.9126%" y="277" width="0.1124%" height="15" fill="rgb(219,133,21)" fg:x="31379799351" fg:w="37557048"/><text x="94.1626%" y="287.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (37,557,048 samples, 0.11%)</title><rect x="93.9126%" y="261" width="0.1124%" height="15" fill="rgb(246,46,29)" fg:x="31379799351" fg:w="37557048"/><text x="94.1626%" y="271.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (37,557,048 samples, 0.11%)</title><rect x="93.9126%" y="245" width="0.1124%" height="15" fill="rgb(246,185,52)" fg:x="31379799351" fg:w="37557048"/><text x="94.1626%" y="255.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (37,557,048 samples, 0.11%)</title><rect x="93.9126%" y="229" width="0.1124%" height="15" fill="rgb(252,136,11)" fg:x="31379799351" fg:w="37557048"/><text x="94.1626%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (29,163,697 samples, 0.09%)</title><rect x="93.9377%" y="213" width="0.0873%" height="15" fill="rgb(219,138,53)" fg:x="31388192702" fg:w="29163697"/><text x="94.1877%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_pd (3,861,230 samples, 0.01%)</title><rect x="94.0134%" y="197" width="0.0116%" height="15" fill="rgb(211,51,23)" fg:x="31413495169" fg:w="3861230"/><text x="94.2634%" y="207.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (54,445,508 samples, 0.16%)</title><rect x="93.8873%" y="389" width="0.1629%" height="15" fill="rgb(247,221,28)" fg:x="31371355663" fg:w="54445508"/><text x="94.1373%" y="399.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (54,445,508 samples, 0.16%)</title><rect x="93.8873%" y="373" width="0.1629%" height="15" fill="rgb(251,222,45)" fg:x="31371355663" fg:w="54445508"/><text x="94.1373%" y="383.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (54,445,508 samples, 0.16%)</title><rect x="93.8873%" y="357" width="0.1629%" height="15" fill="rgb(217,162,53)" fg:x="31371355663" fg:w="54445508"/><text x="94.1373%" y="367.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (54,445,508 samples, 0.16%)</title><rect x="93.8873%" y="341" width="0.1629%" height="15" fill="rgb(229,93,14)" fg:x="31371355663" fg:w="54445508"/><text x="94.1373%" y="351.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (50,215,274 samples, 0.15%)</title><rect x="93.9000%" y="325" width="0.1503%" height="15" fill="rgb(209,67,49)" fg:x="31375585897" fg:w="50215274"/><text x="94.1500%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (50,215,274 samples, 0.15%)</title><rect x="93.9000%" y="309" width="0.1503%" height="15" fill="rgb(213,87,29)" fg:x="31375585897" fg:w="50215274"/><text x="94.1500%" y="319.50"></text></g><g><title>matrixmultiply::gemm::pack (8,444,772 samples, 0.03%)</title><rect x="94.0250%" y="293" width="0.0253%" height="15" fill="rgb(205,151,52)" fg:x="31417356399" fg:w="8444772"/><text x="94.2750%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8,444,772 samples, 0.03%)</title><rect x="94.0250%" y="277" width="0.0253%" height="15" fill="rgb(253,215,39)" fg:x="31417356399" fg:w="8444772"/><text x="94.2750%" y="287.50"></text></g><g><title>core::ptr::write (8,475,340 samples, 0.03%)</title><rect x="94.0503%" y="261" width="0.0254%" height="15" fill="rgb(221,220,41)" fg:x="31425801171" fg:w="8475340"/><text x="94.3003%" y="271.50"></text></g><g><title>rkl::core::layers::Dense::forward (402,374,098 samples, 1.20%)</title><rect x="93.8621%" y="405" width="1.2042%" height="15" fill="rgb(218,133,21)" fg:x="31362921757" fg:w="402374098"/><text x="94.1121%" y="415.50"></text></g><g><title>rkl::core::activations::Activation::forward (339,494,684 samples, 1.02%)</title><rect x="94.0503%" y="389" width="1.0160%" height="15" fill="rgb(221,193,43)" fg:x="31425801171" fg:w="339494684"/><text x="94.3003%" y="399.50"></text></g><g><title>rkl::core::activations::tanh_forward (339,494,684 samples, 1.02%)</title><rect x="94.0503%" y="373" width="1.0160%" height="15" fill="rgb(240,128,52)" fg:x="31425801171" fg:w="339494684"/><text x="94.3003%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (339,494,684 samples, 1.02%)</title><rect x="94.0503%" y="357" width="1.0160%" height="15" fill="rgb(253,114,12)" fg:x="31425801171" fg:w="339494684"/><text x="94.3003%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (339,494,684 samples, 1.02%)</title><rect x="94.0503%" y="341" width="1.0160%" height="15" fill="rgb(215,223,47)" fg:x="31425801171" fg:w="339494684"/><text x="94.3003%" y="351.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (339,494,684 samples, 1.02%)</title><rect x="94.0503%" y="325" width="1.0160%" height="15" fill="rgb(248,225,23)" fg:x="31425801171" fg:w="339494684"/><text x="94.3003%" y="335.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (339,494,684 samples, 1.02%)</title><rect x="94.0503%" y="309" width="1.0160%" height="15" fill="rgb(250,108,0)" fg:x="31425801171" fg:w="339494684"/><text x="94.3003%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (339,494,684 samples, 1.02%)</title><rect x="94.0503%" y="293" width="1.0160%" height="15" fill="rgb(228,208,7)" fg:x="31425801171" fg:w="339494684"/><text x="94.3003%" y="303.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (339,494,684 samples, 1.02%)</title><rect x="94.0503%" y="277" width="1.0160%" height="15" fill="rgb(244,45,10)" fg:x="31425801171" fg:w="339494684"/><text x="94.3003%" y="287.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (331,019,344 samples, 0.99%)</title><rect x="94.0756%" y="261" width="0.9907%" height="15" fill="rgb(207,125,25)" fg:x="31434276511" fg:w="331019344"/><text x="94.3256%" y="271.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (331,019,344 samples, 0.99%)</title><rect x="94.0756%" y="245" width="0.9907%" height="15" fill="rgb(210,195,18)" fg:x="31434276511" fg:w="331019344"/><text x="94.3256%" y="255.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (331,019,344 samples, 0.99%)</title><rect x="94.0756%" y="229" width="0.9907%" height="15" fill="rgb(249,80,12)" fg:x="31434276511" fg:w="331019344"/><text x="94.3256%" y="239.50"></text></g><g><title>tanhf32x (331,019,344 samples, 0.99%)</title><rect x="94.0756%" y="213" width="0.9907%" height="15" fill="rgb(221,65,9)" fg:x="31434276511" fg:w="331019344"/><text x="94.3256%" y="223.50"></text></g><g><title>[libm.so.6] (250,539,350 samples, 0.75%)</title><rect x="94.3165%" y="197" width="0.7498%" height="15" fill="rgb(235,49,36)" fg:x="31514756505" fg:w="250539350"/><text x="94.5665%" y="207.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="389" width="0.0127%" height="15" fill="rgb(225,32,20)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="399.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="373" width="0.0127%" height="15" fill="rgb(215,141,46)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="357" width="0.0127%" height="15" fill="rgb(250,160,47)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="341" width="0.0127%" height="15" fill="rgb(216,222,40)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="325" width="0.0127%" height="15" fill="rgb(234,217,39)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="309" width="0.0127%" height="15" fill="rgb(207,178,40)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="293" width="0.0127%" height="15" fill="rgb(221,136,13)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="277" width="0.0127%" height="15" fill="rgb(249,199,10)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="261" width="0.0127%" height="15" fill="rgb(249,222,13)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="245" width="0.0127%" height="15" fill="rgb(244,185,38)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="229" width="0.0127%" height="15" fill="rgb(236,202,9)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="213" width="0.0127%" height="15" fill="rgb(250,229,37)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="197" width="0.0127%" height="15" fill="rgb(206,174,23)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="181" width="0.0127%" height="15" fill="rgb(211,33,43)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="191.50"></text></g><g><title>alloc::alloc::alloc (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="165" width="0.0127%" height="15" fill="rgb(245,58,50)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="175.50"></text></g><g><title>malloc (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="149" width="0.0127%" height="15" fill="rgb(244,68,36)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="159.50"></text></g><g><title>[libc.so.6] (4,231,788 samples, 0.01%)</title><rect x="95.0663%" y="133" width="0.0127%" height="15" fill="rgb(232,229,15)" fg:x="31765295855" fg:w="4231788"/><text x="95.3163%" y="143.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (4,236,545 samples, 0.01%)</title><rect x="95.0790%" y="389" width="0.0127%" height="15" fill="rgb(254,30,23)" fg:x="31769527643" fg:w="4236545"/><text x="95.3290%" y="399.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect (4,236,545 samples, 0.01%)</title><rect x="95.0790%" y="373" width="0.0127%" height="15" fill="rgb(235,160,14)" fg:x="31769527643" fg:w="4236545"/><text x="95.3290%" y="383.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned (4,236,545 samples, 0.01%)</title><rect x="95.0790%" y="357" width="0.0127%" height="15" fill="rgb(212,155,44)" fg:x="31769527643" fg:w="4236545"/><text x="95.3290%" y="367.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (4,236,545 samples, 0.01%)</title><rect x="95.0790%" y="341" width="0.0127%" height="15" fill="rgb(226,2,50)" fg:x="31769527643" fg:w="4236545"/><text x="95.3290%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned::_{{closure}} (4,236,545 samples, 0.01%)</title><rect x="95.0790%" y="325" width="0.0127%" height="15" fill="rgb(234,177,6)" fg:x="31769527643" fg:w="4236545"/><text x="95.3290%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::and (4,236,545 samples, 0.01%)</title><rect x="95.0790%" y="309" width="0.0127%" height="15" fill="rgb(217,24,9)" fg:x="31769527643" fg:w="4236545"/><text x="95.3290%" y="319.50"></text></g><g><title>ndarray::zip::zip_dimension_check (4,236,545 samples, 0.01%)</title><rect x="95.0790%" y="293" width="0.0127%" height="15" fill="rgb(220,13,46)" fg:x="31769527643" fg:w="4236545"/><text x="95.3290%" y="303.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;*mut A&gt;,D&gt; as ndarray::zip::ndproducer::NdProducer&gt;::equal_dim (4,236,545 samples, 0.01%)</title><rect x="95.0790%" y="277" width="0.0127%" height="15" fill="rgb(239,221,27)" fg:x="31769527643" fg:w="4236545"/><text x="95.3290%" y="287.50"></text></g><g><title>rkl::core::losses::criteria (12,669,572 samples, 0.04%)</title><rect x="95.0663%" y="405" width="0.0379%" height="15" fill="rgb(222,198,25)" fg:x="31765295855" fg:w="12669572"/><text x="95.3163%" y="415.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (4,201,239 samples, 0.01%)</title><rect x="95.0917%" y="389" width="0.0126%" height="15" fill="rgb(211,99,13)" fg:x="31773764188" fg:w="4201239"/><text x="95.3417%" y="399.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (4,201,239 samples, 0.01%)</title><rect x="95.0917%" y="373" width="0.0126%" height="15" fill="rgb(232,111,31)" fg:x="31773764188" fg:w="4201239"/><text x="95.3417%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (4,201,239 samples, 0.01%)</title><rect x="95.0917%" y="357" width="0.0126%" height="15" fill="rgb(245,82,37)" fg:x="31773764188" fg:w="4201239"/><text x="95.3417%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,201,239 samples, 0.01%)</title><rect x="95.0917%" y="341" width="0.0126%" height="15" fill="rgb(227,149,46)" fg:x="31773764188" fg:w="4201239"/><text x="95.3417%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (4,201,239 samples, 0.01%)</title><rect x="95.0917%" y="325" width="0.0126%" height="15" fill="rgb(218,36,50)" fg:x="31773764188" fg:w="4201239"/><text x="95.3417%" y="335.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="389" width="0.1755%" height="15" fill="rgb(226,80,48)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="399.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="373" width="0.1755%" height="15" fill="rgb(238,224,15)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="357" width="0.1755%" height="15" fill="rgb(241,136,10)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="341" width="0.1755%" height="15" fill="rgb(208,32,45)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="325" width="0.1755%" height="15" fill="rgb(207,135,9)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="309" width="0.1755%" height="15" fill="rgb(206,86,44)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="293" width="0.1755%" height="15" fill="rgb(245,177,15)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="277" width="0.1755%" height="15" fill="rgb(206,64,50)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="261" width="0.1755%" height="15" fill="rgb(234,36,40)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="245" width="0.1755%" height="15" fill="rgb(213,64,8)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="255.50"></text></g><g><title>[libc.so.6] (58,630,382 samples, 0.18%)</title><rect x="95.1170%" y="229" width="0.1755%" height="15" fill="rgb(210,75,36)" fg:x="31782217777" fg:w="58630382"/><text x="95.3670%" y="239.50"></text></g><g><title>[unknown] (8,533,875 samples, 0.03%)</title><rect x="95.2669%" y="213" width="0.0255%" height="15" fill="rgb(229,88,21)" fg:x="31832314284" fg:w="8533875"/><text x="95.5169%" y="223.50"></text></g><g><title>[unknown] (8,533,875 samples, 0.03%)</title><rect x="95.2669%" y="197" width="0.0255%" height="15" fill="rgb(252,204,47)" fg:x="31832314284" fg:w="8533875"/><text x="95.5169%" y="207.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="389" width="0.7872%" height="15" fill="rgb(208,77,27)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="373" width="0.7872%" height="15" fill="rgb(221,76,26)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="357" width="0.7872%" height="15" fill="rgb(225,139,18)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="341" width="0.7872%" height="15" fill="rgb(230,137,11)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="325" width="0.7872%" height="15" fill="rgb(212,28,1)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="309" width="0.7872%" height="15" fill="rgb(248,164,17)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="293" width="0.7872%" height="15" fill="rgb(222,171,42)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="277" width="0.7872%" height="15" fill="rgb(243,84,45)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="261" width="0.7872%" height="15" fill="rgb(252,49,23)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="245" width="0.7872%" height="15" fill="rgb(215,19,7)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="229" width="0.7872%" height="15" fill="rgb(238,81,41)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="213" width="0.7872%" height="15" fill="rgb(210,199,37)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="197" width="0.7872%" height="15" fill="rgb(244,192,49)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="181" width="0.7872%" height="15" fill="rgb(226,211,11)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="165" width="0.7872%" height="15" fill="rgb(236,162,54)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (263,038,541 samples, 0.79%)</title><rect x="95.2924%" y="149" width="0.7872%" height="15" fill="rgb(220,229,9)" fg:x="31840848159" fg:w="263038541"/><text x="95.5424%" y="159.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (215,154,729 samples, 0.64%)</title><rect x="95.4357%" y="133" width="0.6439%" height="15" fill="rgb(250,87,22)" fg:x="31888731971" fg:w="215154729"/><text x="95.6857%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (215,154,729 samples, 0.64%)</title><rect x="95.4357%" y="117" width="0.6439%" height="15" fill="rgb(239,43,17)" fg:x="31888731971" fg:w="215154729"/><text x="95.6857%" y="127.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign::_{{closure}} (114,630,043 samples, 0.34%)</title><rect x="95.7366%" y="101" width="0.3431%" height="15" fill="rgb(231,177,25)" fg:x="31989256657" fg:w="114630043"/><text x="95.9866%" y="111.50"></text></g><g><title>core::clone::Clone::clone_from (114,630,043 samples, 0.34%)</title><rect x="95.7366%" y="85" width="0.3431%" height="15" fill="rgb(219,179,1)" fg:x="31989256657" fg:w="114630043"/><text x="95.9866%" y="95.50"></text></g><g><title>[unknown] (12,748,481 samples, 0.04%)</title><rect x="96.0415%" y="69" width="0.0382%" height="15" fill="rgb(238,219,53)" fg:x="32091138219" fg:w="12748481"/><text x="96.2915%" y="79.50"></text></g><g><title>[unknown] (8,851,614 samples, 0.03%)</title><rect x="96.0531%" y="53" width="0.0265%" height="15" fill="rgb(232,167,36)" fg:x="32095035086" fg:w="8851614"/><text x="96.3031%" y="63.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="389" width="0.0128%" height="15" fill="rgb(244,19,51)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="373" width="0.0128%" height="15" fill="rgb(224,6,22)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="357" width="0.0128%" height="15" fill="rgb(224,145,5)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="367.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="341" width="0.0128%" height="15" fill="rgb(234,130,49)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="325" width="0.0128%" height="15" fill="rgb(254,6,2)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="309" width="0.0128%" height="15" fill="rgb(208,96,46)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="293" width="0.0128%" height="15" fill="rgb(239,3,39)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="277" width="0.0128%" height="15" fill="rgb(233,210,1)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="261" width="0.0128%" height="15" fill="rgb(244,137,37)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="245" width="0.0128%" height="15" fill="rgb(240,136,2)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="229" width="0.0128%" height="15" fill="rgb(239,18,37)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="213" width="0.0128%" height="15" fill="rgb(218,185,22)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="197" width="0.0128%" height="15" fill="rgb(225,218,4)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="181" width="0.0128%" height="15" fill="rgb(230,182,32)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="165" width="0.0128%" height="15" fill="rgb(242,56,43)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4,281,090 samples, 0.01%)</title><rect x="96.0796%" y="149" width="0.0128%" height="15" fill="rgb(233,99,24)" fg:x="32103886700" fg:w="4281090"/><text x="96.3296%" y="159.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (4,222,788 samples, 0.01%)</title><rect x="96.0924%" y="197" width="0.0126%" height="15" fill="rgb(234,209,42)" fg:x="32108167790" fg:w="4222788"/><text x="96.3424%" y="207.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (4,222,788 samples, 0.01%)</title><rect x="96.0924%" y="181" width="0.0126%" height="15" fill="rgb(227,7,12)" fg:x="32108167790" fg:w="4222788"/><text x="96.3424%" y="191.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (8,477,525 samples, 0.03%)</title><rect x="96.0924%" y="293" width="0.0254%" height="15" fill="rgb(245,203,43)" fg:x="32108167790" fg:w="8477525"/><text x="96.3424%" y="303.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (8,477,525 samples, 0.03%)</title><rect x="96.0924%" y="277" width="0.0254%" height="15" fill="rgb(238,205,33)" fg:x="32108167790" fg:w="8477525"/><text x="96.3424%" y="287.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (8,477,525 samples, 0.03%)</title><rect x="96.0924%" y="261" width="0.0254%" height="15" fill="rgb(231,56,7)" fg:x="32108167790" fg:w="8477525"/><text x="96.3424%" y="271.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (8,477,525 samples, 0.03%)</title><rect x="96.0924%" y="245" width="0.0254%" height="15" fill="rgb(244,186,29)" fg:x="32108167790" fg:w="8477525"/><text x="96.3424%" y="255.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (8,477,525 samples, 0.03%)</title><rect x="96.0924%" y="229" width="0.0254%" height="15" fill="rgb(234,111,31)" fg:x="32108167790" fg:w="8477525"/><text x="96.3424%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (8,477,525 samples, 0.03%)</title><rect x="96.0924%" y="213" width="0.0254%" height="15" fill="rgb(241,149,10)" fg:x="32108167790" fg:w="8477525"/><text x="96.3424%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,254,737 samples, 0.01%)</title><rect x="96.1051%" y="197" width="0.0127%" height="15" fill="rgb(249,206,44)" fg:x="32112390578" fg:w="4254737"/><text x="96.3551%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,254,737 samples, 0.01%)</title><rect x="96.1051%" y="181" width="0.0127%" height="15" fill="rgb(251,153,30)" fg:x="32112390578" fg:w="4254737"/><text x="96.3551%" y="191.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (18,611,099 samples, 0.06%)</title><rect x="96.0924%" y="389" width="0.0557%" height="15" fill="rgb(239,152,38)" fg:x="32108167790" fg:w="18611099"/><text x="96.3424%" y="399.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (18,611,099 samples, 0.06%)</title><rect x="96.0924%" y="373" width="0.0557%" height="15" fill="rgb(249,139,47)" fg:x="32108167790" fg:w="18611099"/><text x="96.3424%" y="383.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (18,611,099 samples, 0.06%)</title><rect x="96.0924%" y="357" width="0.0557%" height="15" fill="rgb(244,64,35)" fg:x="32108167790" fg:w="18611099"/><text x="96.3424%" y="367.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (18,611,099 samples, 0.06%)</title><rect x="96.0924%" y="341" width="0.0557%" height="15" fill="rgb(216,46,15)" fg:x="32108167790" fg:w="18611099"/><text x="96.3424%" y="351.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (18,611,099 samples, 0.06%)</title><rect x="96.0924%" y="325" width="0.0557%" height="15" fill="rgb(250,74,19)" fg:x="32108167790" fg:w="18611099"/><text x="96.3424%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (18,611,099 samples, 0.06%)</title><rect x="96.0924%" y="309" width="0.0557%" height="15" fill="rgb(249,42,33)" fg:x="32108167790" fg:w="18611099"/><text x="96.3424%" y="319.50"></text></g><g><title>matrixmultiply::gemm::pack (10,133,574 samples, 0.03%)</title><rect x="96.1178%" y="293" width="0.0303%" height="15" fill="rgb(242,149,17)" fg:x="32116645315" fg:w="10133574"/><text x="96.3678%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,872,714 samples, 0.02%)</title><rect x="96.1306%" y="277" width="0.0176%" height="15" fill="rgb(244,29,21)" fg:x="32120906175" fg:w="5872714"/><text x="96.3806%" y="287.50"></text></g><g><title>ndarray::stacking::concatenate (245,242,892 samples, 0.73%)</title><rect x="96.1481%" y="389" width="0.7340%" height="15" fill="rgb(220,130,37)" fg:x="32126778889" fg:w="245242892"/><text x="96.3981%" y="399.50"></text></g><g><title>ndarray::impl_owned_array::&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (245,242,892 samples, 0.73%)</title><rect x="96.1481%" y="373" width="0.7340%" height="15" fill="rgb(211,67,2)" fg:x="32126778889" fg:w="245242892"/><text x="96.3981%" y="383.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (245,242,892 samples, 0.73%)</title><rect x="96.1481%" y="357" width="0.7340%" height="15" fill="rgb(235,68,52)" fg:x="32126778889" fg:w="245242892"/><text x="96.3981%" y="367.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (245,242,892 samples, 0.73%)</title><rect x="96.1481%" y="341" width="0.7340%" height="15" fill="rgb(246,142,3)" fg:x="32126778889" fg:w="245242892"/><text x="96.3981%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (245,242,892 samples, 0.73%)</title><rect x="96.1481%" y="325" width="0.7340%" height="15" fill="rgb(241,25,7)" fg:x="32126778889" fg:w="245242892"/><text x="96.3981%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (245,242,892 samples, 0.73%)</title><rect x="96.1481%" y="309" width="0.7340%" height="15" fill="rgb(242,119,39)" fg:x="32126778889" fg:w="245242892"/><text x="96.3981%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (245,242,892 samples, 0.73%)</title><rect x="96.1481%" y="293" width="0.7340%" height="15" fill="rgb(241,98,45)" fg:x="32126778889" fg:w="245242892"/><text x="96.3981%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (176,687,558 samples, 0.53%)</title><rect x="96.3533%" y="277" width="0.5288%" height="15" fill="rgb(254,28,30)" fg:x="32195334223" fg:w="176687558"/><text x="96.6033%" y="287.50"></text></g><g><title>ndarray::impl_owned_array::_&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append::_{{closure}} (176,687,558 samples, 0.53%)</title><rect x="96.3533%" y="261" width="0.5288%" height="15" fill="rgb(241,142,54)" fg:x="32195334223" fg:w="176687558"/><text x="96.6033%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (176,687,558 samples, 0.53%)</title><rect x="96.3533%" y="245" width="0.5288%" height="15" fill="rgb(222,85,15)" fg:x="32195334223" fg:w="176687558"/><text x="96.6033%" y="255.50"></text></g><g><title>core::ptr::write (176,687,558 samples, 0.53%)</title><rect x="96.3533%" y="229" width="0.5288%" height="15" fill="rgb(210,85,47)" fg:x="32195334223" fg:w="176687558"/><text x="96.6033%" y="239.50"></text></g><g><title>[unknown] (37,257,788 samples, 0.11%)</title><rect x="96.7706%" y="213" width="0.1115%" height="15" fill="rgb(224,206,25)" fg:x="32334763993" fg:w="37257788"/><text x="97.0206%" y="223.50"></text></g><g><title>[unknown] (28,024,944 samples, 0.08%)</title><rect x="96.7982%" y="197" width="0.0839%" height="15" fill="rgb(243,201,19)" fg:x="32343996837" fg:w="28024944"/><text x="97.0482%" y="207.50"></text></g><g><title>core::ptr::write (4,056,406 samples, 0.01%)</title><rect x="96.8821%" y="261" width="0.0121%" height="15" fill="rgb(236,59,4)" fg:x="32372021781" fg:w="4056406"/><text x="97.1321%" y="271.50"></text></g><g><title>rkl::core::activations::Activation::forward (97,246,554 samples, 0.29%)</title><rect x="96.8821%" y="389" width="0.2910%" height="15" fill="rgb(254,179,45)" fg:x="32372021781" fg:w="97246554"/><text x="97.1321%" y="399.50"></text></g><g><title>rkl::core::activations::tanh_forward (97,246,554 samples, 0.29%)</title><rect x="96.8821%" y="373" width="0.2910%" height="15" fill="rgb(226,14,10)" fg:x="32372021781" fg:w="97246554"/><text x="97.1321%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (97,246,554 samples, 0.29%)</title><rect x="96.8821%" y="357" width="0.2910%" height="15" fill="rgb(244,27,41)" fg:x="32372021781" fg:w="97246554"/><text x="97.1321%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (97,246,554 samples, 0.29%)</title><rect x="96.8821%" y="341" width="0.2910%" height="15" fill="rgb(235,35,32)" fg:x="32372021781" fg:w="97246554"/><text x="97.1321%" y="351.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (97,246,554 samples, 0.29%)</title><rect x="96.8821%" y="325" width="0.2910%" height="15" fill="rgb(218,68,31)" fg:x="32372021781" fg:w="97246554"/><text x="97.1321%" y="335.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (97,246,554 samples, 0.29%)</title><rect x="96.8821%" y="309" width="0.2910%" height="15" fill="rgb(207,120,37)" fg:x="32372021781" fg:w="97246554"/><text x="97.1321%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (97,246,554 samples, 0.29%)</title><rect x="96.8821%" y="293" width="0.2910%" height="15" fill="rgb(227,98,0)" fg:x="32372021781" fg:w="97246554"/><text x="97.1321%" y="303.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (97,246,554 samples, 0.29%)</title><rect x="96.8821%" y="277" width="0.2910%" height="15" fill="rgb(207,7,3)" fg:x="32372021781" fg:w="97246554"/><text x="97.1321%" y="287.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (93,190,148 samples, 0.28%)</title><rect x="96.8942%" y="261" width="0.2789%" height="15" fill="rgb(206,98,19)" fg:x="32376078187" fg:w="93190148"/><text x="97.1442%" y="271.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (93,190,148 samples, 0.28%)</title><rect x="96.8942%" y="245" width="0.2789%" height="15" fill="rgb(217,5,26)" fg:x="32376078187" fg:w="93190148"/><text x="97.1442%" y="255.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (93,190,148 samples, 0.28%)</title><rect x="96.8942%" y="229" width="0.2789%" height="15" fill="rgb(235,190,38)" fg:x="32376078187" fg:w="93190148"/><text x="97.1442%" y="239.50"></text></g><g><title>tanhf32x (93,190,148 samples, 0.28%)</title><rect x="96.8942%" y="213" width="0.2789%" height="15" fill="rgb(247,86,24)" fg:x="32376078187" fg:w="93190148"/><text x="97.1442%" y="223.50"></text></g><g><title>[libm.so.6] (67,905,055 samples, 0.20%)</title><rect x="96.9699%" y="197" width="0.2032%" height="15" fill="rgb(205,101,16)" fg:x="32401363280" fg:w="67905055"/><text x="97.2199%" y="207.50"></text></g><g><title>[unknown] (29,129,547 samples, 0.09%)</title><rect x="97.4126%" y="373" width="0.0872%" height="15" fill="rgb(246,168,33)" fg:x="32549267415" fg:w="29129547"/><text x="97.6626%" y="383.50"></text></g><g><title>[unknown] (24,991,880 samples, 0.07%)</title><rect x="97.4249%" y="357" width="0.0748%" height="15" fill="rgb(231,114,1)" fg:x="32553405082" fg:w="24991880"/><text x="97.6749%" y="367.50"></text></g><g><title>[unknown] (3,752,204 samples, 0.01%)</title><rect x="97.4885%" y="341" width="0.0112%" height="15" fill="rgb(207,184,53)" fg:x="32574644758" fg:w="3752204"/><text x="97.7385%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (70,239,916 samples, 0.21%)</title><rect x="97.5124%" y="341" width="0.2102%" height="15" fill="rgb(224,95,51)" fg:x="32582612416" fg:w="70239916"/><text x="97.7624%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (70,239,916 samples, 0.21%)</title><rect x="97.5124%" y="325" width="0.2102%" height="15" fill="rgb(212,188,45)" fg:x="32582612416" fg:w="70239916"/><text x="97.7624%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (85,938,648 samples, 0.26%)</title><rect x="97.4997%" y="373" width="0.2572%" height="15" fill="rgb(223,154,38)" fg:x="32578396962" fg:w="85938648"/><text x="97.7497%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (85,938,648 samples, 0.26%)</title><rect x="97.4997%" y="357" width="0.2572%" height="15" fill="rgb(251,22,52)" fg:x="32578396962" fg:w="85938648"/><text x="97.7497%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (11,483,278 samples, 0.03%)</title><rect x="97.7226%" y="341" width="0.0344%" height="15" fill="rgb(229,209,22)" fg:x="32652852332" fg:w="11483278"/><text x="97.9726%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (35,275,160 samples, 0.11%)</title><rect x="97.7569%" y="357" width="0.1056%" height="15" fill="rgb(234,138,34)" fg:x="32664335610" fg:w="35275160"/><text x="98.0069%" y="367.50"></text></g><g><title>ndarray::arraytraits::&lt;impl core::ops::index::Index&lt;I&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::index (46,718,448 samples, 0.14%)</title><rect x="97.7569%" y="373" width="0.1398%" height="15" fill="rgb(212,95,11)" fg:x="32664335610" fg:w="46718448"/><text x="98.0069%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11,443,288 samples, 0.03%)</title><rect x="97.8625%" y="357" width="0.0342%" height="15" fill="rgb(240,179,47)" fg:x="32699610770" fg:w="11443288"/><text x="98.1125%" y="367.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="373" width="0.0195%" height="15" fill="rgb(240,163,11)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="357" width="0.0195%" height="15" fill="rgb(236,37,12)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="341" width="0.0195%" height="15" fill="rgb(232,164,16)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="325" width="0.0195%" height="15" fill="rgb(244,205,15)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="309" width="0.0195%" height="15" fill="rgb(223,117,47)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="293" width="0.0195%" height="15" fill="rgb(244,107,35)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="277" width="0.0195%" height="15" fill="rgb(205,140,8)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="261" width="0.0195%" height="15" fill="rgb(228,84,46)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="245" width="0.0195%" height="15" fill="rgb(254,188,9)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="229" width="0.0195%" height="15" fill="rgb(206,112,54)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="239.50"></text></g><g><title>[libc.so.6] (6,513,262 samples, 0.02%)</title><rect x="97.8967%" y="213" width="0.0195%" height="15" fill="rgb(216,84,49)" fg:x="32711054058" fg:w="6513262"/><text x="98.1467%" y="223.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="373" width="0.0127%" height="15" fill="rgb(214,194,35)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="383.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="357" width="0.0127%" height="15" fill="rgb(249,28,3)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="367.50"></text></g><g><title>alloc::vec::from_elem (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="341" width="0.0127%" height="15" fill="rgb(222,56,52)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="325" width="0.0127%" height="15" fill="rgb(245,217,50)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="309" width="0.0127%" height="15" fill="rgb(213,201,24)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="293" width="0.0127%" height="15" fill="rgb(248,116,28)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="277" width="0.0127%" height="15" fill="rgb(219,72,43)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="261" width="0.0127%" height="15" fill="rgb(209,138,14)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="245" width="0.0127%" height="15" fill="rgb(222,18,33)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="229" width="0.0127%" height="15" fill="rgb(213,199,7)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="239.50"></text></g><g><title>[libc.so.6] (4,237,105 samples, 0.01%)</title><rect x="97.9162%" y="213" width="0.0127%" height="15" fill="rgb(250,110,10)" fg:x="32717567320" fg:w="4237105"/><text x="98.1662%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move (34,751,128 samples, 0.10%)</title><rect x="97.9390%" y="357" width="0.1040%" height="15" fill="rgb(248,123,6)" fg:x="32725180352" fg:w="34751128"/><text x="98.1890%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (34,751,128 samples, 0.10%)</title><rect x="97.9390%" y="341" width="0.1040%" height="15" fill="rgb(206,91,31)" fg:x="32725180352" fg:w="34751128"/><text x="98.1890%" y="351.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move::_{{closure}} (34,751,128 samples, 0.10%)</title><rect x="97.9390%" y="325" width="0.1040%" height="15" fill="rgb(211,154,13)" fg:x="32725180352" fg:w="34751128"/><text x="98.1890%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_axis_inplace (28,344,657 samples, 0.08%)</title><rect x="97.9582%" y="309" width="0.0848%" height="15" fill="rgb(225,148,7)" fg:x="32731586823" fg:w="28344657"/><text x="98.2082%" y="319.50"></text></g><g><title>ndarray::dimension::do_slice (24,423,406 samples, 0.07%)</title><rect x="97.9699%" y="293" width="0.0731%" height="15" fill="rgb(220,160,43)" fg:x="32735508074" fg:w="24423406"/><text x="98.2199%" y="303.50"></text></g><g><title>ndarray::dimension::to_abs_slice (16,740,507 samples, 0.05%)</title><rect x="97.9929%" y="277" width="0.0501%" height="15" fill="rgb(213,52,39)" fg:x="32743190973" fg:w="16740507"/><text x="98.2429%" y="287.50"></text></g><g><title>ndarray::dimension::abs_index (4,024,921 samples, 0.01%)</title><rect x="98.0310%" y="261" width="0.0120%" height="15" fill="rgb(243,137,7)" fg:x="32755906559" fg:w="4024921"/><text x="98.2810%" y="271.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (42,237,389 samples, 0.13%)</title><rect x="97.9289%" y="373" width="0.1264%" height="15" fill="rgb(230,79,13)" fg:x="32721804425" fg:w="42237389"/><text x="98.1789%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::view (4,110,334 samples, 0.01%)</title><rect x="98.0430%" y="357" width="0.0123%" height="15" fill="rgb(247,105,23)" fg:x="32759931480" fg:w="4110334"/><text x="98.2930%" y="367.50"></text></g><g><title>ndarray::impl_views::constructors::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::new (4,110,334 samples, 0.01%)</title><rect x="98.0430%" y="341" width="0.0123%" height="15" fill="rgb(223,179,41)" fg:x="32759931480" fg:w="4110334"/><text x="98.2930%" y="351.50"></text></g><g><title>ndarray::impl_internal_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::with_strides_dim (4,110,334 samples, 0.01%)</title><rect x="98.0430%" y="325" width="0.0123%" height="15" fill="rgb(218,9,34)" fg:x="32759931480" fg:w="4110334"/><text x="98.2930%" y="335.50"></text></g><g><title>matrixmultiply::gemm::pack (3,832,150 samples, 0.01%)</title><rect x="98.0553%" y="309" width="0.0115%" height="15" fill="rgb(222,106,8)" fg:x="32764041814" fg:w="3832150"/><text x="98.3053%" y="319.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_blend_pd (3,786,213 samples, 0.01%)</title><rect x="98.0668%" y="181" width="0.0113%" height="15" fill="rgb(211,220,0)" fg:x="32767873964" fg:w="3786213"/><text x="98.3168%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_shuffle_pd (4,048,863 samples, 0.01%)</title><rect x="98.0781%" y="181" width="0.0121%" height="15" fill="rgb(229,52,16)" fg:x="32771660177" fg:w="4048863"/><text x="98.3281%" y="191.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (16,403,827 samples, 0.05%)</title><rect x="98.0668%" y="261" width="0.0491%" height="15" fill="rgb(212,155,18)" fg:x="32767873964" fg:w="16403827"/><text x="98.3168%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (16,403,827 samples, 0.05%)</title><rect x="98.0668%" y="245" width="0.0491%" height="15" fill="rgb(242,21,14)" fg:x="32767873964" fg:w="16403827"/><text x="98.3168%" y="255.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (16,403,827 samples, 0.05%)</title><rect x="98.0668%" y="229" width="0.0491%" height="15" fill="rgb(222,19,48)" fg:x="32767873964" fg:w="16403827"/><text x="98.3168%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (16,403,827 samples, 0.05%)</title><rect x="98.0668%" y="213" width="0.0491%" height="15" fill="rgb(232,45,27)" fg:x="32767873964" fg:w="16403827"/><text x="98.3168%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (16,403,827 samples, 0.05%)</title><rect x="98.0668%" y="197" width="0.0491%" height="15" fill="rgb(249,103,42)" fg:x="32767873964" fg:w="16403827"/><text x="98.3168%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (8,568,751 samples, 0.03%)</title><rect x="98.0902%" y="181" width="0.0256%" height="15" fill="rgb(246,81,33)" fg:x="32775709040" fg:w="8568751"/><text x="98.3402%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (8,568,751 samples, 0.03%)</title><rect x="98.0902%" y="165" width="0.0256%" height="15" fill="rgb(252,33,42)" fg:x="32775709040" fg:w="8568751"/><text x="98.3402%" y="175.50"></text></g><g><title>core::ptr::write_unaligned (8,568,751 samples, 0.03%)</title><rect x="98.0902%" y="149" width="0.0256%" height="15" fill="rgb(209,212,41)" fg:x="32775709040" fg:w="8568751"/><text x="98.3402%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8,568,751 samples, 0.03%)</title><rect x="98.0902%" y="133" width="0.0256%" height="15" fill="rgb(207,154,6)" fg:x="32775709040" fg:w="8568751"/><text x="98.3402%" y="143.50"></text></g><g><title>[unknown] (8,568,751 samples, 0.03%)</title><rect x="98.0902%" y="117" width="0.0256%" height="15" fill="rgb(223,64,47)" fg:x="32775709040" fg:w="8568751"/><text x="98.3402%" y="127.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (20,374,463 samples, 0.06%)</title><rect x="98.0668%" y="277" width="0.0610%" height="15" fill="rgb(211,161,38)" fg:x="32767873964" fg:w="20374463"/><text x="98.3168%" y="287.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::thread_local (3,970,636 samples, 0.01%)</title><rect x="98.1159%" y="261" width="0.0119%" height="15" fill="rgb(219,138,40)" fg:x="32784277791" fg:w="3970636"/><text x="98.3659%" y="271.50"></text></g><g><title>[unknown] (3,970,636 samples, 0.01%)</title><rect x="98.1159%" y="245" width="0.0119%" height="15" fill="rgb(241,228,46)" fg:x="32784277791" fg:w="3970636"/><text x="98.3659%" y="255.50"></text></g><g><title>[unknown] (3,970,636 samples, 0.01%)</title><rect x="98.1159%" y="229" width="0.0119%" height="15" fill="rgb(223,209,38)" fg:x="32784277791" fg:w="3970636"/><text x="98.3659%" y="239.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (30,560,673 samples, 0.09%)</title><rect x="98.0553%" y="373" width="0.0915%" height="15" fill="rgb(236,164,45)" fg:x="32764041814" fg:w="30560673"/><text x="98.3053%" y="383.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (30,560,673 samples, 0.09%)</title><rect x="98.0553%" y="357" width="0.0915%" height="15" fill="rgb(231,15,5)" fg:x="32764041814" fg:w="30560673"/><text x="98.3053%" y="367.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (30,560,673 samples, 0.09%)</title><rect x="98.0553%" y="341" width="0.0915%" height="15" fill="rgb(252,35,15)" fg:x="32764041814" fg:w="30560673"/><text x="98.3053%" y="351.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (30,560,673 samples, 0.09%)</title><rect x="98.0553%" y="325" width="0.0915%" height="15" fill="rgb(248,181,18)" fg:x="32764041814" fg:w="30560673"/><text x="98.3053%" y="335.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (26,728,523 samples, 0.08%)</title><rect x="98.0668%" y="309" width="0.0800%" height="15" fill="rgb(233,39,42)" fg:x="32767873964" fg:w="26728523"/><text x="98.3168%" y="319.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (26,728,523 samples, 0.08%)</title><rect x="98.0668%" y="293" width="0.0800%" height="15" fill="rgb(238,110,33)" fg:x="32767873964" fg:w="26728523"/><text x="98.3168%" y="303.50"></text></g><g><title>matrixmultiply::gemm::pack (6,354,060 samples, 0.02%)</title><rect x="98.1278%" y="277" width="0.0190%" height="15" fill="rgb(233,195,10)" fg:x="32788248427" fg:w="6354060"/><text x="98.3778%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,354,060 samples, 0.02%)</title><rect x="98.1278%" y="261" width="0.0190%" height="15" fill="rgb(254,105,3)" fg:x="32788248427" fg:w="6354060"/><text x="98.3778%" y="271.50"></text></g><g><title>ndarray::slice::SliceInfo&lt;T,Din,Dout&gt;::new_unchecked (4,323,026 samples, 0.01%)</title><rect x="98.1468%" y="373" width="0.0129%" height="15" fill="rgb(221,225,9)" fg:x="32794602487" fg:w="4323026"/><text x="98.3968%" y="383.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="357" width="0.0479%" height="15" fill="rgb(224,227,45)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="367.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="341" width="0.0479%" height="15" fill="rgb(229,198,43)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="325" width="0.0479%" height="15" fill="rgb(206,209,35)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="309" width="0.0479%" height="15" fill="rgb(245,195,53)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="293" width="0.0479%" height="15" fill="rgb(240,92,26)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="277" width="0.0479%" height="15" fill="rgb(207,40,23)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="261" width="0.0479%" height="15" fill="rgb(223,111,35)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="245" width="0.0479%" height="15" fill="rgb(229,147,28)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="229" width="0.0479%" height="15" fill="rgb(211,29,28)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="213" width="0.0479%" height="15" fill="rgb(228,72,33)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="223.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="197" width="0.0479%" height="15" fill="rgb(205,214,31)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="181" width="0.0479%" height="15" fill="rgb(224,111,15)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="165" width="0.0479%" height="15" fill="rgb(253,21,26)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="149" width="0.0479%" height="15" fill="rgb(245,139,43)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="159.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="133" width="0.0479%" height="15" fill="rgb(252,170,7)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="143.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="117" width="0.0479%" height="15" fill="rgb(231,118,14)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="127.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="101" width="0.0479%" height="15" fill="rgb(238,83,0)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="85" width="0.0479%" height="15" fill="rgb(221,39,39)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="95.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (16,017,447 samples, 0.05%)</title><rect x="98.1597%" y="69" width="0.0479%" height="15" fill="rgb(222,119,46)" fg:x="32798925513" fg:w="16017447"/><text x="98.4097%" y="79.50"></text></g><g><title>core::ops::function::Fn::call (3,838,552 samples, 0.01%)</title><rect x="98.1962%" y="53" width="0.0115%" height="15" fill="rgb(222,165,49)" fg:x="32811104408" fg:w="3838552"/><text x="98.4462%" y="63.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (3,838,552 samples, 0.01%)</title><rect x="98.1962%" y="37" width="0.0115%" height="15" fill="rgb(219,113,52)" fg:x="32811104408" fg:w="3838552"/><text x="98.4462%" y="47.50"></text></g><g><title>core::ptr::write (10,051,903 samples, 0.03%)</title><rect x="98.2193%" y="245" width="0.0301%" height="15" fill="rgb(214,7,15)" fg:x="32818844633" fg:w="10051903"/><text x="98.4693%" y="255.50"></text></g><g><title>rkl::core::layers::Dense::backward_jacobian (564,824,496 samples, 1.69%)</title><rect x="97.1731%" y="389" width="1.6904%" height="15" fill="rgb(235,32,4)" fg:x="32469268335" fg:w="564824496"/><text x="97.4231%" y="399.50"></text></g><g><title>rkl::core::activations::Activation::backward (235,167,318 samples, 0.70%)</title><rect x="98.1597%" y="373" width="0.7038%" height="15" fill="rgb(238,90,54)" fg:x="32798925513" fg:w="235167318"/><text x="98.4097%" y="383.50"></text></g><g><title>rkl::core::activations::tanh_backward (219,149,871 samples, 0.66%)</title><rect x="98.2077%" y="357" width="0.6559%" height="15" fill="rgb(213,208,19)" fg:x="32814942960" fg:w="219149871"/><text x="98.4577%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (219,149,871 samples, 0.66%)</title><rect x="98.2077%" y="341" width="0.6559%" height="15" fill="rgb(233,156,4)" fg:x="32814942960" fg:w="219149871"/><text x="98.4577%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (219,149,871 samples, 0.66%)</title><rect x="98.2077%" y="325" width="0.6559%" height="15" fill="rgb(207,194,5)" fg:x="32814942960" fg:w="219149871"/><text x="98.4577%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (219,149,871 samples, 0.66%)</title><rect x="98.2077%" y="309" width="0.6559%" height="15" fill="rgb(206,111,30)" fg:x="32814942960" fg:w="219149871"/><text x="98.4577%" y="319.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (219,149,871 samples, 0.66%)</title><rect x="98.2077%" y="293" width="0.6559%" height="15" fill="rgb(243,70,54)" fg:x="32814942960" fg:w="219149871"/><text x="98.4577%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (219,149,871 samples, 0.66%)</title><rect x="98.2077%" y="277" width="0.6559%" height="15" fill="rgb(242,28,8)" fg:x="32814942960" fg:w="219149871"/><text x="98.4577%" y="287.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (219,149,871 samples, 0.66%)</title><rect x="98.2077%" y="261" width="0.6559%" height="15" fill="rgb(219,106,18)" fg:x="32814942960" fg:w="219149871"/><text x="98.4577%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (205,196,295 samples, 0.61%)</title><rect x="98.2494%" y="245" width="0.6141%" height="15" fill="rgb(244,222,10)" fg:x="32828896536" fg:w="205196295"/><text x="98.4994%" y="255.50"></text></g><g><title>rkl::core::activations::tanh_backward::_{{closure}} (205,196,295 samples, 0.61%)</title><rect x="98.2494%" y="229" width="0.6141%" height="15" fill="rgb(236,179,52)" fg:x="32828896536" fg:w="205196295"/><text x="98.4994%" y="239.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (188,677,871 samples, 0.56%)</title><rect x="98.2989%" y="213" width="0.5647%" height="15" fill="rgb(213,23,39)" fg:x="32845414960" fg:w="188677871"/><text x="98.5489%" y="223.50"></text></g><g><title>tanhf32x (188,677,871 samples, 0.56%)</title><rect x="98.2989%" y="197" width="0.5647%" height="15" fill="rgb(238,48,10)" fg:x="32845414960" fg:w="188677871"/><text x="98.5489%" y="207.50"></text></g><g><title>[libm.so.6] (117,001,262 samples, 0.35%)</title><rect x="98.5134%" y="181" width="0.3502%" height="15" fill="rgb(251,196,23)" fg:x="32917091569" fg:w="117001262"/><text x="98.7634%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6,355,281 samples, 0.02%)</title><rect x="99.8486%" y="341" width="0.0190%" height="15" fill="rgb(250,152,24)" fg:x="33363228560" fg:w="6355281"/><text x="100.0986%" y="351.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::backward_jacobian (1,591,618,442 samples, 4.76%)</title><rect x="95.1042%" y="405" width="4.7634%" height="15" fill="rgb(209,150,17)" fg:x="31777965427" fg:w="1591618442"/><text x="95.3542%" y="415.50">rkl::m..</text></g><g><title>rkl::models::divide_rows_by_last_value (335,491,038 samples, 1.00%)</title><rect x="98.8635%" y="389" width="1.0040%" height="15" fill="rgb(234,202,34)" fg:x="33034092831" fg:w="335491038"/><text x="99.1135%" y="399.50"></text></g><g><title>&lt;ndarray::iterators::IterMut&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,874,325 samples, 0.05%)</title><rect x="99.8201%" y="373" width="0.0475%" height="15" fill="rgb(253,148,53)" fg:x="33353709544" fg:w="15874325"/><text x="100.0701%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,355,309 samples, 0.02%)</title><rect x="99.8486%" y="357" width="0.0190%" height="15" fill="rgb(218,129,16)" fg:x="33363228560" fg:w="6355309"/><text x="100.0986%" y="367.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit (33,338,044,076 samples, 99.77%)</title><rect x="0.1072%" y="421" width="99.7732%" height="15" fill="rgb(216,85,19)" fg:x="35816679" fg:w="33338044076"/><text x="0.3572%" y="431.50">rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit</text></g><g><title>std::io::stdio::_print (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="405" width="0.0128%" height="15" fill="rgb(235,228,7)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="415.50"></text></g><g><title>std::io::stdio::print_to (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="389" width="0.0128%" height="15" fill="rgb(245,175,0)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="399.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="373" width="0.0128%" height="15" fill="rgb(208,168,36)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="383.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="357" width="0.0128%" height="15" fill="rgb(246,171,24)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="367.50"></text></g><g><title>std::io::Write::write_fmt (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="341" width="0.0128%" height="15" fill="rgb(215,142,24)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="351.50"></text></g><g><title>core::fmt::write (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="325" width="0.0128%" height="15" fill="rgb(250,187,7)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="309" width="0.0128%" height="15" fill="rgb(228,66,33)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="319.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="293" width="0.0128%" height="15" fill="rgb(234,215,21)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="303.50"></text></g><g><title>core::num::flt2dec::to_shortest_str (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="277" width="0.0128%" height="15" fill="rgb(222,191,20)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="287.50"></text></g><g><title>core::ops::function::FnMut::call_mut (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="261" width="0.0128%" height="15" fill="rgb(245,79,54)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="271.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="245" width="0.0128%" height="15" fill="rgb(240,10,37)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="255.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="229" width="0.0128%" height="15" fill="rgb(214,192,32)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="239.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt::round_and_weed (4,276,886 samples, 0.01%)</title><rect x="99.8676%" y="213" width="0.0128%" height="15" fill="rgb(209,36,54)" fg:x="33369583869" fg:w="4276886"/><text x="100.1176%" y="223.50"></text></g><g><title>_start (33,345,161,443 samples, 99.79%)</title><rect x="0.0971%" y="693" width="99.7945%" height="15" fill="rgb(220,10,11)" fg:x="32460209" fg:w="33345161443"/><text x="0.3471%" y="703.50">_start</text></g><g><title>__libc_start_main (33,345,161,443 samples, 99.79%)</title><rect x="0.0971%" y="677" width="99.7945%" height="15" fill="rgb(221,106,17)" fg:x="32460209" fg:w="33345161443"/><text x="0.3471%" y="687.50">__libc_start_main</text></g><g><title>[libc.so.6] (33,345,161,443 samples, 99.79%)</title><rect x="0.0971%" y="661" width="99.7945%" height="15" fill="rgb(251,142,44)" fg:x="32460209" fg:w="33345161443"/><text x="0.3471%" y="671.50">[libc.so.6]</text></g><g><title>main (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="645" width="99.7844%" height="15" fill="rgb(238,13,15)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="629" width="99.7844%" height="15" fill="rgb(208,107,27)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="613" width="99.7844%" height="15" fill="rgb(205,136,37)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="597" width="99.7844%" height="15" fill="rgb(250,205,27)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="581" width="99.7844%" height="15" fill="rgb(210,80,43)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="591.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="565" width="99.7844%" height="15" fill="rgb(247,160,36)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="575.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="549" width="99.7844%" height="15" fill="rgb(234,13,49)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="533" width="99.7844%" height="15" fill="rgb(234,122,0)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="517" width="99.7844%" height="15" fill="rgb(207,146,38)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="501" width="99.7844%" height="15" fill="rgb(207,177,25)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="485" width="99.7844%" height="15" fill="rgb(211,178,42)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="495.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="469" width="99.7844%" height="15" fill="rgb(230,69,54)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="453" width="99.7844%" height="15" fill="rgb(214,135,41)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>main_benchmark::main (33,341,804,973 samples, 99.78%)</title><rect x="0.1072%" y="437" width="99.7844%" height="15" fill="rgb(237,67,25)" fg:x="35816679" fg:w="33341804973"/><text x="0.3572%" y="447.50">main_benchmark::main</text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::predict (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="421" width="0.0113%" height="15" fill="rgb(222,189,50)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="431.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::predict_with_normalization (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="405" width="0.0113%" height="15" fill="rgb(245,148,34)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="415.50"></text></g><g><title>rkl::core::layers::Dense::forward (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="389" width="0.0113%" height="15" fill="rgb(222,29,6)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="399.50"></text></g><g><title>rkl::core::activations::Activation::forward (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="373" width="0.0113%" height="15" fill="rgb(221,189,43)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="383.50"></text></g><g><title>rkl::core::activations::tanh_forward (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="357" width="0.0113%" height="15" fill="rgb(207,36,27)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="341" width="0.0113%" height="15" fill="rgb(217,90,24)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="325" width="0.0113%" height="15" fill="rgb(224,66,35)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="309" width="0.0113%" height="15" fill="rgb(221,13,50)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="319.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="293" width="0.0113%" height="15" fill="rgb(236,68,49)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="277" width="0.0113%" height="15" fill="rgb(229,146,28)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="287.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="261" width="0.0113%" height="15" fill="rgb(225,31,38)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="245" width="0.0113%" height="15" fill="rgb(250,208,3)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="255.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="229" width="0.0113%" height="15" fill="rgb(246,54,23)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="239.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="213" width="0.0113%" height="15" fill="rgb(243,76,11)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="223.50"></text></g><g><title>tanhf32x (3,760,897 samples, 0.01%)</title><rect x="99.8804%" y="197" width="0.0113%" height="15" fill="rgb(245,21,50)" fg:x="33373860755" fg:w="3760897"/><text x="100.1304%" y="207.50"></text></g><g><title>plotters::chart::mesh::MeshStyle&lt;X,Y,DB&gt;::draw (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="693" width="0.0363%" height="15" fill="rgb(228,9,43)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="703.50"></text></g><g><title>plotters::chart::context::cartesian2d::draw_impl::&lt;impl plotters::chart::context::ChartContext&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;&gt;::draw_mesh (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="677" width="0.0363%" height="15" fill="rgb(208,100,47)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="687.50"></text></g><g><title>plotters::chart::context::cartesian2d::draw_impl::&lt;impl plotters::chart::context::ChartContext&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;&gt;::draw_mesh_lines (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="661" width="0.0363%" height="15" fill="rgb(232,26,8)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="671.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;::draw_mesh (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="645" width="0.0363%" height="15" fill="rgb(216,166,38)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="655.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::backend_ops (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="629" width="0.0363%" height="15" fill="rgb(251,202,51)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="639.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;::draw_mesh::_{{closure}} (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="613" width="0.0363%" height="15" fill="rgb(254,216,34)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="623.50"></text></g><g><title>plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;::draw_mesh (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="597" width="0.0363%" height="15" fill="rgb(251,32,27)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="607.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;::draw_mesh::_{{closure}}::_{{closure}} (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="581" width="0.0363%" height="15" fill="rgb(208,127,28)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="591.50"></text></g><g><title>plotters::chart::context::cartesian2d::draw_impl::_&lt;impl plotters::chart::context::ChartContext&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;&gt;::draw_mesh_lines::_{{closure}} (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="565" width="0.0363%" height="15" fill="rgb(224,137,22)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="575.50"></text></g><g><title>plotters::coord::ranged2d::cartesian::MeshLine&lt;X,Y&gt;::draw (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="549" width="0.0363%" height="15" fill="rgb(254,70,32)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="559.50"></text></g><g><title>&lt;plotters_bitmap::bitmap::BitMapBackend&lt;P&gt; as plotters_backend::DrawingBackend&gt;::draw_line (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="533" width="0.0363%" height="15" fill="rgb(229,75,37)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="543.50"></text></g><g><title>&lt;plotters_bitmap::bitmap_pixel::rgb::RGBPixel as plotters_bitmap::bitmap_pixel::pixel_format::PixelFormat&gt;::blend_rect_fast (12,131,285 samples, 0.04%)</title><rect x="99.8916%" y="517" width="0.0363%" height="15" fill="rgb(252,64,23)" fg:x="33377621652" fg:w="12131285"/><text x="100.1416%" y="527.50"></text></g><g><title>plotters_bitmap::bitmap_pixel::pixel_format::blend (6,193,194 samples, 0.02%)</title><rect x="99.9094%" y="501" width="0.0185%" height="15" fill="rgb(232,162,48)" fg:x="33383559743" fg:w="6193194"/><text x="100.1594%" y="511.50"></text></g><g><title>rkl::plot::plot_comparision::plot_comparison (8,306,554 samples, 0.02%)</title><rect x="99.9279%" y="693" width="0.0249%" height="15" fill="rgb(246,160,12)" fg:x="33389752937" fg:w="8306554"/><text x="100.1779%" y="703.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::present (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="677" width="0.0161%" height="15" fill="rgb(247,166,0)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="687.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::backend_ops (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="661" width="0.0161%" height="15" fill="rgb(249,219,21)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="671.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::present::_{{closure}} (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="645" width="0.0161%" height="15" fill="rgb(205,209,3)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="655.50"></text></g><g><title>&lt;plotters_bitmap::bitmap::BitMapBackend&lt;P&gt; as plotters_backend::DrawingBackend&gt;::present (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="629" width="0.0161%" height="15" fill="rgb(243,44,1)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="639.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::save (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="613" width="0.0161%" height="15" fill="rgb(206,159,16)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="623.50"></text></g><g><title>image::dynimage::save_buffer (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="597" width="0.0161%" height="15" fill="rgb(244,77,30)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="607.50"></text></g><g><title>image::io::free_functions::save_buffer_impl (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="581" width="0.0161%" height="15" fill="rgb(218,69,12)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="591.50"></text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="565" width="0.0161%" height="15" fill="rgb(212,87,7)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="575.50"></text></g><g><title>image::io::free_functions::write_buffer_impl (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="549" width="0.0161%" height="15" fill="rgb(245,114,25)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="559.50"></text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="533" width="0.0161%" height="15" fill="rgb(210,61,42)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="543.50"></text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="517" width="0.0161%" height="15" fill="rgb(211,52,33)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="527.50"></text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (5,376,484 samples, 0.02%)</title><rect x="99.9367%" y="501" width="0.0161%" height="15" fill="rgb(234,58,33)" fg:x="33392683007" fg:w="5376484"/><text x="100.1867%" y="511.50"></text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_run (6,421,554 samples, 0.02%)</title><rect x="99.9528%" y="469" width="0.0192%" height="15" fill="rgb(220,115,36)" fg:x="33398059491" fg:w="6421554"/><text x="100.2028%" y="479.50"></text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_bits (6,421,554 samples, 0.02%)</title><rect x="99.9528%" y="453" width="0.0192%" height="15" fill="rgb(243,153,54)" fg:x="33398059491" fg:w="6421554"/><text x="100.2028%" y="463.50"></text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_data (9,368,074 samples, 0.03%)</title><rect x="99.9528%" y="485" width="0.0280%" height="15" fill="rgb(251,47,18)" fg:x="33398059491" fg:w="9368074"/><text x="100.2028%" y="495.50"></text></g><g><title>all (33,413,831,509 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(242,102,42)" fg:x="0" fg:w="33413831509"/><text x="0.2500%" y="735.50"></text></g><g><title>main_benchmark (33,413,831,509 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(234,31,38)" fg:x="0" fg:w="33413831509"/><text x="0.2500%" y="719.50">main_benchmark</text></g><g><title>rkl::plot::plot_errors_over_epochs::plot_errors_over_epochs (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="693" width="0.0472%" height="15" fill="rgb(221,117,51)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="703.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::present (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="677" width="0.0472%" height="15" fill="rgb(212,20,18)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="687.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::backend_ops (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="661" width="0.0472%" height="15" fill="rgb(245,133,36)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="671.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::present::_{{closure}} (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="645" width="0.0472%" height="15" fill="rgb(212,6,19)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="655.50"></text></g><g><title>&lt;plotters_bitmap::bitmap::BitMapBackend&lt;P&gt; as plotters_backend::DrawingBackend&gt;::present (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="629" width="0.0472%" height="15" fill="rgb(218,1,36)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="639.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::save (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="613" width="0.0472%" height="15" fill="rgb(246,84,54)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="623.50"></text></g><g><title>image::dynimage::save_buffer (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="597" width="0.0472%" height="15" fill="rgb(242,110,6)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="607.50"></text></g><g><title>image::io::free_functions::save_buffer_impl (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="581" width="0.0472%" height="15" fill="rgb(214,47,5)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="591.50"></text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="565" width="0.0472%" height="15" fill="rgb(218,159,25)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="575.50"></text></g><g><title>image::io::free_functions::write_buffer_impl (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="549" width="0.0472%" height="15" fill="rgb(215,211,28)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="559.50"></text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="533" width="0.0472%" height="15" fill="rgb(238,59,32)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="543.50"></text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="517" width="0.0472%" height="15" fill="rgb(226,82,3)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="527.50"></text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (15,772,018 samples, 0.05%)</title><rect x="99.9528%" y="501" width="0.0472%" height="15" fill="rgb(240,164,32)" fg:x="33398059491" fg:w="15772018"/><text x="100.2028%" y="511.50"></text></g><g><title>png::filter::filter (6,403,944 samples, 0.02%)</title><rect x="99.9808%" y="485" width="0.0192%" height="15" fill="rgb(232,46,7)" fg:x="33407427565" fg:w="6403944"/><text x="100.2308%" y="495.50"></text></g><g><title>png::filter::filter_internal (6,403,944 samples, 0.02%)</title><rect x="99.9808%" y="469" width="0.0192%" height="15" fill="rgb(229,129,53)" fg:x="33407427565" fg:w="6403944"/><text x="100.2308%" y="479.50"></text></g><g><title>png::filter::filter_paeth (6,403,944 samples, 0.02%)</title><rect x="99.9808%" y="453" width="0.0192%" height="15" fill="rgb(234,188,29)" fg:x="33407427565" fg:w="6403944"/><text x="100.2308%" y="463.50"></text></g></svg></svg>