<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="350191013353"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (36,285,326 samples, 0.01%)</title><rect x="0.0176%" y="357" width="0.0104%" height="15" fill="rgb(227,0,7)" fg:x="61784206" fg:w="36285326"/><text x="0.2676%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (36,285,326 samples, 0.01%)</title><rect x="0.0176%" y="341" width="0.0104%" height="15" fill="rgb(217,0,24)" fg:x="61784206" fg:w="36285326"/><text x="0.2676%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (44,720,958 samples, 0.01%)</title><rect x="0.0164%" y="389" width="0.0128%" height="15" fill="rgb(221,193,54)" fg:x="57583558" fg:w="44720958"/><text x="0.2664%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (44,720,958 samples, 0.01%)</title><rect x="0.0164%" y="373" width="0.0128%" height="15" fill="rgb(248,212,6)" fg:x="57583558" fg:w="44720958"/><text x="0.2664%" y="383.50"></text></g><g><title>[libc.so.6] (1,833,866,773 samples, 0.52%)</title><rect x="0.0365%" y="261" width="0.5237%" height="15" fill="rgb(208,68,35)" fg:x="127808322" fg:w="1833866773"/><text x="0.2865%" y="271.50"></text></g><g><title>[unknown] (776,684,246 samples, 0.22%)</title><rect x="0.3384%" y="245" width="0.2218%" height="15" fill="rgb(232,128,0)" fg:x="1184990849" fg:w="776684246"/><text x="0.5884%" y="255.50"></text></g><g><title>[unknown] (317,671,112 samples, 0.09%)</title><rect x="0.4695%" y="229" width="0.0907%" height="15" fill="rgb(207,160,47)" fg:x="1644003983" fg:w="317671112"/><text x="0.7195%" y="239.50"></text></g><g><title>[unknown] (41,302,205 samples, 0.01%)</title><rect x="0.5484%" y="213" width="0.0118%" height="15" fill="rgb(228,23,34)" fg:x="1920372890" fg:w="41302205"/><text x="0.7984%" y="223.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (1,856,760,896 samples, 0.53%)</title><rect x="0.0311%" y="389" width="0.5302%" height="15" fill="rgb(218,30,26)" fg:x="109055750" fg:w="1856760896"/><text x="0.2811%" y="399.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (1,856,760,896 samples, 0.53%)</title><rect x="0.0311%" y="373" width="0.5302%" height="15" fill="rgb(220,122,19)" fg:x="109055750" fg:w="1856760896"/><text x="0.2811%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,856,760,896 samples, 0.53%)</title><rect x="0.0311%" y="357" width="0.5302%" height="15" fill="rgb(250,228,42)" fg:x="109055750" fg:w="1856760896"/><text x="0.2811%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,856,760,896 samples, 0.53%)</title><rect x="0.0311%" y="341" width="0.5302%" height="15" fill="rgb(240,193,28)" fg:x="109055750" fg:w="1856760896"/><text x="0.2811%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1,856,760,896 samples, 0.53%)</title><rect x="0.0311%" y="325" width="0.5302%" height="15" fill="rgb(216,20,37)" fg:x="109055750" fg:w="1856760896"/><text x="0.2811%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,856,760,896 samples, 0.53%)</title><rect x="0.0311%" y="309" width="0.5302%" height="15" fill="rgb(206,188,39)" fg:x="109055750" fg:w="1856760896"/><text x="0.2811%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,838,008,324 samples, 0.52%)</title><rect x="0.0365%" y="293" width="0.5249%" height="15" fill="rgb(217,207,13)" fg:x="127808322" fg:w="1838008324"/><text x="0.2865%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,838,008,324 samples, 0.52%)</title><rect x="0.0365%" y="277" width="0.5249%" height="15" fill="rgb(231,73,38)" fg:x="127808322" fg:w="1838008324"/><text x="0.2865%" y="287.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Neg for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::neg (38,558,871 samples, 0.01%)</title><rect x="0.5762%" y="357" width="0.0110%" height="15" fill="rgb(225,20,46)" fg:x="2017800940" fg:w="38558871"/><text x="0.8262%" y="367.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::neg_mut (38,558,871 samples, 0.01%)</title><rect x="0.5762%" y="341" width="0.0110%" height="15" fill="rgb(210,31,41)" fg:x="2017800940" fg:w="38558871"/><text x="0.8262%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (208,940,518 samples, 0.06%)</title><rect x="0.6214%" y="245" width="0.0597%" height="15" fill="rgb(221,200,47)" fg:x="2176149511" fg:w="208940518"/><text x="0.8714%" y="255.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (388,417,705 samples, 0.11%)</title><rect x="0.6855%" y="245" width="0.1109%" height="15" fill="rgb(226,26,5)" fg:x="2400600121" fg:w="388417705"/><text x="0.9355%" y="255.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::ad_solve_lower_triangular_unchecked_mut (732,359,738 samples, 0.21%)</title><rect x="0.5930%" y="325" width="0.2091%" height="15" fill="rgb(249,33,26)" fg:x="2076633150" fg:w="732359738"/><text x="0.8430%" y="335.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::xx_solve_lower_triangular_vector_unchecked_mut (732,359,738 samples, 0.21%)</title><rect x="0.5930%" y="309" width="0.2091%" height="15" fill="rgb(235,183,28)" fg:x="2076633150" fg:w="732359738"/><text x="0.8430%" y="319.50"></text></g><g><title>nalgebra::linalg::solve::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::ad_solve_lower_triangular_unchecked_mut::_{{closure}} (668,483,868 samples, 0.19%)</title><rect x="0.6112%" y="293" width="0.1909%" height="15" fill="rgb(221,5,38)" fg:x="2140509020" fg:w="668483868"/><text x="0.8612%" y="303.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (668,483,868 samples, 0.19%)</title><rect x="0.6112%" y="277" width="0.1909%" height="15" fill="rgb(247,18,42)" fg:x="2140509020" fg:w="668483868"/><text x="0.8612%" y="287.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx (668,483,868 samples, 0.19%)</title><rect x="0.6112%" y="261" width="0.1909%" height="15" fill="rgb(241,131,45)" fg:x="2140509020" fg:w="668483868"/><text x="0.8612%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (325,571,902 samples, 0.09%)</title><rect x="0.8682%" y="229" width="0.0930%" height="15" fill="rgb(249,31,29)" fg:x="3040291570" fg:w="325571902"/><text x="1.1182%" y="239.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (491,658,167 samples, 0.14%)</title><rect x="0.9612%" y="229" width="0.1404%" height="15" fill="rgb(225,111,53)" fg:x="3365863472" fg:w="491658167"/><text x="1.2112%" y="239.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (1,297,376,345 samples, 0.37%)</title><rect x="0.8102%" y="293" width="0.3705%" height="15" fill="rgb(238,160,17)" fg:x="2837162385" fg:w="1297376345"/><text x="1.0602%" y="303.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (1,297,376,345 samples, 0.37%)</title><rect x="0.8102%" y="277" width="0.3705%" height="15" fill="rgb(214,148,48)" fg:x="2837162385" fg:w="1297376345"/><text x="1.0602%" y="287.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (1,297,376,345 samples, 0.37%)</title><rect x="0.8102%" y="261" width="0.3705%" height="15" fill="rgb(232,36,49)" fg:x="2837162385" fg:w="1297376345"/><text x="1.0602%" y="271.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (1,297,376,345 samples, 0.37%)</title><rect x="0.8102%" y="245" width="0.3705%" height="15" fill="rgb(209,103,24)" fg:x="2837162385" fg:w="1297376345"/><text x="1.0602%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (277,017,091 samples, 0.08%)</title><rect x="1.1015%" y="229" width="0.0791%" height="15" fill="rgb(229,88,8)" fg:x="3857521639" fg:w="277017091"/><text x="1.3515%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (277,017,091 samples, 0.08%)</title><rect x="1.1015%" y="213" width="0.0791%" height="15" fill="rgb(213,181,19)" fg:x="3857521639" fg:w="277017091"/><text x="1.3515%" y="223.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (277,017,091 samples, 0.08%)</title><rect x="1.1015%" y="197" width="0.0791%" height="15" fill="rgb(254,191,54)" fg:x="3857521639" fg:w="277017091"/><text x="1.3515%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (277,017,091 samples, 0.08%)</title><rect x="1.1015%" y="181" width="0.0791%" height="15" fill="rgb(241,83,37)" fg:x="3857521639" fg:w="277017091"/><text x="1.3515%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,120,286,196 samples, 0.61%)</title><rect x="0.5762%" y="389" width="0.6055%" height="15" fill="rgb(233,36,39)" fg:x="2017800940" fg:w="2120286196"/><text x="0.8262%" y="399.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit::_{{closure}} (2,120,286,196 samples, 0.61%)</title><rect x="0.5762%" y="373" width="0.6055%" height="15" fill="rgb(226,3,54)" fg:x="2017800940" fg:w="2120286196"/><text x="0.8262%" y="383.50"></text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::solve (2,081,727,325 samples, 0.59%)</title><rect x="0.5872%" y="357" width="0.5945%" height="15" fill="rgb(245,192,40)" fg:x="2056359811" fg:w="2081727325"/><text x="0.8372%" y="367.50"></text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::solve_mut (2,061,453,986 samples, 0.59%)</title><rect x="0.5930%" y="341" width="0.5887%" height="15" fill="rgb(238,167,29)" fg:x="2076633150" fg:w="2061453986"/><text x="0.8430%" y="351.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::solve_lower_triangular_unchecked_mut (1,329,094,248 samples, 0.38%)</title><rect x="0.8021%" y="325" width="0.3795%" height="15" fill="rgb(232,182,51)" fg:x="2808992888" fg:w="1329094248"/><text x="1.0521%" y="335.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::solve_lower_triangular_vector_unchecked_mut (1,329,094,248 samples, 0.38%)</title><rect x="0.8021%" y="309" width="0.3795%" height="15" fill="rgb(231,60,39)" fg:x="2808992888" fg:w="1329094248"/><text x="1.0521%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,464,954,164 samples, 0.42%)</title><rect x="1.2071%" y="357" width="0.4183%" height="15" fill="rgb(208,69,12)" fg:x="4227071432" fg:w="1464954164"/><text x="1.4571%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1,153,397,973 samples, 0.33%)</title><rect x="1.2960%" y="341" width="0.3294%" height="15" fill="rgb(235,93,37)" fg:x="4538627623" fg:w="1153397973"/><text x="1.5460%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1,153,397,973 samples, 0.33%)</title><rect x="1.2960%" y="325" width="0.3294%" height="15" fill="rgb(213,116,39)" fg:x="4538627623" fg:w="1153397973"/><text x="1.5460%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1,153,397,973 samples, 0.33%)</title><rect x="1.2960%" y="309" width="0.3294%" height="15" fill="rgb(222,207,29)" fg:x="4538627623" fg:w="1153397973"/><text x="1.5460%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8,683,612,740 samples, 2.48%)</title><rect x="1.6261%" y="357" width="2.4797%" height="15" fill="rgb(206,96,30)" fg:x="5694499146" fg:w="8683612740"/><text x="1.8761%" y="367.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8,683,612,740 samples, 2.48%)</title><rect x="1.6261%" y="341" width="2.4797%" height="15" fill="rgb(218,138,4)" fg:x="5694499146" fg:w="8683612740"/><text x="1.8761%" y="351.50">&lt;c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8,609,990,821 samples, 2.46%)</title><rect x="1.6471%" y="325" width="2.4587%" height="15" fill="rgb(250,191,14)" fg:x="5768121065" fg:w="8609990821"/><text x="1.8971%" y="335.50">co..</text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_row_slice (10,167,535,425 samples, 2.90%)</title><rect x="1.2050%" y="389" width="2.9034%" height="15" fill="rgb(239,60,40)" fg:x="4219846718" fg:w="10167535425"/><text x="1.4550%" y="399.50">na..</text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_row_slice_generic (10,167,535,425 samples, 2.90%)</title><rect x="1.2050%" y="373" width="2.9034%" height="15" fill="rgb(206,27,48)" fg:x="4219846718" fg:w="10167535425"/><text x="1.4550%" y="383.50">na..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,301,218,866 samples, 0.66%)</title><rect x="4.1139%" y="213" width="0.6571%" height="15" fill="rgb(225,35,8)" fg:x="14406666665" fg:w="2301218866"/><text x="4.3639%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2,301,218,866 samples, 0.66%)</title><rect x="4.1139%" y="197" width="0.6571%" height="15" fill="rgb(250,213,24)" fg:x="14406666665" fg:w="2301218866"/><text x="4.3639%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (2,301,218,866 samples, 0.66%)</title><rect x="4.1139%" y="181" width="0.6571%" height="15" fill="rgb(247,123,22)" fg:x="14406666665" fg:w="2301218866"/><text x="4.3639%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (2,301,218,866 samples, 0.66%)</title><rect x="4.1139%" y="165" width="0.6571%" height="15" fill="rgb(231,138,38)" fg:x="14406666665" fg:w="2301218866"/><text x="4.3639%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,301,218,866 samples, 0.66%)</title><rect x="4.1139%" y="149" width="0.6571%" height="15" fill="rgb(231,145,46)" fg:x="14406666665" fg:w="2301218866"/><text x="4.3639%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each::check::_{{closure}} (2,301,218,866 samples, 0.66%)</title><rect x="4.1139%" y="133" width="0.6571%" height="15" fill="rgb(251,118,11)" fg:x="14406666665" fg:w="2301218866"/><text x="4.3639%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (2,301,218,866 samples, 0.66%)</title><rect x="4.1139%" y="117" width="0.6571%" height="15" fill="rgb(217,147,25)" fg:x="14406666665" fg:w="2301218866"/><text x="4.3639%" y="127.50"></text></g><g><title>core::ptr::write (2,301,218,866 samples, 0.66%)</title><rect x="4.1139%" y="101" width="0.6571%" height="15" fill="rgb(247,81,37)" fg:x="14406666665" fg:w="2301218866"/><text x="4.3639%" y="111.50"></text></g><g><title>[libc.so.6] (2,301,218,866 samples, 0.66%)</title><rect x="4.1139%" y="85" width="0.6571%" height="15" fill="rgb(209,12,38)" fg:x="14406666665" fg:w="2301218866"/><text x="4.3639%" y="95.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::identity (2,332,207,816 samples, 0.67%)</title><rect x="4.1084%" y="389" width="0.6660%" height="15" fill="rgb(227,1,9)" fg:x="14387382143" fg:w="2332207816"/><text x="4.3584%" y="399.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::identity_generic (2,332,207,816 samples, 0.67%)</title><rect x="4.1084%" y="373" width="0.6660%" height="15" fill="rgb(248,47,43)" fg:x="14387382143" fg:w="2332207816"/><text x="4.3584%" y="383.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_diagonal_element_generic (2,332,207,816 samples, 0.67%)</title><rect x="4.1084%" y="357" width="0.6660%" height="15" fill="rgb(221,10,30)" fg:x="14387382143" fg:w="2332207816"/><text x="4.3584%" y="367.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::zeros_generic (2,312,923,294 samples, 0.66%)</title><rect x="4.1139%" y="341" width="0.6605%" height="15" fill="rgb(210,229,1)" fg:x="14406666665" fg:w="2312923294"/><text x="4.3639%" y="351.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_element_generic (2,312,923,294 samples, 0.66%)</title><rect x="4.1139%" y="325" width="0.6605%" height="15" fill="rgb(222,148,37)" fg:x="14406666665" fg:w="2312923294"/><text x="4.3639%" y="335.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator_generic (2,312,923,294 samples, 0.66%)</title><rect x="4.1139%" y="309" width="0.6605%" height="15" fill="rgb(234,67,33)" fg:x="14406666665" fg:w="2312923294"/><text x="4.3639%" y="319.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::allocate_from_iterator (2,312,923,294 samples, 0.66%)</title><rect x="4.1139%" y="293" width="0.6605%" height="15" fill="rgb(247,98,35)" fg:x="14406666665" fg:w="2312923294"/><text x="4.3639%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,312,923,294 samples, 0.66%)</title><rect x="4.1139%" y="277" width="0.6605%" height="15" fill="rgb(247,138,52)" fg:x="14406666665" fg:w="2312923294"/><text x="4.3639%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,312,923,294 samples, 0.66%)</title><rect x="4.1139%" y="261" width="0.6605%" height="15" fill="rgb(213,79,30)" fg:x="14406666665" fg:w="2312923294"/><text x="4.3639%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,312,923,294 samples, 0.66%)</title><rect x="4.1139%" y="245" width="0.6605%" height="15" fill="rgb(246,177,23)" fg:x="14406666665" fg:w="2312923294"/><text x="4.3639%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,312,923,294 samples, 0.66%)</title><rect x="4.1139%" y="229" width="0.6605%" height="15" fill="rgb(230,62,27)" fg:x="14406666665" fg:w="2312923294"/><text x="4.3639%" y="239.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (14,560,923,298 samples, 4.16%)</title><rect x="4.7771%" y="357" width="4.1580%" height="15" fill="rgb(216,154,8)" fg:x="16729105492" fg:w="14560923298"/><text x="5.0271%" y="367.50">&lt;nalg..</text></g><g><title>[unknown] (696,956,075 samples, 0.20%)</title><rect x="8.7361%" y="341" width="0.1990%" height="15" fill="rgb(244,35,45)" fg:x="30593072715" fg:w="696956075"/><text x="8.9861%" y="351.50"></text></g><g><title>[unknown] (422,747,441 samples, 0.12%)</title><rect x="8.8144%" y="325" width="0.1207%" height="15" fill="rgb(251,115,12)" fg:x="30867281349" fg:w="422747441"/><text x="9.0644%" y="335.50"></text></g><g><title>[unknown] (45,010,381 samples, 0.01%)</title><rect x="8.9223%" y="309" width="0.0129%" height="15" fill="rgb(240,54,50)" fg:x="31245018409" fg:w="45010381"/><text x="9.1723%" y="319.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (3,284,602,430 samples, 0.94%)</title><rect x="8.9351%" y="357" width="0.9379%" height="15" fill="rgb(233,84,52)" fg:x="31290028790" fg:w="3284602430"/><text x="9.1851%" y="367.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,119,283,391 samples, 0.32%)</title><rect x="9.9391%" y="325" width="0.3196%" height="15" fill="rgb(207,117,47)" fg:x="34805968236" fg:w="1119283391"/><text x="10.1891%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,119,283,391 samples, 0.32%)</title><rect x="9.9391%" y="309" width="0.3196%" height="15" fill="rgb(249,43,39)" fg:x="34805968236" fg:w="1119283391"/><text x="10.1891%" y="319.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose (19,490,104,324 samples, 5.57%)</title><rect x="4.7744%" y="389" width="5.5656%" height="15" fill="rgb(209,38,44)" fg:x="16719589959" fg:w="19490104324"/><text x="5.0244%" y="399.50">nalgebr..</text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose_to_uninit (19,480,588,791 samples, 5.56%)</title><rect x="4.7771%" y="373" width="5.5628%" height="15" fill="rgb(236,212,23)" fg:x="16729105492" fg:w="19480588791"/><text x="5.0271%" y="383.50">nalgebr..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,635,063,063 samples, 0.47%)</title><rect x="9.8731%" y="357" width="0.4669%" height="15" fill="rgb(242,79,21)" fg:x="34574631220" fg:w="1635063063"/><text x="10.1231%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,635,063,063 samples, 0.47%)</title><rect x="9.8731%" y="341" width="0.4669%" height="15" fill="rgb(211,96,35)" fg:x="34574631220" fg:w="1635063063"/><text x="10.1231%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (284,442,656 samples, 0.08%)</title><rect x="10.2588%" y="325" width="0.0812%" height="15" fill="rgb(253,215,40)" fg:x="35925251627" fg:w="284442656"/><text x="10.5088%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (1,188,411,466 samples, 0.34%)</title><rect x="10.3410%" y="341" width="0.3394%" height="15" fill="rgb(211,81,21)" fg:x="36213390093" fg:w="1188411466"/><text x="10.5910%" y="351.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (1,411,541,716 samples, 0.40%)</title><rect x="10.3400%" y="389" width="0.4031%" height="15" fill="rgb(208,190,38)" fg:x="36209694283" fg:w="1411541716"/><text x="10.5900%" y="399.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (1,407,845,906 samples, 0.40%)</title><rect x="10.3410%" y="373" width="0.4020%" height="15" fill="rgb(235,213,38)" fg:x="36213390093" fg:w="1407845906"/><text x="10.5910%" y="383.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (1,407,845,906 samples, 0.40%)</title><rect x="10.3410%" y="357" width="0.4020%" height="15" fill="rgb(237,122,38)" fg:x="36213390093" fg:w="1407845906"/><text x="10.5910%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (207,504,897 samples, 0.06%)</title><rect x="10.6838%" y="341" width="0.0593%" height="15" fill="rgb(244,218,35)" fg:x="37413731102" fg:w="207504897"/><text x="10.9338%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (207,504,897 samples, 0.06%)</title><rect x="10.6838%" y="325" width="0.0593%" height="15" fill="rgb(240,68,47)" fg:x="37413731102" fg:w="207504897"/><text x="10.9338%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (207,504,897 samples, 0.06%)</title><rect x="10.6838%" y="309" width="0.0593%" height="15" fill="rgb(210,16,53)" fg:x="37413731102" fg:w="207504897"/><text x="10.9338%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (207,504,897 samples, 0.06%)</title><rect x="10.6838%" y="293" width="0.0593%" height="15" fill="rgb(235,124,12)" fg:x="37413731102" fg:w="207504897"/><text x="10.9338%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,206,436,246 samples, 2.06%)</title><rect x="10.9320%" y="325" width="2.0579%" height="15" fill="rgb(224,169,11)" fg:x="38282753329" fg:w="7206436246"/><text x="11.1820%" y="335.50">c..</text></g><g><title>[unknown] (363,851,350 samples, 0.10%)</title><rect x="12.8859%" y="309" width="0.1039%" height="15" fill="rgb(250,166,2)" fg:x="45125338225" fg:w="363851350"/><text x="13.1359%" y="319.50"></text></g><g><title>[unknown] (81,185,263 samples, 0.02%)</title><rect x="12.9666%" y="293" width="0.0232%" height="15" fill="rgb(242,216,29)" fg:x="45408004312" fg:w="81185263"/><text x="13.2166%" y="303.50"></text></g><g><title>matrixmultiply::gemm::pack (8,013,530,549 samples, 2.29%)</title><rect x="10.7633%" y="341" width="2.2883%" height="15" fill="rgb(230,116,27)" fg:x="37692011973" fg:w="8013530549"/><text x="11.0133%" y="351.50">m..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (216,352,947 samples, 0.06%)</title><rect x="12.9898%" y="325" width="0.0618%" height="15" fill="rgb(228,99,48)" fg:x="45489189575" fg:w="216352947"/><text x="13.2398%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (216,352,947 samples, 0.06%)</title><rect x="12.9898%" y="309" width="0.0618%" height="15" fill="rgb(253,11,6)" fg:x="45489189575" fg:w="216352947"/><text x="13.2398%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (208,632,231 samples, 0.06%)</title><rect x="12.9920%" y="293" width="0.0596%" height="15" fill="rgb(247,143,39)" fg:x="45496910291" fg:w="208632231"/><text x="13.2420%" y="303.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (92,947,847,617 samples, 26.54%)</title><rect x="15.5250%" y="213" width="26.5420%" height="15" fill="rgb(236,97,10)" fg:x="54367004018" fg:w="92947847617"/><text x="15.7750%" y="223.50">&lt;matrixmultiply::x86::FusedMulAdd as matri..</text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (92,947,847,617 samples, 26.54%)</title><rect x="15.5250%" y="197" width="26.5420%" height="15" fill="rgb(233,208,19)" fg:x="54367004018" fg:w="92947847617"/><text x="15.7750%" y="207.50">core::core_arch::x86::fma::_mm256_fmadd_pd</text></g><g><title>core::core_arch::x86::avx::_mm256_blend_pd (430,732,527 samples, 0.12%)</title><rect x="42.0670%" y="213" width="0.1230%" height="15" fill="rgb(216,164,2)" fg:x="147314851635" fg:w="430732527"/><text x="42.3170%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_broadcast_sd (87,502,432 samples, 0.02%)</title><rect x="42.1900%" y="213" width="0.0250%" height="15" fill="rgb(220,129,5)" fg:x="147745584162" fg:w="87502432"/><text x="42.4400%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set1_pd (87,502,432 samples, 0.02%)</title><rect x="42.1900%" y="197" width="0.0250%" height="15" fill="rgb(242,17,10)" fg:x="147745584162" fg:w="87502432"/><text x="42.4400%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_pd (87,502,432 samples, 0.02%)</title><rect x="42.1900%" y="181" width="0.0250%" height="15" fill="rgb(242,107,0)" fg:x="147745584162" fg:w="87502432"/><text x="42.4400%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (26,957,829,856 samples, 7.70%)</title><rect x="42.2150%" y="213" width="7.6980%" height="15" fill="rgb(251,28,31)" fg:x="147833086594" fg:w="26957829856"/><text x="42.4650%" y="223.50">core::core_..</text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_pd (1,095,088,802 samples, 0.31%)</title><rect x="49.9130%" y="213" width="0.3127%" height="15" fill="rgb(233,223,10)" fg:x="174790916450" fg:w="1095088802"/><text x="50.1630%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,095,088,802 samples, 0.31%)</title><rect x="49.9130%" y="197" width="0.3127%" height="15" fill="rgb(215,21,27)" fg:x="174790916450" fg:w="1095088802"/><text x="50.1630%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_mul_pd (410,007,396 samples, 0.12%)</title><rect x="50.2257%" y="213" width="0.1171%" height="15" fill="rgb(232,23,21)" fg:x="175886005252" fg:w="410007396"/><text x="50.4757%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_pd (3,188,050,587 samples, 0.91%)</title><rect x="50.3428%" y="213" width="0.9104%" height="15" fill="rgb(244,5,23)" fg:x="176296012648" fg:w="3188050587"/><text x="50.5928%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_shuffle_pd (3,459,064,051 samples, 0.99%)</title><rect x="51.2532%" y="213" width="0.9878%" height="15" fill="rgb(226,81,46)" fg:x="179484063235" fg:w="3459064051"/><text x="51.5032%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (1,120,077,342 samples, 0.32%)</title><rect x="52.2410%" y="213" width="0.3198%" height="15" fill="rgb(247,70,30)" fg:x="182943127286" fg:w="1120077342"/><text x="52.4910%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (1,120,077,342 samples, 0.32%)</title><rect x="52.2410%" y="197" width="0.3198%" height="15" fill="rgb(212,68,19)" fg:x="182943127286" fg:w="1120077342"/><text x="52.4910%" y="207.50"></text></g><g><title>core::ptr::write_unaligned (1,120,077,342 samples, 0.32%)</title><rect x="52.2410%" y="181" width="0.3198%" height="15" fill="rgb(240,187,13)" fg:x="182943127286" fg:w="1120077342"/><text x="52.4910%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,120,077,342 samples, 0.32%)</title><rect x="52.2410%" y="165" width="0.3198%" height="15" fill="rgb(223,113,26)" fg:x="182943127286" fg:w="1120077342"/><text x="52.4910%" y="175.50"></text></g><g><title>[unknown] (498,932,366 samples, 0.14%)</title><rect x="52.4183%" y="149" width="0.1425%" height="15" fill="rgb(206,192,2)" fg:x="183564272262" fg:w="498932366"/><text x="52.6683%" y="159.50"></text></g><g><title>[unknown] (212,062,552 samples, 0.06%)</title><rect x="52.5002%" y="133" width="0.0606%" height="15" fill="rgb(241,108,4)" fg:x="183851142076" fg:w="212062552"/><text x="52.7502%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (444,044,004 samples, 0.13%)</title><rect x="52.5608%" y="213" width="0.1268%" height="15" fill="rgb(247,173,49)" fg:x="184063204628" fg:w="444044004"/><text x="52.8108%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (444,044,004 samples, 0.13%)</title><rect x="52.5608%" y="197" width="0.1268%" height="15" fill="rgb(224,114,35)" fg:x="184063204628" fg:w="444044004"/><text x="52.8108%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (120,023,525 samples, 0.03%)</title><rect x="52.6533%" y="181" width="0.0343%" height="15" fill="rgb(245,159,27)" fg:x="184387225107" fg:w="120023525"/><text x="52.9033%" y="191.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (139,018,377,525 samples, 39.70%)</title><rect x="13.1388%" y="245" width="39.6979%" height="15" fill="rgb(245,172,44)" fg:x="46011030661" fg:w="139018377525"/><text x="13.3888%" y="255.50">matrixmultiply::dgemm_kernel::kernel_target_fma</text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (138,554,397,804 samples, 39.57%)</title><rect x="13.2713%" y="229" width="39.5654%" height="15" fill="rgb(236,23,11)" fg:x="46475010382" fg:w="138554397804"/><text x="13.5213%" y="239.50">matrixmultiply::dgemm_kernel::kernel_x86_avx</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (522,159,554 samples, 0.15%)</title><rect x="52.6876%" y="213" width="0.1491%" height="15" fill="rgb(205,117,38)" fg:x="184507248632" fg:w="522159554"/><text x="52.9376%" y="223.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (139,144,254,414 samples, 39.73%)</title><rect x="13.1038%" y="261" width="39.7338%" height="15" fill="rgb(237,72,25)" fg:x="45888198447" fg:w="139144254414"/><text x="13.3538%" y="271.50">&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kerne..</text></g><g><title>&lt;matrixmultiply::util::RangeChunk as core::iter::traits::iterator::Iterator&gt;::next (43,394,797 samples, 0.01%)</title><rect x="52.8376%" y="261" width="0.0124%" height="15" fill="rgb(244,70,9)" fg:x="185032452861" fg:w="43394797"/><text x="53.0876%" y="271.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (1,682,689,006 samples, 0.48%)</title><rect x="52.8930%" y="197" width="0.4805%" height="15" fill="rgb(217,125,39)" fg:x="185226667839" fg:w="1682689006"/><text x="53.1430%" y="207.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (1,682,689,006 samples, 0.48%)</title><rect x="52.8930%" y="181" width="0.4805%" height="15" fill="rgb(235,36,10)" fg:x="185226667839" fg:w="1682689006"/><text x="53.1430%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (505,788,916 samples, 0.14%)</title><rect x="53.3779%" y="197" width="0.1444%" height="15" fill="rgb(251,123,47)" fg:x="186924735231" fg:w="505788916"/><text x="53.6279%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_pd (64,894,250 samples, 0.02%)</title><rect x="53.5224%" y="197" width="0.0185%" height="15" fill="rgb(221,13,13)" fg:x="187430524147" fg:w="64894250"/><text x="53.7724%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_shuffle_pd (49,308,946 samples, 0.01%)</title><rect x="53.5409%" y="197" width="0.0141%" height="15" fill="rgb(238,131,9)" fg:x="187495418397" fg:w="49308946"/><text x="53.7909%" y="207.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (2,451,921,660 samples, 0.70%)</title><rect x="52.8560%" y="245" width="0.7002%" height="15" fill="rgb(211,50,8)" fg:x="185096929076" fg:w="2451921660"/><text x="53.1060%" y="255.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (2,448,073,917 samples, 0.70%)</title><rect x="52.8571%" y="229" width="0.6991%" height="15" fill="rgb(245,182,24)" fg:x="185100776819" fg:w="2448073917"/><text x="53.1071%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (2,444,604,327 samples, 0.70%)</title><rect x="52.8581%" y="213" width="0.6981%" height="15" fill="rgb(242,14,37)" fg:x="185104246409" fg:w="2444604327"/><text x="53.1081%" y="223.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (2,496,830,005 samples, 0.71%)</title><rect x="52.8529%" y="261" width="0.7130%" height="15" fill="rgb(246,228,12)" fg:x="185086114986" fg:w="2496830005"/><text x="53.1029%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (141,904,756,734 samples, 40.52%)</title><rect x="13.0534%" y="309" width="40.5221%" height="15" fill="rgb(213,55,15)" fg:x="45711841112" fg:w="141904756734"/><text x="13.3034%" y="319.50">matrixmultiply::gemm::gemm_packed</text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (141,898,167,107 samples, 40.52%)</title><rect x="13.0553%" y="293" width="40.5202%" height="15" fill="rgb(209,9,3)" fg:x="45718430739" fg:w="141898167107"/><text x="13.3053%" y="303.50">matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each</text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (141,861,546,228 samples, 40.51%)</title><rect x="13.0657%" y="277" width="40.5098%" height="15" fill="rgb(230,59,30)" fg:x="45755051618" fg:w="141861546228"/><text x="13.3157%" y="287.50">matrixmultiply::gemm::gemm_packed::_{{closure}}</text></g><g><title>core::intrinsics::copy_nonoverlapping (10,759,889,765 samples, 3.07%)</title><rect x="53.6478%" y="293" width="3.0726%" height="15" fill="rgb(209,121,21)" fg:x="187869741665" fg:w="10759889765"/><text x="53.8978%" y="303.50">cor..</text></g><g><title>[unknown] (90,729,852 samples, 0.03%)</title><rect x="56.6945%" y="277" width="0.0259%" height="15" fill="rgb(220,109,13)" fg:x="198538901578" fg:w="90729852"/><text x="56.9445%" y="287.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (205,216,307 samples, 0.06%)</title><rect x="56.7324%" y="261" width="0.0586%" height="15" fill="rgb(232,18,1)" fg:x="198671814409" fg:w="205216307"/><text x="56.9824%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (205,216,307 samples, 0.06%)</title><rect x="56.7324%" y="245" width="0.0586%" height="15" fill="rgb(215,41,42)" fg:x="198671814409" fg:w="205216307"/><text x="56.9824%" y="255.50"></text></g><g><title>matrixmultiply::gemm::pack (11,263,835,938 samples, 3.22%)</title><rect x="53.5755%" y="309" width="3.2165%" height="15" fill="rgb(224,123,36)" fg:x="187616597846" fg:w="11263835938"/><text x="53.8255%" y="319.50">mat..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (250,802,354 samples, 0.07%)</title><rect x="56.7204%" y="293" width="0.0716%" height="15" fill="rgb(240,125,3)" fg:x="198629631430" fg:w="250802354"/><text x="56.9704%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (250,802,354 samples, 0.07%)</title><rect x="56.7204%" y="277" width="0.0716%" height="15" fill="rgb(205,98,50)" fg:x="198629631430" fg:w="250802354"/><text x="56.9704%" y="287.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (161,226,888,102 samples, 46.04%)</title><rect x="10.7532%" y="357" width="46.0397%" height="15" fill="rgb(205,185,37)" fg:x="37656874972" fg:w="161226888102"/><text x="11.0032%" y="367.50">matrixmultiply::gemm::gemm_loop</text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (153,178,220,552 samples, 43.74%)</title><rect x="13.0516%" y="341" width="43.7413%" height="15" fill="rgb(238,207,15)" fg:x="45705542522" fg:w="153178220552"/><text x="13.3016%" y="351.50">matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each</text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (153,175,205,432 samples, 43.74%)</title><rect x="13.0525%" y="325" width="43.7405%" height="15" fill="rgb(213,199,42)" fg:x="45708557642" fg:w="153175205432"/><text x="13.3025%" y="335.50">matrixmultiply::gemm::gemm_loop::_{{closure}}</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (126,738,326 samples, 0.04%)</title><rect x="56.8757%" y="309" width="0.0362%" height="15" fill="rgb(235,201,11)" fg:x="199173694142" fg:w="126738326"/><text x="57.1257%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (240,499,456 samples, 0.07%)</title><rect x="56.9119%" y="309" width="0.0687%" height="15" fill="rgb(207,46,11)" fg:x="199300432468" fg:w="240499456"/><text x="57.1619%" y="319.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (427,265,755 samples, 0.12%)</title><rect x="56.9806%" y="309" width="0.1220%" height="15" fill="rgb(241,35,35)" fg:x="199540931924" fg:w="427265755"/><text x="57.2306%" y="319.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (162,512,787,918 samples, 46.41%)</title><rect x="10.7431%" y="373" width="46.4069%" height="15" fill="rgb(243,32,47)" fg:x="37621235999" fg:w="162512787918"/><text x="10.9931%" y="383.50">nalgebra::base::blas_uninit::gemm_uninit</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (1,250,260,843 samples, 0.36%)</title><rect x="56.7929%" y="357" width="0.3570%" height="15" fill="rgb(247,202,23)" fg:x="198883763074" fg:w="1250260843"/><text x="57.0429%" y="367.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (1,250,260,843 samples, 0.36%)</title><rect x="56.7929%" y="341" width="0.3570%" height="15" fill="rgb(219,102,11)" fg:x="198883763074" fg:w="1250260843"/><text x="57.0429%" y="351.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (1,242,837,489 samples, 0.35%)</title><rect x="56.7951%" y="325" width="0.3549%" height="15" fill="rgb(243,110,44)" fg:x="198891186428" fg:w="1242837489"/><text x="57.0451%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (165,826,238 samples, 0.05%)</title><rect x="57.1026%" y="309" width="0.0474%" height="15" fill="rgb(222,74,54)" fg:x="199968197679" fg:w="165826238"/><text x="57.3526%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (165,826,238 samples, 0.05%)</title><rect x="57.1026%" y="293" width="0.0474%" height="15" fill="rgb(216,99,12)" fg:x="199968197679" fg:w="165826238"/><text x="57.3526%" y="303.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (158,010,405 samples, 0.05%)</title><rect x="57.1048%" y="277" width="0.0451%" height="15" fill="rgb(226,22,26)" fg:x="199976013512" fg:w="158010405"/><text x="57.3548%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (158,010,405 samples, 0.05%)</title><rect x="57.1048%" y="261" width="0.0451%" height="15" fill="rgb(217,163,10)" fg:x="199976013512" fg:w="158010405"/><text x="57.3548%" y="271.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (162,532,134,887 samples, 46.41%)</title><rect x="10.7431%" y="389" width="46.4124%" height="15" fill="rgb(213,25,53)" fg:x="37621235999" fg:w="162532134887"/><text x="10.9931%" y="399.50">nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Ma..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;f64,R,C,S&gt;&gt; for f64&gt;::mul (1,586,277,412 samples, 0.45%)</title><rect x="57.1555%" y="389" width="0.4530%" height="15" fill="rgb(252,105,26)" fg:x="200153370886" fg:w="1586277412"/><text x="57.4055%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (123,861,952 samples, 0.04%)</title><rect x="58.4700%" y="341" width="0.0354%" height="15" fill="rgb(220,39,43)" fg:x="204756767735" fg:w="123861952"/><text x="58.7200%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (123,861,952 samples, 0.04%)</title><rect x="58.4700%" y="325" width="0.0354%" height="15" fill="rgb(229,68,48)" fg:x="204756767735" fg:w="123861952"/><text x="58.7200%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (36,923,862,551 samples, 10.54%)</title><rect x="62.8082%" y="277" width="10.5439%" height="15" fill="rgb(252,8,32)" fg:x="219948524906" fg:w="36923862551"/><text x="63.0582%" y="287.50">&lt;f64 as core::o..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (16,470,624,954 samples, 4.70%)</title><rect x="73.3521%" y="277" width="4.7033%" height="15" fill="rgb(223,20,43)" fg:x="256872387457" fg:w="16470624954"/><text x="73.6021%" y="287.50">core:..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (15,614,215,331 samples, 4.46%)</title><rect x="78.2011%" y="245" width="4.4588%" height="15" fill="rgb(229,81,49)" fg:x="273853271930" fg:w="15614215331"/><text x="78.4511%" y="255.50">&lt;usiz..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (15,614,215,331 samples, 4.46%)</title><rect x="78.2011%" y="229" width="4.4588%" height="15" fill="rgb(236,28,36)" fg:x="273853271930" fg:w="15614215331"/><text x="78.4511%" y="239.50">core:..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (84,588,147,074 samples, 24.15%)</title><rect x="58.5108%" y="341" width="24.1549%" height="15" fill="rgb(249,185,26)" fg:x="204899520018" fg:w="84588147074"/><text x="58.7608%" y="351.50">nalgebra::base::blas::&lt;impl nalgebra::..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (84,588,147,074 samples, 24.15%)</title><rect x="58.5108%" y="325" width="24.1549%" height="15" fill="rgb(249,174,33)" fg:x="204899520018" fg:w="84588147074"/><text x="58.7608%" y="335.50">nalgebra::base::blas::&lt;impl nalgebra::..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (84,588,147,074 samples, 24.15%)</title><rect x="58.5108%" y="309" width="24.1549%" height="15" fill="rgb(233,201,37)" fg:x="204899520018" fg:w="84588147074"/><text x="58.7608%" y="319.50">nalgebra::base::blas_uninit::axcpy_uni..</text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (84,588,147,074 samples, 24.15%)</title><rect x="58.5108%" y="293" width="24.1549%" height="15" fill="rgb(221,78,26)" fg:x="204899520018" fg:w="84588147074"/><text x="58.7608%" y="303.50">nalgebra::base::blas_uninit::array_axc..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16,144,654,681 samples, 4.61%)</title><rect x="78.0554%" y="277" width="4.6102%" height="15" fill="rgb(250,127,30)" fg:x="273343012411" fg:w="16144654681"/><text x="78.3054%" y="287.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16,144,654,681 samples, 4.61%)</title><rect x="78.0554%" y="261" width="4.6102%" height="15" fill="rgb(230,49,44)" fg:x="273343012411" fg:w="16144654681"/><text x="78.3054%" y="271.50">&lt;core..</text></g><g><title>nalgebra::base::matrix_view::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::columns_range_pair_mut (216,253,267 samples, 0.06%)</title><rect x="82.6668%" y="341" width="0.0618%" height="15" fill="rgb(229,67,23)" fg:x="289491781726" fg:w="216253267"/><text x="82.9168%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::DivAssign&gt;::div_assign (1,053,009,139 samples, 0.30%)</title><rect x="82.7286%" y="325" width="0.3007%" height="15" fill="rgb(249,83,47)" fg:x="289708034993" fg:w="1053009139"/><text x="82.9786%" y="335.50"></text></g><g><title>nalgebra::linalg::decomposition::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::cholesky (89,192,489,048 samples, 25.47%)</title><rect x="57.6095%" y="389" width="25.4697%" height="15" fill="rgb(215,43,3)" fg:x="201743354202" fg:w="89192489048"/><text x="57.8595%" y="399.50">nalgebra::linalg::decomposition::&lt;impl na..</text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::new (89,192,489,048 samples, 25.47%)</title><rect x="57.6095%" y="373" width="25.4697%" height="15" fill="rgb(238,154,13)" fg:x="201743354202" fg:w="89192489048"/><text x="57.8595%" y="383.50">nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;..</text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::new_internal (89,192,489,048 samples, 25.47%)</title><rect x="57.6095%" y="357" width="25.4697%" height="15" fill="rgb(219,56,2)" fg:x="201743354202" fg:w="89192489048"/><text x="57.8595%" y="367.50">nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::DivAssign&lt;T&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::div_assign (1,227,808,257 samples, 0.35%)</title><rect x="82.7286%" y="341" width="0.3506%" height="15" fill="rgb(233,0,4)" fg:x="289708034993" fg:w="1227808257"/><text x="82.9786%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (174,799,118 samples, 0.05%)</title><rect x="83.0293%" y="325" width="0.0499%" height="15" fill="rgb(235,30,7)" fg:x="290761044132" fg:w="174799118"/><text x="83.2793%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (174,799,118 samples, 0.05%)</title><rect x="83.0293%" y="309" width="0.0499%" height="15" fill="rgb(250,79,13)" fg:x="290761044132" fg:w="174799118"/><text x="83.2793%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (171,273,719 samples, 0.05%)</title><rect x="83.0303%" y="293" width="0.0489%" height="15" fill="rgb(211,146,34)" fg:x="290764569531" fg:w="171273719"/><text x="83.2803%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (171,273,719 samples, 0.05%)</title><rect x="83.0303%" y="277" width="0.0489%" height="15" fill="rgb(228,22,38)" fg:x="290764569531" fg:w="171273719"/><text x="83.2803%" y="287.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (255,152,545 samples, 0.07%)</title><rect x="83.0792%" y="373" width="0.0729%" height="15" fill="rgb(235,168,5)" fg:x="290935843250" fg:w="255152545"/><text x="83.3292%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (255,152,545 samples, 0.07%)</title><rect x="83.0792%" y="357" width="0.0729%" height="15" fill="rgb(221,155,16)" fg:x="290935843250" fg:w="255152545"/><text x="83.3292%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (255,152,545 samples, 0.07%)</title><rect x="83.0792%" y="341" width="0.0729%" height="15" fill="rgb(215,215,53)" fg:x="290935843250" fg:w="255152545"/><text x="83.3292%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (255,152,545 samples, 0.07%)</title><rect x="83.0792%" y="325" width="0.0729%" height="15" fill="rgb(223,4,10)" fg:x="290935843250" fg:w="255152545"/><text x="83.3292%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (255,152,545 samples, 0.07%)</title><rect x="83.0792%" y="309" width="0.0729%" height="15" fill="rgb(234,103,6)" fg:x="290935843250" fg:w="255152545"/><text x="83.3292%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (255,152,545 samples, 0.07%)</title><rect x="83.0792%" y="293" width="0.0729%" height="15" fill="rgb(227,97,0)" fg:x="290935843250" fg:w="255152545"/><text x="83.3292%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (255,152,545 samples, 0.07%)</title><rect x="83.0792%" y="277" width="0.0729%" height="15" fill="rgb(234,150,53)" fg:x="290935843250" fg:w="255152545"/><text x="83.3292%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (243,907,092 samples, 0.07%)</title><rect x="83.0824%" y="261" width="0.0696%" height="15" fill="rgb(228,201,54)" fg:x="290947088703" fg:w="243907092"/><text x="83.3324%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (243,907,092 samples, 0.07%)</title><rect x="83.0824%" y="245" width="0.0696%" height="15" fill="rgb(222,22,37)" fg:x="290947088703" fg:w="243907092"/><text x="83.3324%" y="255.50"></text></g><g><title>[libc.so.6] (243,907,092 samples, 0.07%)</title><rect x="83.0824%" y="229" width="0.0696%" height="15" fill="rgb(237,53,32)" fg:x="290947088703" fg:w="243907092"/><text x="83.3324%" y="239.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (259,398,735 samples, 0.07%)</title><rect x="83.0792%" y="389" width="0.0741%" height="15" fill="rgb(233,25,53)" fg:x="290935843250" fg:w="259398735"/><text x="83.3292%" y="399.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (664,004,431 samples, 0.19%)</title><rect x="83.1760%" y="373" width="0.1896%" height="15" fill="rgb(210,40,34)" fg:x="291274845914" fg:w="664004431"/><text x="83.4260%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (664,004,431 samples, 0.19%)</title><rect x="83.1760%" y="357" width="0.1896%" height="15" fill="rgb(241,220,44)" fg:x="291274845914" fg:w="664004431"/><text x="83.4260%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (664,004,431 samples, 0.19%)</title><rect x="83.1760%" y="341" width="0.1896%" height="15" fill="rgb(235,28,35)" fg:x="291274845914" fg:w="664004431"/><text x="83.4260%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (664,004,431 samples, 0.19%)</title><rect x="83.1760%" y="325" width="0.1896%" height="15" fill="rgb(210,56,17)" fg:x="291274845914" fg:w="664004431"/><text x="83.4260%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (664,004,431 samples, 0.19%)</title><rect x="83.1760%" y="309" width="0.1896%" height="15" fill="rgb(224,130,29)" fg:x="291274845914" fg:w="664004431"/><text x="83.4260%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (664,004,431 samples, 0.19%)</title><rect x="83.1760%" y="293" width="0.1896%" height="15" fill="rgb(235,212,8)" fg:x="291274845914" fg:w="664004431"/><text x="83.4260%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (664,004,431 samples, 0.19%)</title><rect x="83.1760%" y="277" width="0.1896%" height="15" fill="rgb(223,33,50)" fg:x="291274845914" fg:w="664004431"/><text x="83.4260%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (664,004,431 samples, 0.19%)</title><rect x="83.1760%" y="261" width="0.1896%" height="15" fill="rgb(219,149,13)" fg:x="291274845914" fg:w="664004431"/><text x="83.4260%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (659,996,898 samples, 0.19%)</title><rect x="83.1771%" y="245" width="0.1885%" height="15" fill="rgb(250,156,29)" fg:x="291278853447" fg:w="659996898"/><text x="83.4271%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (659,996,898 samples, 0.19%)</title><rect x="83.1771%" y="229" width="0.1885%" height="15" fill="rgb(216,193,19)" fg:x="291278853447" fg:w="659996898"/><text x="83.4271%" y="239.50"></text></g><g><title>[libc.so.6] (659,996,898 samples, 0.19%)</title><rect x="83.1771%" y="213" width="0.1885%" height="15" fill="rgb(216,135,14)" fg:x="291278853447" fg:w="659996898"/><text x="83.4271%" y="223.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (152,455,554 samples, 0.04%)</title><rect x="83.3656%" y="373" width="0.0435%" height="15" fill="rgb(241,47,5)" fg:x="291938850345" fg:w="152455554"/><text x="83.6156%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (148,577,732 samples, 0.04%)</title><rect x="83.3667%" y="357" width="0.0424%" height="15" fill="rgb(233,42,35)" fg:x="291942728167" fg:w="148577732"/><text x="83.6167%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (148,577,732 samples, 0.04%)</title><rect x="83.3667%" y="341" width="0.0424%" height="15" fill="rgb(231,13,6)" fg:x="291942728167" fg:w="148577732"/><text x="83.6167%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (148,577,732 samples, 0.04%)</title><rect x="83.3667%" y="325" width="0.0424%" height="15" fill="rgb(207,181,40)" fg:x="291942728167" fg:w="148577732"/><text x="83.6167%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (148,577,732 samples, 0.04%)</title><rect x="83.3667%" y="309" width="0.0424%" height="15" fill="rgb(254,173,49)" fg:x="291942728167" fg:w="148577732"/><text x="83.6167%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (148,577,732 samples, 0.04%)</title><rect x="83.3667%" y="293" width="0.0424%" height="15" fill="rgb(221,1,38)" fg:x="291942728167" fg:w="148577732"/><text x="83.6167%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (148,577,732 samples, 0.04%)</title><rect x="83.3667%" y="277" width="0.0424%" height="15" fill="rgb(206,124,46)" fg:x="291942728167" fg:w="148577732"/><text x="83.6167%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (148,577,732 samples, 0.04%)</title><rect x="83.3667%" y="261" width="0.0424%" height="15" fill="rgb(249,21,11)" fg:x="291942728167" fg:w="148577732"/><text x="83.6167%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (137,678,102 samples, 0.04%)</title><rect x="83.3698%" y="245" width="0.0393%" height="15" fill="rgb(222,201,40)" fg:x="291953627797" fg:w="137678102"/><text x="83.6198%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (137,678,102 samples, 0.04%)</title><rect x="83.3698%" y="229" width="0.0393%" height="15" fill="rgb(235,61,29)" fg:x="291953627797" fg:w="137678102"/><text x="83.6198%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (137,678,102 samples, 0.04%)</title><rect x="83.3698%" y="213" width="0.0393%" height="15" fill="rgb(219,207,3)" fg:x="291953627797" fg:w="137678102"/><text x="83.6198%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (137,678,102 samples, 0.04%)</title><rect x="83.3698%" y="197" width="0.0393%" height="15" fill="rgb(222,56,46)" fg:x="291953627797" fg:w="137678102"/><text x="83.6198%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (137,678,102 samples, 0.04%)</title><rect x="83.3698%" y="181" width="0.0393%" height="15" fill="rgb(239,76,54)" fg:x="291953627797" fg:w="137678102"/><text x="83.6198%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (137,678,102 samples, 0.04%)</title><rect x="83.3698%" y="165" width="0.0393%" height="15" fill="rgb(231,124,27)" fg:x="291953627797" fg:w="137678102"/><text x="83.6198%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (78,126,489 samples, 0.02%)</title><rect x="83.3868%" y="149" width="0.0223%" height="15" fill="rgb(249,195,6)" fg:x="292013179410" fg:w="78126489"/><text x="83.6368%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (78,126,489 samples, 0.02%)</title><rect x="83.3868%" y="133" width="0.0223%" height="15" fill="rgb(237,174,47)" fg:x="292013179410" fg:w="78126489"/><text x="83.6368%" y="143.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (70,063,623 samples, 0.02%)</title><rect x="83.3891%" y="117" width="0.0200%" height="15" fill="rgb(206,201,31)" fg:x="292021242276" fg:w="70063623"/><text x="83.6391%" y="127.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (498,564,027 samples, 0.14%)</title><rect x="83.4829%" y="181" width="0.1424%" height="15" fill="rgb(231,57,52)" fg:x="292349472721" fg:w="498564027"/><text x="83.7329%" y="191.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (498,564,027 samples, 0.14%)</title><rect x="83.4829%" y="165" width="0.1424%" height="15" fill="rgb(248,177,22)" fg:x="292349472721" fg:w="498564027"/><text x="83.7329%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (72,005,847 samples, 0.02%)</title><rect x="83.6264%" y="181" width="0.0206%" height="15" fill="rgb(215,211,37)" fg:x="292852218571" fg:w="72005847"/><text x="83.8764%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_pd (80,437,565 samples, 0.02%)</title><rect x="83.6470%" y="181" width="0.0230%" height="15" fill="rgb(241,128,51)" fg:x="292924224418" fg:w="80437565"/><text x="83.8970%" y="191.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (1,027,590,921 samples, 0.29%)</title><rect x="83.4386%" y="229" width="0.2934%" height="15" fill="rgb(227,165,31)" fg:x="292194377325" fg:w="1027590921"/><text x="83.6886%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (1,010,973,705 samples, 0.29%)</title><rect x="83.4433%" y="213" width="0.2887%" height="15" fill="rgb(228,167,24)" fg:x="292210994541" fg:w="1010973705"/><text x="83.6933%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (950,622,092 samples, 0.27%)</title><rect x="83.4606%" y="197" width="0.2715%" height="15" fill="rgb(228,143,12)" fg:x="292271346154" fg:w="950622092"/><text x="83.7106%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (160,772,370 samples, 0.05%)</title><rect x="83.6861%" y="181" width="0.0459%" height="15" fill="rgb(249,149,8)" fg:x="293061195876" fg:w="160772370"/><text x="83.9361%" y="191.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (71,128,075 samples, 0.02%)</title><rect x="83.7448%" y="165" width="0.0203%" height="15" fill="rgb(243,35,44)" fg:x="293266829781" fg:w="71128075"/><text x="83.9948%" y="175.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (71,128,075 samples, 0.02%)</title><rect x="83.7448%" y="149" width="0.0203%" height="15" fill="rgb(246,89,9)" fg:x="293266829781" fg:w="71128075"/><text x="83.9948%" y="159.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (139,570,682 samples, 0.04%)</title><rect x="83.7400%" y="213" width="0.0399%" height="15" fill="rgb(233,213,13)" fg:x="293250077690" fg:w="139570682"/><text x="83.9900%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (139,570,682 samples, 0.04%)</title><rect x="83.7400%" y="197" width="0.0399%" height="15" fill="rgb(233,141,41)" fg:x="293250077690" fg:w="139570682"/><text x="83.9900%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (139,570,682 samples, 0.04%)</title><rect x="83.7400%" y="181" width="0.0399%" height="15" fill="rgb(239,167,4)" fg:x="293250077690" fg:w="139570682"/><text x="83.9900%" y="191.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (1,270,059,715 samples, 0.36%)</title><rect x="83.4229%" y="277" width="0.3627%" height="15" fill="rgb(209,217,16)" fg:x="292139440275" fg:w="1270059715"/><text x="83.6729%" y="287.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1,254,163,738 samples, 0.36%)</title><rect x="83.4274%" y="261" width="0.3581%" height="15" fill="rgb(219,88,35)" fg:x="292155336252" fg:w="1254163738"/><text x="83.6774%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (1,241,597,078 samples, 0.35%)</title><rect x="83.4310%" y="245" width="0.3545%" height="15" fill="rgb(220,193,23)" fg:x="292167902912" fg:w="1241597078"/><text x="83.6810%" y="255.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (171,815,849 samples, 0.05%)</title><rect x="83.7365%" y="229" width="0.0491%" height="15" fill="rgb(230,90,52)" fg:x="293237684141" fg:w="171815849"/><text x="83.9865%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (193,482,279 samples, 0.06%)</title><rect x="83.7946%" y="261" width="0.0553%" height="15" fill="rgb(252,106,19)" fg:x="293441246183" fg:w="193482279"/><text x="84.0446%" y="271.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (1,551,735,266 samples, 0.44%)</title><rect x="83.4091%" y="373" width="0.4431%" height="15" fill="rgb(206,74,20)" fg:x="292091305899" fg:w="1551735266"/><text x="83.6591%" y="383.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (1,551,735,266 samples, 0.44%)</title><rect x="83.4091%" y="357" width="0.4431%" height="15" fill="rgb(230,138,44)" fg:x="292091305899" fg:w="1551735266"/><text x="83.6591%" y="367.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (1,548,248,477 samples, 0.44%)</title><rect x="83.4101%" y="341" width="0.4421%" height="15" fill="rgb(235,182,43)" fg:x="292094792688" fg:w="1548248477"/><text x="83.6601%" y="351.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (1,544,313,508 samples, 0.44%)</title><rect x="83.4113%" y="325" width="0.4410%" height="15" fill="rgb(242,16,51)" fg:x="292098727657" fg:w="1544313508"/><text x="83.6613%" y="335.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1,508,140,143 samples, 0.43%)</title><rect x="83.4216%" y="309" width="0.4307%" height="15" fill="rgb(248,9,4)" fg:x="292134901022" fg:w="1508140143"/><text x="83.6716%" y="319.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (1,508,140,143 samples, 0.43%)</title><rect x="83.4216%" y="293" width="0.4307%" height="15" fill="rgb(210,31,22)" fg:x="292134901022" fg:w="1508140143"/><text x="83.6716%" y="303.50"></text></g><g><title>matrixmultiply::gemm::pack (233,541,175 samples, 0.07%)</title><rect x="83.7856%" y="277" width="0.0667%" height="15" fill="rgb(239,54,39)" fg:x="293409499990" fg:w="233541175"/><text x="84.0356%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,598,211,542 samples, 1.88%)</title><rect x="83.8534%" y="277" width="1.8842%" height="15" fill="rgb(230,99,41)" fg:x="293647057990" fg:w="6598211542"/><text x="84.1034%" y="287.50">&lt;..</text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (6,594,350,046 samples, 1.88%)</title><rect x="83.8545%" y="261" width="1.8831%" height="15" fill="rgb(253,106,12)" fg:x="293650919486" fg:w="6594350046"/><text x="84.1045%" y="271.50">n..</text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (6,537,771,143 samples, 1.87%)</title><rect x="83.8707%" y="245" width="1.8669%" height="15" fill="rgb(213,46,41)" fg:x="293707498389" fg:w="6537771143"/><text x="84.1207%" y="255.50">n..</text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (6,537,771,143 samples, 1.87%)</title><rect x="83.8707%" y="229" width="1.8669%" height="15" fill="rgb(215,133,35)" fg:x="293707498389" fg:w="6537771143"/><text x="84.1207%" y="239.50">r..</text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (6,537,771,143 samples, 1.87%)</title><rect x="83.8707%" y="213" width="1.8669%" height="15" fill="rgb(213,28,5)" fg:x="293707498389" fg:w="6537771143"/><text x="84.1207%" y="223.50">s..</text></g><g><title>tanhf32x (6,512,486,228 samples, 1.86%)</title><rect x="83.8779%" y="197" width="1.8597%" height="15" fill="rgb(215,77,49)" fg:x="293732783304" fg:w="6512486228"/><text x="84.1279%" y="207.50">t..</text></g><g><title>[libm.so.6] (4,767,714,260 samples, 1.36%)</title><rect x="84.3761%" y="181" width="1.3615%" height="15" fill="rgb(248,100,22)" fg:x="295477555272" fg:w="4767714260"/><text x="84.6261%" y="191.50"></text></g><g><title>rkl::core::layers::Dense::forward (8,978,490,031 samples, 2.56%)</title><rect x="83.1748%" y="389" width="2.5639%" height="15" fill="rgb(208,67,9)" fg:x="291270739901" fg:w="8978490031"/><text x="83.4248%" y="399.50">rk..</text></g><g><title>rkl::core::activations::Activation::forward (6,606,188,767 samples, 1.89%)</title><rect x="83.8522%" y="373" width="1.8865%" height="15" fill="rgb(219,133,21)" fg:x="293643041165" fg:w="6606188767"/><text x="84.1022%" y="383.50">r..</text></g><g><title>rkl::core::activations::tanh_forward (6,602,171,942 samples, 1.89%)</title><rect x="83.8534%" y="357" width="1.8853%" height="15" fill="rgb(246,46,29)" fg:x="293647057990" fg:w="6602171942"/><text x="84.1034%" y="367.50">r..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (6,602,171,942 samples, 1.89%)</title><rect x="83.8534%" y="341" width="1.8853%" height="15" fill="rgb(246,185,52)" fg:x="293647057990" fg:w="6602171942"/><text x="84.1034%" y="351.50">n..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (6,602,171,942 samples, 1.89%)</title><rect x="83.8534%" y="325" width="1.8853%" height="15" fill="rgb(252,136,11)" fg:x="293647057990" fg:w="6602171942"/><text x="84.1034%" y="335.50">n..</text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (6,602,171,942 samples, 1.89%)</title><rect x="83.8534%" y="309" width="1.8853%" height="15" fill="rgb(219,138,53)" fg:x="293647057990" fg:w="6602171942"/><text x="84.1034%" y="319.50">n..</text></g><g><title>ndarray::iterators::to_vec_mapped (6,602,171,942 samples, 1.89%)</title><rect x="83.8534%" y="293" width="1.8853%" height="15" fill="rgb(211,51,23)" fg:x="293647057990" fg:w="6602171942"/><text x="84.1034%" y="303.50">n..</text></g><g><title>rkl::core::losses::criteria (71,773,482 samples, 0.02%)</title><rect x="85.7387%" y="389" width="0.0205%" height="15" fill="rgb(247,221,28)" fg:x="300249229932" fg:w="71773482"/><text x="85.9887%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt; (35,621,503 samples, 0.01%)</title><rect x="85.7695%" y="373" width="0.0102%" height="15" fill="rgb(251,222,45)" fg:x="300357071845" fg:w="35621503"/><text x="86.0195%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;&gt; (35,621,503 samples, 0.01%)</title><rect x="85.7695%" y="357" width="0.0102%" height="15" fill="rgb(217,162,53)" fg:x="300357071845" fg:w="35621503"/><text x="86.0195%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (35,621,503 samples, 0.01%)</title><rect x="85.7695%" y="341" width="0.0102%" height="15" fill="rgb(229,93,14)" fg:x="300357071845" fg:w="35621503"/><text x="86.0195%" y="351.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (1,363,032,645 samples, 0.39%)</title><rect x="85.7797%" y="373" width="0.3892%" height="15" fill="rgb(209,67,49)" fg:x="300392693348" fg:w="1363032645"/><text x="86.0297%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (1,363,032,645 samples, 0.39%)</title><rect x="85.7797%" y="357" width="0.3892%" height="15" fill="rgb(213,87,29)" fg:x="300392693348" fg:w="1363032645"/><text x="86.0297%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (1,363,032,645 samples, 0.39%)</title><rect x="85.7797%" y="341" width="0.3892%" height="15" fill="rgb(205,151,52)" fg:x="300392693348" fg:w="1363032645"/><text x="86.0297%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,363,032,645 samples, 0.39%)</title><rect x="85.7797%" y="325" width="0.3892%" height="15" fill="rgb(253,215,39)" fg:x="300392693348" fg:w="1363032645"/><text x="86.0297%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,363,032,645 samples, 0.39%)</title><rect x="85.7797%" y="309" width="0.3892%" height="15" fill="rgb(221,220,41)" fg:x="300392693348" fg:w="1363032645"/><text x="86.0297%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,363,032,645 samples, 0.39%)</title><rect x="85.7797%" y="293" width="0.3892%" height="15" fill="rgb(218,133,21)" fg:x="300392693348" fg:w="1363032645"/><text x="86.0297%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1,363,032,645 samples, 0.39%)</title><rect x="85.7797%" y="277" width="0.3892%" height="15" fill="rgb(221,193,43)" fg:x="300392693348" fg:w="1363032645"/><text x="86.0297%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,363,032,645 samples, 0.39%)</title><rect x="85.7797%" y="261" width="0.3892%" height="15" fill="rgb(240,128,52)" fg:x="300392693348" fg:w="1363032645"/><text x="86.0297%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,339,038,852 samples, 0.38%)</title><rect x="85.7865%" y="245" width="0.3824%" height="15" fill="rgb(253,114,12)" fg:x="300416687141" fg:w="1339038852"/><text x="86.0365%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,339,038,852 samples, 0.38%)</title><rect x="85.7865%" y="229" width="0.3824%" height="15" fill="rgb(215,223,47)" fg:x="300416687141" fg:w="1339038852"/><text x="86.0365%" y="239.50"></text></g><g><title>[libc.so.6] (1,336,281,550 samples, 0.38%)</title><rect x="85.7873%" y="213" width="0.3816%" height="15" fill="rgb(248,225,23)" fg:x="300419444443" fg:w="1336281550"/><text x="86.0373%" y="223.50"></text></g><g><title>[unknown] (82,793,210 samples, 0.02%)</title><rect x="86.1453%" y="197" width="0.0236%" height="15" fill="rgb(250,108,0)" fg:x="301672932783" fg:w="82793210"/><text x="86.3953%" y="207.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign (13,705,367,155 samples, 3.91%)</title><rect x="86.1755%" y="373" width="3.9137%" height="15" fill="rgb(228,208,7)" fg:x="301778895790" fg:w="13705367155"/><text x="86.4255%" y="383.50">ndar..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (13,705,367,155 samples, 3.91%)</title><rect x="86.1755%" y="357" width="3.9137%" height="15" fill="rgb(244,45,10)" fg:x="301778895790" fg:w="13705367155"/><text x="86.4255%" y="367.50">ndar..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (13,698,964,046 samples, 3.91%)</title><rect x="86.1773%" y="341" width="3.9119%" height="15" fill="rgb(207,125,25)" fg:x="301785298899" fg:w="13698964046"/><text x="86.4273%" y="351.50">ndar..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (13,696,217,835 samples, 3.91%)</title><rect x="86.1781%" y="325" width="3.9111%" height="15" fill="rgb(210,195,18)" fg:x="301788045110" fg:w="13696217835"/><text x="86.4281%" y="335.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (13,696,217,835 samples, 3.91%)</title><rect x="86.1781%" y="309" width="3.9111%" height="15" fill="rgb(249,80,12)" fg:x="301788045110" fg:w="13696217835"/><text x="86.4281%" y="319.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (13,696,217,835 samples, 3.91%)</title><rect x="86.1781%" y="293" width="3.9111%" height="15" fill="rgb(221,65,9)" fg:x="301788045110" fg:w="13696217835"/><text x="86.4281%" y="303.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (13,696,217,835 samples, 3.91%)</title><rect x="86.1781%" y="277" width="3.9111%" height="15" fill="rgb(235,49,36)" fg:x="301788045110" fg:w="13696217835"/><text x="86.4281%" y="287.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (13,696,217,835 samples, 3.91%)</title><rect x="86.1781%" y="261" width="3.9111%" height="15" fill="rgb(225,32,20)" fg:x="301788045110" fg:w="13696217835"/><text x="86.4281%" y="271.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (13,688,499,617 samples, 3.91%)</title><rect x="86.1803%" y="245" width="3.9089%" height="15" fill="rgb(215,141,46)" fg:x="301795763328" fg:w="13688499617"/><text x="86.4303%" y="255.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (13,632,817,971 samples, 3.89%)</title><rect x="86.1962%" y="229" width="3.8930%" height="15" fill="rgb(250,160,47)" fg:x="301851444974" fg:w="13632817971"/><text x="86.4462%" y="239.50">ndar..</text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (13,632,817,971 samples, 3.89%)</title><rect x="86.1962%" y="213" width="3.8930%" height="15" fill="rgb(216,222,40)" fg:x="301851444974" fg:w="13632817971"/><text x="86.4462%" y="223.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (13,632,817,971 samples, 3.89%)</title><rect x="86.1962%" y="197" width="3.8930%" height="15" fill="rgb(234,217,39)" fg:x="301851444974" fg:w="13632817971"/><text x="86.4462%" y="207.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (13,632,817,971 samples, 3.89%)</title><rect x="86.1962%" y="181" width="3.8930%" height="15" fill="rgb(207,178,40)" fg:x="301851444974" fg:w="13632817971"/><text x="86.4462%" y="191.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (13,632,817,971 samples, 3.89%)</title><rect x="86.1962%" y="165" width="3.8930%" height="15" fill="rgb(221,136,13)" fg:x="301851444974" fg:w="13632817971"/><text x="86.4462%" y="175.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (13,632,817,971 samples, 3.89%)</title><rect x="86.1962%" y="149" width="3.8930%" height="15" fill="rgb(249,199,10)" fg:x="301851444974" fg:w="13632817971"/><text x="86.4462%" y="159.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (13,632,817,971 samples, 3.89%)</title><rect x="86.1962%" y="133" width="3.8930%" height="15" fill="rgb(249,222,13)" fg:x="301851444974" fg:w="13632817971"/><text x="86.4462%" y="143.50">ndar..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (11,850,125,400 samples, 3.38%)</title><rect x="86.7053%" y="117" width="3.3839%" height="15" fill="rgb(244,185,38)" fg:x="303634137545" fg:w="11850125400"/><text x="86.9553%" y="127.50">nda..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (11,850,125,400 samples, 3.38%)</title><rect x="86.7053%" y="101" width="3.3839%" height="15" fill="rgb(236,202,9)" fg:x="303634137545" fg:w="11850125400"/><text x="86.9553%" y="111.50">cor..</text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign::_{{closure}} (8,328,898,378 samples, 2.38%)</title><rect x="87.7108%" y="85" width="2.3784%" height="15" fill="rgb(250,229,37)" fg:x="307155364567" fg:w="8328898378"/><text x="87.9608%" y="95.50">nd..</text></g><g><title>core::clone::Clone::clone_from (8,328,898,378 samples, 2.38%)</title><rect x="87.7108%" y="69" width="2.3784%" height="15" fill="rgb(206,174,23)" fg:x="307155364567" fg:w="8328898378"/><text x="87.9608%" y="79.50">co..</text></g><g><title>[unknown] (836,383,156 samples, 0.24%)</title><rect x="89.8504%" y="53" width="0.2388%" height="15" fill="rgb(211,33,43)" fg:x="314647879789" fg:w="836383156"/><text x="90.1004%" y="63.50"></text></g><g><title>[unknown] (334,901,557 samples, 0.10%)</title><rect x="89.9936%" y="37" width="0.0956%" height="15" fill="rgb(245,58,50)" fg:x="315149361388" fg:w="334901557"/><text x="90.2436%" y="47.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (61,761,911 samples, 0.02%)</title><rect x="90.0962%" y="373" width="0.0176%" height="15" fill="rgb(244,68,36)" fg:x="315508878354" fg:w="61761911"/><text x="90.3462%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (61,761,911 samples, 0.02%)</title><rect x="90.0962%" y="357" width="0.0176%" height="15" fill="rgb(232,229,15)" fg:x="315508878354" fg:w="61761911"/><text x="90.3462%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (61,761,911 samples, 0.02%)</title><rect x="90.0962%" y="341" width="0.0176%" height="15" fill="rgb(254,30,23)" fg:x="315508878354" fg:w="61761911"/><text x="90.3462%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (61,761,911 samples, 0.02%)</title><rect x="90.0962%" y="325" width="0.0176%" height="15" fill="rgb(235,160,14)" fg:x="315508878354" fg:w="61761911"/><text x="90.3462%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (61,761,911 samples, 0.02%)</title><rect x="90.0962%" y="309" width="0.0176%" height="15" fill="rgb(212,155,44)" fg:x="315508878354" fg:w="61761911"/><text x="90.3462%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (61,761,911 samples, 0.02%)</title><rect x="90.0962%" y="293" width="0.0176%" height="15" fill="rgb(226,2,50)" fg:x="315508878354" fg:w="61761911"/><text x="90.3462%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (61,761,911 samples, 0.02%)</title><rect x="90.0962%" y="277" width="0.0176%" height="15" fill="rgb(234,177,6)" fg:x="315508878354" fg:w="61761911"/><text x="90.3462%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (61,761,911 samples, 0.02%)</title><rect x="90.0962%" y="261" width="0.0176%" height="15" fill="rgb(217,24,9)" fg:x="315508878354" fg:w="61761911"/><text x="90.3462%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (57,991,252 samples, 0.02%)</title><rect x="90.0973%" y="245" width="0.0166%" height="15" fill="rgb(220,13,46)" fg:x="315512649013" fg:w="57991252"/><text x="90.3473%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (57,991,252 samples, 0.02%)</title><rect x="90.0973%" y="229" width="0.0166%" height="15" fill="rgb(239,221,27)" fg:x="315512649013" fg:w="57991252"/><text x="90.3473%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (57,991,252 samples, 0.02%)</title><rect x="90.0973%" y="213" width="0.0166%" height="15" fill="rgb(222,198,25)" fg:x="315512649013" fg:w="57991252"/><text x="90.3473%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (57,991,252 samples, 0.02%)</title><rect x="90.0973%" y="197" width="0.0166%" height="15" fill="rgb(211,99,13)" fg:x="315512649013" fg:w="57991252"/><text x="90.3473%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (57,991,252 samples, 0.02%)</title><rect x="90.0973%" y="181" width="0.0166%" height="15" fill="rgb(232,111,31)" fg:x="315512649013" fg:w="57991252"/><text x="90.3473%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (57,991,252 samples, 0.02%)</title><rect x="90.0973%" y="165" width="0.0166%" height="15" fill="rgb(245,82,37)" fg:x="315512649013" fg:w="57991252"/><text x="90.3473%" y="175.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (171,799,340 samples, 0.05%)</title><rect x="90.1410%" y="181" width="0.0491%" height="15" fill="rgb(227,149,46)" fg:x="315665571501" fg:w="171799340"/><text x="90.3910%" y="191.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (171,799,340 samples, 0.05%)</title><rect x="90.1410%" y="165" width="0.0491%" height="15" fill="rgb(218,36,50)" fg:x="315665571501" fg:w="171799340"/><text x="90.3910%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (37,220,503 samples, 0.01%)</title><rect x="90.2076%" y="181" width="0.0106%" height="15" fill="rgb(226,80,48)" fg:x="315898964914" fg:w="37220503"/><text x="90.4576%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (37,220,503 samples, 0.01%)</title><rect x="90.2076%" y="165" width="0.0106%" height="15" fill="rgb(238,224,15)" fg:x="315898964914" fg:w="37220503"/><text x="90.4576%" y="175.50"></text></g><g><title>core::ptr::write_unaligned (37,220,503 samples, 0.01%)</title><rect x="90.2076%" y="149" width="0.0106%" height="15" fill="rgb(241,136,10)" fg:x="315898964914" fg:w="37220503"/><text x="90.4576%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37,220,503 samples, 0.01%)</title><rect x="90.2076%" y="133" width="0.0106%" height="15" fill="rgb(208,32,45)" fg:x="315898964914" fg:w="37220503"/><text x="90.4576%" y="143.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (364,933,371 samples, 0.10%)</title><rect x="90.1262%" y="229" width="0.1042%" height="15" fill="rgb(207,135,9)" fg:x="315613757188" fg:w="364933371"/><text x="90.3762%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (360,841,232 samples, 0.10%)</title><rect x="90.1273%" y="213" width="0.1030%" height="15" fill="rgb(206,86,44)" fg:x="315617849327" fg:w="360841232"/><text x="90.3773%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (353,777,117 samples, 0.10%)</title><rect x="90.1294%" y="197" width="0.1010%" height="15" fill="rgb(245,177,15)" fg:x="315624913442" fg:w="353777117"/><text x="90.3794%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (38,429,750 samples, 0.01%)</title><rect x="90.2194%" y="181" width="0.0110%" height="15" fill="rgb(206,64,50)" fg:x="315940260809" fg:w="38429750"/><text x="90.4694%" y="191.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (45,512,219 samples, 0.01%)</title><rect x="90.2304%" y="213" width="0.0130%" height="15" fill="rgb(234,36,40)" fg:x="315978690559" fg:w="45512219"/><text x="90.4804%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (45,512,219 samples, 0.01%)</title><rect x="90.2304%" y="197" width="0.0130%" height="15" fill="rgb(213,64,8)" fg:x="315978690559" fg:w="45512219"/><text x="90.4804%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (41,673,242 samples, 0.01%)</title><rect x="90.2315%" y="181" width="0.0119%" height="15" fill="rgb(210,75,36)" fg:x="315982529536" fg:w="41673242"/><text x="90.4815%" y="191.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (438,855,845 samples, 0.13%)</title><rect x="90.1204%" y="277" width="0.1253%" height="15" fill="rgb(229,88,21)" fg:x="315593637092" fg:w="438855845"/><text x="90.3704%" y="287.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (430,645,576 samples, 0.12%)</title><rect x="90.1228%" y="261" width="0.1230%" height="15" fill="rgb(252,204,47)" fg:x="315601847361" fg:w="430645576"/><text x="90.3728%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (422,685,530 samples, 0.12%)</title><rect x="90.1250%" y="245" width="0.1207%" height="15" fill="rgb(208,77,27)" fg:x="315609807407" fg:w="422685530"/><text x="90.3750%" y="255.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (53,802,378 samples, 0.02%)</title><rect x="90.2304%" y="229" width="0.0154%" height="15" fill="rgb(221,76,26)" fg:x="315978690559" fg:w="53802378"/><text x="90.4804%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87,292,486 samples, 0.02%)</title><rect x="90.2489%" y="261" width="0.0249%" height="15" fill="rgb(225,139,18)" fg:x="316043436005" fg:w="87292486"/><text x="90.4989%" y="271.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (559,837,931 samples, 0.16%)</title><rect x="90.1149%" y="373" width="0.1599%" height="15" fill="rgb(230,137,11)" fg:x="315574454906" fg:w="559837931"/><text x="90.3649%" y="383.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (559,837,931 samples, 0.16%)</title><rect x="90.1149%" y="357" width="0.1599%" height="15" fill="rgb(212,28,1)" fg:x="315574454906" fg:w="559837931"/><text x="90.3649%" y="367.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (555,740,694 samples, 0.16%)</title><rect x="90.1161%" y="341" width="0.1587%" height="15" fill="rgb(248,164,17)" fg:x="315578552143" fg:w="555740694"/><text x="90.3661%" y="351.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (551,560,669 samples, 0.16%)</title><rect x="90.1173%" y="325" width="0.1575%" height="15" fill="rgb(222,171,42)" fg:x="315582732168" fg:w="551560669"/><text x="90.3673%" y="335.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (540,655,745 samples, 0.15%)</title><rect x="90.1204%" y="309" width="0.1544%" height="15" fill="rgb(243,84,45)" fg:x="315593637092" fg:w="540655745"/><text x="90.3704%" y="319.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (540,655,745 samples, 0.15%)</title><rect x="90.1204%" y="293" width="0.1544%" height="15" fill="rgb(252,49,23)" fg:x="315593637092" fg:w="540655745"/><text x="90.3704%" y="303.50"></text></g><g><title>matrixmultiply::gemm::pack (101,799,900 samples, 0.03%)</title><rect x="90.2457%" y="277" width="0.0291%" height="15" fill="rgb(215,19,7)" fg:x="316032492937" fg:w="101799900"/><text x="90.4957%" y="287.50"></text></g><g><title>ndarray::stacking::concatenate (7,213,170,991 samples, 2.06%)</title><rect x="90.2748%" y="373" width="2.0598%" height="15" fill="rgb(238,81,41)" fg:x="316134292837" fg:w="7213170991"/><text x="90.5248%" y="383.50">n..</text></g><g><title>ndarray::impl_owned_array::&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (7,197,537,633 samples, 2.06%)</title><rect x="90.2793%" y="357" width="2.0553%" height="15" fill="rgb(210,199,37)" fg:x="316149926195" fg:w="7197537633"/><text x="90.5293%" y="367.50">n..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (7,187,225,308 samples, 2.05%)</title><rect x="90.2822%" y="341" width="2.0524%" height="15" fill="rgb(244,192,49)" fg:x="316160238520" fg:w="7187225308"/><text x="90.5322%" y="351.50">n..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (7,187,225,308 samples, 2.05%)</title><rect x="90.2822%" y="325" width="2.0524%" height="15" fill="rgb(226,211,11)" fg:x="316160238520" fg:w="7187225308"/><text x="90.5322%" y="335.50">n..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (7,180,114,319 samples, 2.05%)</title><rect x="90.2843%" y="309" width="2.0503%" height="15" fill="rgb(236,162,54)" fg:x="316167349509" fg:w="7180114319"/><text x="90.5343%" y="319.50">n..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (7,180,114,319 samples, 2.05%)</title><rect x="90.2843%" y="293" width="2.0503%" height="15" fill="rgb(220,229,9)" fg:x="316167349509" fg:w="7180114319"/><text x="90.5343%" y="303.50">n..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (7,173,388,468 samples, 2.05%)</title><rect x="90.2862%" y="277" width="2.0484%" height="15" fill="rgb(250,87,22)" fg:x="316174075360" fg:w="7173388468"/><text x="90.5362%" y="287.50">n..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (5,566,591,224 samples, 1.59%)</title><rect x="90.7450%" y="261" width="1.5896%" height="15" fill="rgb(239,43,17)" fg:x="317780872604" fg:w="5566591224"/><text x="90.9950%" y="271.50"></text></g><g><title>ndarray::impl_owned_array::_&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append::_{{closure}} (5,566,591,224 samples, 1.59%)</title><rect x="90.7450%" y="245" width="1.5896%" height="15" fill="rgb(231,177,25)" fg:x="317780872604" fg:w="5566591224"/><text x="90.9950%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (5,566,591,224 samples, 1.59%)</title><rect x="90.7450%" y="229" width="1.5896%" height="15" fill="rgb(219,179,1)" fg:x="317780872604" fg:w="5566591224"/><text x="90.9950%" y="239.50"></text></g><g><title>core::ptr::write (5,566,591,224 samples, 1.59%)</title><rect x="90.7450%" y="213" width="1.5896%" height="15" fill="rgb(238,219,53)" fg:x="317780872604" fg:w="5566591224"/><text x="90.9950%" y="223.50"></text></g><g><title>[unknown] (1,595,228,371 samples, 0.46%)</title><rect x="91.8791%" y="197" width="0.4555%" height="15" fill="rgb(232,167,36)" fg:x="321752235457" fg:w="1595228371"/><text x="92.1291%" y="207.50"></text></g><g><title>[unknown] (964,531,969 samples, 0.28%)</title><rect x="92.0592%" y="181" width="0.2754%" height="15" fill="rgb(244,19,51)" fg:x="322382931859" fg:w="964531969"/><text x="92.3092%" y="191.50"></text></g><g><title>[unknown] (83,895,632 samples, 0.02%)</title><rect x="92.3106%" y="165" width="0.0240%" height="15" fill="rgb(224,6,22)" fg:x="323263568196" fg:w="83895632"/><text x="92.5606%" y="175.50"></text></g><g><title>[unknown] (40,929,569 samples, 0.01%)</title><rect x="92.3229%" y="149" width="0.0117%" height="15" fill="rgb(224,145,5)" fg:x="323306534259" fg:w="40929569"/><text x="92.5729%" y="159.50"></text></g><g><title>[unknown] (40,929,569 samples, 0.01%)</title><rect x="92.3229%" y="133" width="0.0117%" height="15" fill="rgb(234,130,49)" fg:x="323306534259" fg:w="40929569"/><text x="92.5729%" y="143.50"></text></g><g><title>core::ptr::write (94,578,516 samples, 0.03%)</title><rect x="92.3478%" y="245" width="0.0270%" height="15" fill="rgb(254,6,2)" fg:x="323393674896" fg:w="94578516"/><text x="92.5978%" y="255.50"></text></g><g><title>[unknown] (80,385,945 samples, 0.02%)</title><rect x="92.3518%" y="229" width="0.0230%" height="15" fill="rgb(208,96,46)" fg:x="323407867467" fg:w="80385945"/><text x="92.6018%" y="239.50"></text></g><g><title>[unknown] (45,660,910 samples, 0.01%)</title><rect x="92.3618%" y="213" width="0.0130%" height="15" fill="rgb(239,3,39)" fg:x="323442592502" fg:w="45660910"/><text x="92.6118%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,427,210,857 samples, 0.98%)</title><rect x="92.3357%" y="277" width="0.9787%" height="15" fill="rgb(233,210,1)" fg:x="323351164235" fg:w="3427210857"/><text x="92.5857%" y="287.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (3,427,210,857 samples, 0.98%)</title><rect x="92.3357%" y="261" width="0.9787%" height="15" fill="rgb(244,137,37)" fg:x="323351164235" fg:w="3427210857"/><text x="92.5857%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (3,290,121,680 samples, 0.94%)</title><rect x="92.3748%" y="245" width="0.9395%" height="15" fill="rgb(240,136,2)" fg:x="323488253412" fg:w="3290121680"/><text x="92.6248%" y="255.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (3,290,121,680 samples, 0.94%)</title><rect x="92.3748%" y="229" width="0.9395%" height="15" fill="rgb(239,18,37)" fg:x="323488253412" fg:w="3290121680"/><text x="92.6248%" y="239.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (3,290,121,680 samples, 0.94%)</title><rect x="92.3748%" y="213" width="0.9395%" height="15" fill="rgb(218,185,22)" fg:x="323488253412" fg:w="3290121680"/><text x="92.6248%" y="223.50"></text></g><g><title>tanhf32x (3,276,400,727 samples, 0.94%)</title><rect x="92.3787%" y="197" width="0.9356%" height="15" fill="rgb(225,218,4)" fg:x="323501974365" fg:w="3276400727"/><text x="92.6287%" y="207.50"></text></g><g><title>[libm.so.6] (2,255,359,207 samples, 0.64%)</title><rect x="92.6703%" y="181" width="0.6440%" height="15" fill="rgb(230,182,32)" fg:x="324523015885" fg:w="2255359207"/><text x="92.9203%" y="191.50"></text></g><g><title>rkl::core::activations::Activation::forward (3,435,099,215 samples, 0.98%)</title><rect x="92.3346%" y="373" width="0.9809%" height="15" fill="rgb(242,56,43)" fg:x="323347463828" fg:w="3435099215"/><text x="92.5846%" y="383.50"></text></g><g><title>rkl::core::activations::tanh_forward (3,431,398,808 samples, 0.98%)</title><rect x="92.3357%" y="357" width="0.9799%" height="15" fill="rgb(233,99,24)" fg:x="323351164235" fg:w="3431398808"/><text x="92.5857%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (3,431,398,808 samples, 0.98%)</title><rect x="92.3357%" y="341" width="0.9799%" height="15" fill="rgb(234,209,42)" fg:x="323351164235" fg:w="3431398808"/><text x="92.5857%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (3,431,398,808 samples, 0.98%)</title><rect x="92.3357%" y="325" width="0.9799%" height="15" fill="rgb(227,7,12)" fg:x="323351164235" fg:w="3431398808"/><text x="92.5857%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (3,431,398,808 samples, 0.98%)</title><rect x="92.3357%" y="309" width="0.9799%" height="15" fill="rgb(245,203,43)" fg:x="323351164235" fg:w="3431398808"/><text x="92.5857%" y="319.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (3,431,398,808 samples, 0.98%)</title><rect x="92.3357%" y="293" width="0.9799%" height="15" fill="rgb(238,205,33)" fg:x="323351164235" fg:w="3431398808"/><text x="92.5857%" y="303.50"></text></g><g><title>[unknown] (609,291,612 samples, 0.17%)</title><rect x="93.8121%" y="357" width="0.1740%" height="15" fill="rgb(231,56,7)" fg:x="328521415431" fg:w="609291612"/><text x="94.0621%" y="367.50"></text></g><g><title>[unknown] (325,384,578 samples, 0.09%)</title><rect x="93.8931%" y="341" width="0.0929%" height="15" fill="rgb(244,186,29)" fg:x="328805322465" fg:w="325384578"/><text x="94.1431%" y="351.50"></text></g><g><title>[unknown] (50,230,114 samples, 0.01%)</title><rect x="93.9717%" y="325" width="0.0143%" height="15" fill="rgb(234,111,31)" fg:x="329080476929" fg:w="50230114"/><text x="94.2217%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (998,365,199 samples, 0.29%)</title><rect x="94.0270%" y="325" width="0.2851%" height="15" fill="rgb(241,149,10)" fg:x="329274253120" fg:w="998365199"/><text x="94.2770%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (998,365,199 samples, 0.29%)</title><rect x="94.0270%" y="309" width="0.2851%" height="15" fill="rgb(249,206,44)" fg:x="329274253120" fg:w="998365199"/><text x="94.2770%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,312,048,391 samples, 0.37%)</title><rect x="93.9861%" y="357" width="0.3747%" height="15" fill="rgb(251,153,30)" fg:x="329130707043" fg:w="1312048391"/><text x="94.2361%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,312,048,391 samples, 0.37%)</title><rect x="93.9861%" y="341" width="0.3747%" height="15" fill="rgb(239,152,38)" fg:x="329130707043" fg:w="1312048391"/><text x="94.2361%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (170,137,115 samples, 0.05%)</title><rect x="94.3121%" y="325" width="0.0486%" height="15" fill="rgb(249,139,47)" fg:x="330272618319" fg:w="170137115"/><text x="94.5621%" y="335.50"></text></g><g><title>&lt;[usize: 2] as ndarray::dimension::ndindex::NdIndex&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::index_checked (57,021,931 samples, 0.02%)</title><rect x="94.3616%" y="341" width="0.0163%" height="15" fill="rgb(244,64,35)" fg:x="330445884919" fg:w="57021931"/><text x="94.6116%" y="351.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::stride_offset_checked (57,021,931 samples, 0.02%)</title><rect x="94.3616%" y="325" width="0.0163%" height="15" fill="rgb(216,46,15)" fg:x="330445884919" fg:w="57021931"/><text x="94.6116%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (672,308,711 samples, 0.19%)</title><rect x="94.3779%" y="341" width="0.1920%" height="15" fill="rgb(250,74,19)" fg:x="330502906850" fg:w="672308711"/><text x="94.6279%" y="351.50"></text></g><g><title>ndarray::arraytraits::&lt;impl core::ops::index::Index&lt;I&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::index (814,509,036 samples, 0.23%)</title><rect x="94.3616%" y="357" width="0.2326%" height="15" fill="rgb(249,42,33)" fg:x="330445884919" fg:w="814509036"/><text x="94.6116%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (85,178,394 samples, 0.02%)</title><rect x="94.5699%" y="341" width="0.0243%" height="15" fill="rgb(242,149,17)" fg:x="331175215561" fg:w="85178394"/><text x="94.8199%" y="351.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (264,374,341 samples, 0.08%)</title><rect x="94.5942%" y="357" width="0.0755%" height="15" fill="rgb(244,29,21)" fg:x="331260393955" fg:w="264374341"/><text x="94.8442%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (264,374,341 samples, 0.08%)</title><rect x="94.5942%" y="341" width="0.0755%" height="15" fill="rgb(220,130,37)" fg:x="331260393955" fg:w="264374341"/><text x="94.8442%" y="351.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (260,674,121 samples, 0.07%)</title><rect x="94.5953%" y="325" width="0.0744%" height="15" fill="rgb(211,67,2)" fg:x="331264094175" fg:w="260674121"/><text x="94.8453%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (260,674,121 samples, 0.07%)</title><rect x="94.5953%" y="309" width="0.0744%" height="15" fill="rgb(235,68,52)" fg:x="331264094175" fg:w="260674121"/><text x="94.8453%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (260,674,121 samples, 0.07%)</title><rect x="94.5953%" y="293" width="0.0744%" height="15" fill="rgb(246,142,3)" fg:x="331264094175" fg:w="260674121"/><text x="94.8453%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (260,674,121 samples, 0.07%)</title><rect x="94.5953%" y="277" width="0.0744%" height="15" fill="rgb(241,25,7)" fg:x="331264094175" fg:w="260674121"/><text x="94.8453%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (260,674,121 samples, 0.07%)</title><rect x="94.5953%" y="261" width="0.0744%" height="15" fill="rgb(242,119,39)" fg:x="331264094175" fg:w="260674121"/><text x="94.8453%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (260,674,121 samples, 0.07%)</title><rect x="94.5953%" y="245" width="0.0744%" height="15" fill="rgb(241,98,45)" fg:x="331264094175" fg:w="260674121"/><text x="94.8453%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (249,347,345 samples, 0.07%)</title><rect x="94.5985%" y="229" width="0.0712%" height="15" fill="rgb(254,28,30)" fg:x="331275420951" fg:w="249347345"/><text x="94.8485%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (249,347,345 samples, 0.07%)</title><rect x="94.5985%" y="213" width="0.0712%" height="15" fill="rgb(241,142,54)" fg:x="331275420951" fg:w="249347345"/><text x="94.8485%" y="223.50"></text></g><g><title>[libc.so.6] (249,347,345 samples, 0.07%)</title><rect x="94.5985%" y="197" width="0.0712%" height="15" fill="rgb(222,85,15)" fg:x="331275420951" fg:w="249347345"/><text x="94.8485%" y="207.50"></text></g><g><title>[libc.so.6] (651,731,139 samples, 0.19%)</title><rect x="94.6705%" y="197" width="0.1861%" height="15" fill="rgb(210,85,47)" fg:x="331527664850" fg:w="651731139"/><text x="94.9205%" y="207.50"></text></g><g><title>[unknown] (43,603,563 samples, 0.01%)</title><rect x="94.8442%" y="181" width="0.0125%" height="15" fill="rgb(224,206,25)" fg:x="332135792426" fg:w="43603563"/><text x="95.0942%" y="191.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (686,822,601 samples, 0.20%)</title><rect x="94.6697%" y="357" width="0.1961%" height="15" fill="rgb(243,201,19)" fg:x="331524768296" fg:w="686822601"/><text x="94.9197%" y="367.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (686,822,601 samples, 0.20%)</title><rect x="94.6697%" y="341" width="0.1961%" height="15" fill="rgb(236,59,4)" fg:x="331524768296" fg:w="686822601"/><text x="94.9197%" y="351.50"></text></g><g><title>alloc::vec::from_elem (686,822,601 samples, 0.20%)</title><rect x="94.6697%" y="325" width="0.1961%" height="15" fill="rgb(254,179,45)" fg:x="331524768296" fg:w="686822601"/><text x="94.9197%" y="335.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (686,822,601 samples, 0.20%)</title><rect x="94.6697%" y="309" width="0.1961%" height="15" fill="rgb(226,14,10)" fg:x="331524768296" fg:w="686822601"/><text x="94.9197%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (686,822,601 samples, 0.20%)</title><rect x="94.6697%" y="293" width="0.1961%" height="15" fill="rgb(244,27,41)" fg:x="331524768296" fg:w="686822601"/><text x="94.9197%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (686,822,601 samples, 0.20%)</title><rect x="94.6697%" y="277" width="0.1961%" height="15" fill="rgb(235,35,32)" fg:x="331524768296" fg:w="686822601"/><text x="94.9197%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (686,822,601 samples, 0.20%)</title><rect x="94.6697%" y="261" width="0.1961%" height="15" fill="rgb(218,68,31)" fg:x="331524768296" fg:w="686822601"/><text x="94.9197%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (683,926,047 samples, 0.20%)</title><rect x="94.6705%" y="245" width="0.1953%" height="15" fill="rgb(207,120,37)" fg:x="331527664850" fg:w="683926047"/><text x="94.9205%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (683,926,047 samples, 0.20%)</title><rect x="94.6705%" y="229" width="0.1953%" height="15" fill="rgb(227,98,0)" fg:x="331527664850" fg:w="683926047"/><text x="94.9205%" y="239.50"></text></g><g><title>alloc::alloc::alloc_zeroed (683,926,047 samples, 0.20%)</title><rect x="94.6705%" y="213" width="0.1953%" height="15" fill="rgb(207,7,3)" fg:x="331527664850" fg:w="683926047"/><text x="94.9205%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::collapse_axis (37,507,957 samples, 0.01%)</title><rect x="94.9967%" y="293" width="0.0107%" height="15" fill="rgb(206,98,19)" fg:x="332669773279" fg:w="37507957"/><text x="95.2467%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (854,715,527 samples, 0.24%)</title><rect x="94.8789%" y="325" width="0.2441%" height="15" fill="rgb(217,5,26)" fg:x="332257378934" fg:w="854715527"/><text x="95.1289%" y="335.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move::_{{closure}} (854,715,527 samples, 0.24%)</title><rect x="94.8789%" y="309" width="0.2441%" height="15" fill="rgb(235,190,38)" fg:x="332257378934" fg:w="854715527"/><text x="95.1289%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_axis_inplace (404,813,225 samples, 0.12%)</title><rect x="95.0074%" y="293" width="0.1156%" height="15" fill="rgb(247,86,24)" fg:x="332707281236" fg:w="404813225"/><text x="95.2574%" y="303.50"></text></g><g><title>ndarray::dimension::do_slice (329,652,716 samples, 0.09%)</title><rect x="95.0288%" y="277" width="0.0941%" height="15" fill="rgb(205,101,16)" fg:x="332782441745" fg:w="329652716"/><text x="95.2788%" y="287.50"></text></g><g><title>ndarray::dimension::to_abs_slice (192,215,926 samples, 0.05%)</title><rect x="95.0681%" y="261" width="0.0549%" height="15" fill="rgb(246,168,33)" fg:x="332919878535" fg:w="192215926"/><text x="95.3181%" y="271.50"></text></g><g><title>ndarray::dimension::abs_index (72,020,866 samples, 0.02%)</title><rect x="95.1024%" y="245" width="0.0206%" height="15" fill="rgb(231,114,1)" fg:x="333040073595" fg:w="72020866"/><text x="95.3524%" y="255.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move (863,176,177 samples, 0.25%)</title><rect x="94.8777%" y="341" width="0.2465%" height="15" fill="rgb(207,184,53)" fg:x="332253216675" fg:w="863176177"/><text x="95.1277%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (930,504,128 samples, 0.27%)</title><rect x="94.8658%" y="357" width="0.2657%" height="15" fill="rgb(224,95,51)" fg:x="332211590897" fg:w="930504128"/><text x="95.1158%" y="367.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (161,721,483 samples, 0.05%)</title><rect x="95.1617%" y="165" width="0.0462%" height="15" fill="rgb(212,188,45)" fg:x="333247866449" fg:w="161721483"/><text x="95.4117%" y="175.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (161,721,483 samples, 0.05%)</title><rect x="95.1617%" y="149" width="0.0462%" height="15" fill="rgb(223,154,38)" fg:x="333247866449" fg:w="161721483"/><text x="95.4117%" y="159.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (37,816,118 samples, 0.01%)</title><rect x="95.2209%" y="165" width="0.0108%" height="15" fill="rgb(251,22,52)" fg:x="333455014306" fg:w="37816118"/><text x="95.4709%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (37,816,118 samples, 0.01%)</title><rect x="95.2209%" y="149" width="0.0108%" height="15" fill="rgb(229,209,22)" fg:x="333455014306" fg:w="37816118"/><text x="95.4709%" y="159.50"></text></g><g><title>core::ptr::write_unaligned (37,816,118 samples, 0.01%)</title><rect x="95.2209%" y="133" width="0.0108%" height="15" fill="rgb(234,138,34)" fg:x="333455014306" fg:w="37816118"/><text x="95.4709%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37,816,118 samples, 0.01%)</title><rect x="95.2209%" y="117" width="0.0108%" height="15" fill="rgb(212,95,11)" fg:x="333455014306" fg:w="37816118"/><text x="95.4709%" y="127.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (293,975,551 samples, 0.08%)</title><rect x="95.1499%" y="213" width="0.0839%" height="15" fill="rgb(240,179,47)" fg:x="333206378507" fg:w="293975551"/><text x="95.3999%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (293,975,551 samples, 0.08%)</title><rect x="95.1499%" y="197" width="0.0839%" height="15" fill="rgb(240,163,11)" fg:x="333206378507" fg:w="293975551"/><text x="95.3999%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (276,652,911 samples, 0.08%)</title><rect x="95.1548%" y="181" width="0.0790%" height="15" fill="rgb(236,37,12)" fg:x="333223701147" fg:w="276652911"/><text x="95.4048%" y="191.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (45,659,799 samples, 0.01%)</title><rect x="95.2392%" y="197" width="0.0130%" height="15" fill="rgb(232,164,16)" fg:x="333519097480" fg:w="45659799"/><text x="95.4892%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (42,889,641 samples, 0.01%)</title><rect x="95.2400%" y="181" width="0.0122%" height="15" fill="rgb(244,205,15)" fg:x="333521867638" fg:w="42889641"/><text x="95.4900%" y="191.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (39,030,766 samples, 0.01%)</title><rect x="95.2411%" y="165" width="0.0111%" height="15" fill="rgb(223,117,47)" fg:x="333525726513" fg:w="39030766"/><text x="95.4911%" y="175.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (374,139,737 samples, 0.11%)</title><rect x="95.1462%" y="261" width="0.1068%" height="15" fill="rgb(244,107,35)" fg:x="333193357836" fg:w="374139737"/><text x="95.3962%" y="271.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (374,139,737 samples, 0.11%)</title><rect x="95.1462%" y="245" width="0.1068%" height="15" fill="rgb(205,140,8)" fg:x="333193357836" fg:w="374139737"/><text x="95.3962%" y="255.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (361,119,066 samples, 0.10%)</title><rect x="95.1499%" y="229" width="0.1031%" height="15" fill="rgb(228,84,46)" fg:x="333206378507" fg:w="361119066"/><text x="95.3999%" y="239.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (59,048,256 samples, 0.02%)</title><rect x="95.2362%" y="213" width="0.0169%" height="15" fill="rgb(254,188,9)" fg:x="333508449317" fg:w="59048256"/><text x="95.4862%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (61,976,542 samples, 0.02%)</title><rect x="95.2581%" y="245" width="0.0177%" height="15" fill="rgb(206,112,54)" fg:x="333585203510" fg:w="61976542"/><text x="95.5081%" y="255.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (508,852,604 samples, 0.15%)</title><rect x="95.1323%" y="357" width="0.1453%" height="15" fill="rgb(216,84,49)" fg:x="333144794815" fg:w="508852604"/><text x="95.3823%" y="367.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (508,852,604 samples, 0.15%)</title><rect x="95.1323%" y="341" width="0.1453%" height="15" fill="rgb(214,194,35)" fg:x="333144794815" fg:w="508852604"/><text x="95.3823%" y="351.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (497,594,069 samples, 0.14%)</title><rect x="95.1355%" y="325" width="0.1421%" height="15" fill="rgb(249,28,3)" fg:x="333156053350" fg:w="497594069"/><text x="95.3855%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (494,967,522 samples, 0.14%)</title><rect x="95.1363%" y="309" width="0.1413%" height="15" fill="rgb(222,56,52)" fg:x="333158679897" fg:w="494967522"/><text x="95.3863%" y="319.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (460,289,583 samples, 0.13%)</title><rect x="95.1462%" y="293" width="0.1314%" height="15" fill="rgb(245,217,50)" fg:x="333193357836" fg:w="460289583"/><text x="95.3962%" y="303.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (460,289,583 samples, 0.13%)</title><rect x="95.1462%" y="277" width="0.1314%" height="15" fill="rgb(213,201,24)" fg:x="333193357836" fg:w="460289583"/><text x="95.3962%" y="287.50"></text></g><g><title>matrixmultiply::gemm::pack (86,149,846 samples, 0.02%)</title><rect x="95.2530%" y="261" width="0.0246%" height="15" fill="rgb(248,116,28)" fg:x="333567497573" fg:w="86149846"/><text x="95.5030%" y="271.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (225,037,049 samples, 0.06%)</title><rect x="95.2793%" y="341" width="0.0643%" height="15" fill="rgb(219,72,43)" fg:x="333659399560" fg:w="225037049"/><text x="95.5293%" y="351.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (225,037,049 samples, 0.06%)</title><rect x="95.2793%" y="325" width="0.0643%" height="15" fill="rgb(209,138,14)" fg:x="333659399560" fg:w="225037049"/><text x="95.5293%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (222,209,577 samples, 0.06%)</title><rect x="95.2801%" y="309" width="0.0635%" height="15" fill="rgb(222,18,33)" fg:x="333662227032" fg:w="222209577"/><text x="95.5301%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (222,209,577 samples, 0.06%)</title><rect x="95.2801%" y="293" width="0.0635%" height="15" fill="rgb(213,199,7)" fg:x="333662227032" fg:w="222209577"/><text x="95.5301%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (214,828,845 samples, 0.06%)</title><rect x="95.2822%" y="277" width="0.0613%" height="15" fill="rgb(250,110,10)" fg:x="333669607764" fg:w="214828845"/><text x="95.5322%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (214,828,845 samples, 0.06%)</title><rect x="95.2822%" y="261" width="0.0613%" height="15" fill="rgb(248,123,6)" fg:x="333669607764" fg:w="214828845"/><text x="95.5322%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (214,828,845 samples, 0.06%)</title><rect x="95.2822%" y="245" width="0.0613%" height="15" fill="rgb(206,91,31)" fg:x="333669607764" fg:w="214828845"/><text x="95.5322%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (214,828,845 samples, 0.06%)</title><rect x="95.2822%" y="229" width="0.0613%" height="15" fill="rgb(211,154,13)" fg:x="333669607764" fg:w="214828845"/><text x="95.5322%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (212,189,005 samples, 0.06%)</title><rect x="95.2829%" y="213" width="0.0606%" height="15" fill="rgb(225,148,7)" fg:x="333672247604" fg:w="212189005"/><text x="95.5329%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (195,562,574 samples, 0.06%)</title><rect x="95.2877%" y="197" width="0.0558%" height="15" fill="rgb(220,160,43)" fg:x="333688874035" fg:w="195562574"/><text x="95.5377%" y="207.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (195,562,574 samples, 0.06%)</title><rect x="95.2877%" y="181" width="0.0558%" height="15" fill="rgb(213,52,39)" fg:x="333688874035" fg:w="195562574"/><text x="95.5377%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (195,562,574 samples, 0.06%)</title><rect x="95.2877%" y="165" width="0.0558%" height="15" fill="rgb(243,137,7)" fg:x="333688874035" fg:w="195562574"/><text x="95.5377%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (195,562,574 samples, 0.06%)</title><rect x="95.2877%" y="149" width="0.0558%" height="15" fill="rgb(230,79,13)" fg:x="333688874035" fg:w="195562574"/><text x="95.5377%" y="159.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (195,562,574 samples, 0.06%)</title><rect x="95.2877%" y="133" width="0.0558%" height="15" fill="rgb(247,105,23)" fg:x="333688874035" fg:w="195562574"/><text x="95.5377%" y="143.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (195,562,574 samples, 0.06%)</title><rect x="95.2877%" y="117" width="0.0558%" height="15" fill="rgb(223,179,41)" fg:x="333688874035" fg:w="195562574"/><text x="95.5377%" y="127.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (195,562,574 samples, 0.06%)</title><rect x="95.2877%" y="101" width="0.0558%" height="15" fill="rgb(218,9,34)" fg:x="333688874035" fg:w="195562574"/><text x="95.5377%" y="111.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (163,744,879 samples, 0.05%)</title><rect x="95.2968%" y="85" width="0.0468%" height="15" fill="rgb(222,106,8)" fg:x="333720691730" fg:w="163744879"/><text x="95.5468%" y="95.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (163,744,879 samples, 0.05%)</title><rect x="95.2968%" y="69" width="0.0468%" height="15" fill="rgb(211,220,0)" fg:x="333720691730" fg:w="163744879"/><text x="95.5468%" y="79.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (148,875,673 samples, 0.04%)</title><rect x="95.3010%" y="53" width="0.0425%" height="15" fill="rgb(229,52,16)" fg:x="333735560936" fg:w="148875673"/><text x="95.5510%" y="63.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,580,360,299 samples, 1.02%)</title><rect x="95.3435%" y="261" width="1.0224%" height="15" fill="rgb(212,155,18)" fg:x="333884436609" fg:w="3580360299"/><text x="95.5935%" y="271.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (3,576,915,029 samples, 1.02%)</title><rect x="95.3445%" y="245" width="1.0214%" height="15" fill="rgb(242,21,14)" fg:x="333887881879" fg:w="3576915029"/><text x="95.5945%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (3,508,836,721 samples, 1.00%)</title><rect x="95.3639%" y="229" width="1.0020%" height="15" fill="rgb(222,19,48)" fg:x="333955960187" fg:w="3508836721"/><text x="95.6139%" y="239.50"></text></g><g><title>rkl::core::activations::tanh_backward::_{{closure}} (3,508,836,721 samples, 1.00%)</title><rect x="95.3639%" y="213" width="1.0020%" height="15" fill="rgb(232,45,27)" fg:x="333955960187" fg:w="3508836721"/><text x="95.6139%" y="223.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (3,352,030,546 samples, 0.96%)</title><rect x="95.4087%" y="197" width="0.9572%" height="15" fill="rgb(249,103,42)" fg:x="334112766362" fg:w="3352030546"/><text x="95.6587%" y="207.50"></text></g><g><title>tanhf32x (3,344,925,286 samples, 0.96%)</title><rect x="95.4107%" y="181" width="0.9552%" height="15" fill="rgb(246,81,33)" fg:x="334119871622" fg:w="3344925286"/><text x="95.6607%" y="191.50"></text></g><g><title>[libm.so.6] (2,359,399,625 samples, 0.67%)</title><rect x="95.6922%" y="165" width="0.6737%" height="15" fill="rgb(252,33,42)" fg:x="335105397283" fg:w="2359399625"/><text x="95.9422%" y="175.50"></text></g><g><title>rkl::core::layers::Dense::backward_jacobian (10,691,819,195 samples, 3.05%)</title><rect x="93.3155%" y="373" width="3.0531%" height="15" fill="rgb(209,212,41)" fg:x="326782563043" fg:w="10691819195"/><text x="93.5655%" y="383.50">rkl..</text></g><g><title>rkl::core::activations::Activation::backward (3,817,765,125 samples, 1.09%)</title><rect x="95.2785%" y="357" width="1.0902%" height="15" fill="rgb(207,154,6)" fg:x="333656617113" fg:w="3817765125"/><text x="95.5285%" y="367.50"></text></g><g><title>rkl::core::activations::tanh_backward (3,589,945,629 samples, 1.03%)</title><rect x="95.3435%" y="341" width="1.0251%" height="15" fill="rgb(223,64,47)" fg:x="333884436609" fg:w="3589945629"/><text x="95.5935%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (3,589,945,629 samples, 1.03%)</title><rect x="95.3435%" y="325" width="1.0251%" height="15" fill="rgb(211,161,38)" fg:x="333884436609" fg:w="3589945629"/><text x="95.5935%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (3,589,945,629 samples, 1.03%)</title><rect x="95.3435%" y="309" width="1.0251%" height="15" fill="rgb(219,138,40)" fg:x="333884436609" fg:w="3589945629"/><text x="95.5935%" y="319.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (3,589,945,629 samples, 1.03%)</title><rect x="95.3435%" y="293" width="1.0251%" height="15" fill="rgb(241,228,46)" fg:x="333884436609" fg:w="3589945629"/><text x="95.5935%" y="303.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (3,589,945,629 samples, 1.03%)</title><rect x="95.3435%" y="277" width="1.0251%" height="15" fill="rgb(223,209,38)" fg:x="333884436609" fg:w="3589945629"/><text x="95.5935%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (54,533,204 samples, 0.02%)</title><rect x="98.6220%" y="325" width="0.0156%" height="15" fill="rgb(236,164,45)" fg:x="345365449870" fg:w="54533204"/><text x="98.8720%" y="335.50"></text></g><g><title>&lt;ndarray::iterators::IterMut&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (656,242,701 samples, 0.19%)</title><rect x="98.5779%" y="357" width="0.1874%" height="15" fill="rgb(231,15,5)" fg:x="345210954354" fg:w="656242701"/><text x="98.8279%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (577,056,253 samples, 0.16%)</title><rect x="98.6005%" y="341" width="0.1648%" height="15" fill="rgb(252,35,15)" fg:x="345290140802" fg:w="577056253"/><text x="98.8505%" y="351.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (447,213,981 samples, 0.13%)</title><rect x="98.6376%" y="325" width="0.1277%" height="15" fill="rgb(248,181,18)" fg:x="345419983074" fg:w="447213981"/><text x="98.8876%" y="335.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (447,213,981 samples, 0.13%)</title><rect x="98.6376%" y="309" width="0.1277%" height="15" fill="rgb(233,39,42)" fg:x="345419983074" fg:w="447213981"/><text x="98.8876%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (447,213,981 samples, 0.13%)</title><rect x="98.6376%" y="293" width="0.1277%" height="15" fill="rgb(238,110,33)" fg:x="345419983074" fg:w="447213981"/><text x="98.8876%" y="303.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::backward_jacobian (45,549,015,593 samples, 13.01%)</title><rect x="85.7592%" y="389" width="13.0069%" height="15" fill="rgb(233,195,10)" fg:x="300321003414" fg:w="45549015593"/><text x="86.0092%" y="399.50">rkl::models::Sequent..</text></g><g><title>rkl::models::divide_rows_by_last_value (8,395,636,769 samples, 2.40%)</title><rect x="96.3687%" y="373" width="2.3974%" height="15" fill="rgb(254,105,3)" fg:x="337474382238" fg:w="8395636769"/><text x="96.6187%" y="383.50">rk..</text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (182,951,342 samples, 0.05%)</title><rect x="98.7673%" y="357" width="0.0522%" height="15" fill="rgb(221,225,9)" fg:x="345874077202" fg:w="182951342"/><text x="99.0173%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (182,951,342 samples, 0.05%)</title><rect x="98.7673%" y="341" width="0.0522%" height="15" fill="rgb(224,227,45)" fg:x="345874077202" fg:w="182951342"/><text x="99.0173%" y="351.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (182,951,342 samples, 0.05%)</title><rect x="98.7673%" y="325" width="0.0522%" height="15" fill="rgb(229,198,43)" fg:x="345874077202" fg:w="182951342"/><text x="99.0173%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (182,951,342 samples, 0.05%)</title><rect x="98.7673%" y="309" width="0.0522%" height="15" fill="rgb(206,209,35)" fg:x="345874077202" fg:w="182951342"/><text x="99.0173%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (182,951,342 samples, 0.05%)</title><rect x="98.7673%" y="293" width="0.0522%" height="15" fill="rgb(245,195,53)" fg:x="345874077202" fg:w="182951342"/><text x="99.0173%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (182,951,342 samples, 0.05%)</title><rect x="98.7673%" y="277" width="0.0522%" height="15" fill="rgb(240,92,26)" fg:x="345874077202" fg:w="182951342"/><text x="99.0173%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (182,951,342 samples, 0.05%)</title><rect x="98.7673%" y="261" width="0.0522%" height="15" fill="rgb(207,40,23)" fg:x="345874077202" fg:w="182951342"/><text x="99.0173%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (182,951,342 samples, 0.05%)</title><rect x="98.7673%" y="245" width="0.0522%" height="15" fill="rgb(223,111,35)" fg:x="345874077202" fg:w="182951342"/><text x="99.0173%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (179,142,926 samples, 0.05%)</title><rect x="98.7683%" y="229" width="0.0512%" height="15" fill="rgb(229,147,28)" fg:x="345877885618" fg:w="179142926"/><text x="99.0183%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (179,142,926 samples, 0.05%)</title><rect x="98.7683%" y="213" width="0.0512%" height="15" fill="rgb(211,29,28)" fg:x="345877885618" fg:w="179142926"/><text x="99.0183%" y="223.50"></text></g><g><title>[libc.so.6] (179,142,926 samples, 0.05%)</title><rect x="98.7683%" y="197" width="0.0512%" height="15" fill="rgb(228,72,33)" fg:x="345877885618" fg:w="179142926"/><text x="99.0183%" y="207.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (54,719,643 samples, 0.02%)</title><rect x="98.8195%" y="357" width="0.0156%" height="15" fill="rgb(205,214,31)" fg:x="346057028544" fg:w="54719643"/><text x="99.0695%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (54,719,643 samples, 0.02%)</title><rect x="98.8195%" y="341" width="0.0156%" height="15" fill="rgb(224,111,15)" fg:x="346057028544" fg:w="54719643"/><text x="99.0695%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (54,719,643 samples, 0.02%)</title><rect x="98.8195%" y="325" width="0.0156%" height="15" fill="rgb(253,21,26)" fg:x="346057028544" fg:w="54719643"/><text x="99.0695%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (54,719,643 samples, 0.02%)</title><rect x="98.8195%" y="309" width="0.0156%" height="15" fill="rgb(245,139,43)" fg:x="346057028544" fg:w="54719643"/><text x="99.0695%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (54,719,643 samples, 0.02%)</title><rect x="98.8195%" y="293" width="0.0156%" height="15" fill="rgb(252,170,7)" fg:x="346057028544" fg:w="54719643"/><text x="99.0695%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (54,719,643 samples, 0.02%)</title><rect x="98.8195%" y="277" width="0.0156%" height="15" fill="rgb(231,118,14)" fg:x="346057028544" fg:w="54719643"/><text x="99.0695%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (54,719,643 samples, 0.02%)</title><rect x="98.8195%" y="261" width="0.0156%" height="15" fill="rgb(238,83,0)" fg:x="346057028544" fg:w="54719643"/><text x="99.0695%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (54,719,643 samples, 0.02%)</title><rect x="98.8195%" y="245" width="0.0156%" height="15" fill="rgb(221,39,39)" fg:x="346057028544" fg:w="54719643"/><text x="99.0695%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (50,480,876 samples, 0.01%)</title><rect x="98.8207%" y="229" width="0.0144%" height="15" fill="rgb(222,119,46)" fg:x="346061267311" fg:w="50480876"/><text x="99.0707%" y="239.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (50,480,876 samples, 0.01%)</title><rect x="98.8207%" y="213" width="0.0144%" height="15" fill="rgb(222,165,49)" fg:x="346061267311" fg:w="50480876"/><text x="99.0707%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (50,480,876 samples, 0.01%)</title><rect x="98.8207%" y="197" width="0.0144%" height="15" fill="rgb(219,113,52)" fg:x="346061267311" fg:w="50480876"/><text x="99.0707%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (50,480,876 samples, 0.01%)</title><rect x="98.8207%" y="181" width="0.0144%" height="15" fill="rgb(214,7,15)" fg:x="346061267311" fg:w="50480876"/><text x="99.0707%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (50,480,876 samples, 0.01%)</title><rect x="98.8207%" y="165" width="0.0144%" height="15" fill="rgb(235,32,4)" fg:x="346061267311" fg:w="50480876"/><text x="99.0707%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (50,480,876 samples, 0.01%)</title><rect x="98.8207%" y="149" width="0.0144%" height="15" fill="rgb(238,90,54)" fg:x="346061267311" fg:w="50480876"/><text x="99.0707%" y="159.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (38,583,337 samples, 0.01%)</title><rect x="98.8241%" y="133" width="0.0110%" height="15" fill="rgb(213,208,19)" fg:x="346073164850" fg:w="38583337"/><text x="99.0741%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (38,583,337 samples, 0.01%)</title><rect x="98.8241%" y="117" width="0.0110%" height="15" fill="rgb(233,156,4)" fg:x="346073164850" fg:w="38583337"/><text x="99.0741%" y="127.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (217,881,560 samples, 0.06%)</title><rect x="98.8712%" y="165" width="0.0622%" height="15" fill="rgb(207,194,5)" fg:x="346238024891" fg:w="217881560"/><text x="99.1212%" y="175.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (217,881,560 samples, 0.06%)</title><rect x="98.8712%" y="149" width="0.0622%" height="15" fill="rgb(206,111,30)" fg:x="346238024891" fg:w="217881560"/><text x="99.1212%" y="159.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (36,580,565 samples, 0.01%)</title><rect x="98.9558%" y="165" width="0.0104%" height="15" fill="rgb(243,70,54)" fg:x="346534448120" fg:w="36580565"/><text x="99.2058%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (36,580,565 samples, 0.01%)</title><rect x="98.9558%" y="149" width="0.0104%" height="15" fill="rgb(242,28,8)" fg:x="346534448120" fg:w="36580565"/><text x="99.2058%" y="159.50"></text></g><g><title>core::ptr::write_unaligned (36,580,565 samples, 0.01%)</title><rect x="98.9558%" y="133" width="0.0104%" height="15" fill="rgb(219,106,18)" fg:x="346534448120" fg:w="36580565"/><text x="99.2058%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36,580,565 samples, 0.01%)</title><rect x="98.9558%" y="117" width="0.0104%" height="15" fill="rgb(244,222,10)" fg:x="346534448120" fg:w="36580565"/><text x="99.2058%" y="127.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (500,856,820 samples, 0.14%)</title><rect x="98.8500%" y="213" width="0.1430%" height="15" fill="rgb(236,179,52)" fg:x="346163673156" fg:w="500856820"/><text x="99.1000%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (500,856,820 samples, 0.14%)</title><rect x="98.8500%" y="197" width="0.1430%" height="15" fill="rgb(213,23,39)" fg:x="346163673156" fg:w="500856820"/><text x="99.1000%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (464,645,820 samples, 0.13%)</title><rect x="98.8603%" y="181" width="0.1327%" height="15" fill="rgb(238,48,10)" fg:x="346199884156" fg:w="464645820"/><text x="99.1103%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (81,283,141 samples, 0.02%)</title><rect x="98.9698%" y="165" width="0.0232%" height="15" fill="rgb(251,196,23)" fg:x="346583246835" fg:w="81283141"/><text x="99.2198%" y="175.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (548,273,386 samples, 0.16%)</title><rect x="98.8453%" y="261" width="0.1566%" height="15" fill="rgb(250,152,24)" fg:x="346147398306" fg:w="548273386"/><text x="99.0953%" y="271.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (544,031,031 samples, 0.16%)</title><rect x="98.8465%" y="245" width="0.1554%" height="15" fill="rgb(209,150,17)" fg:x="346151640661" fg:w="544031031"/><text x="99.0965%" y="255.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (544,026,831 samples, 0.16%)</title><rect x="98.8465%" y="229" width="0.1554%" height="15" fill="rgb(234,202,34)" fg:x="346151644861" fg:w="544026831"/><text x="99.0965%" y="239.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (720,150,110 samples, 0.21%)</title><rect x="98.8351%" y="357" width="0.2056%" height="15" fill="rgb(253,148,53)" fg:x="346111748187" fg:w="720150110"/><text x="99.0851%" y="367.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (720,150,110 samples, 0.21%)</title><rect x="98.8351%" y="341" width="0.2056%" height="15" fill="rgb(218,129,16)" fg:x="346111748187" fg:w="720150110"/><text x="99.0851%" y="351.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (716,068,395 samples, 0.20%)</title><rect x="98.8363%" y="325" width="0.2045%" height="15" fill="rgb(216,85,19)" fg:x="346115829902" fg:w="716068395"/><text x="99.0863%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (716,068,395 samples, 0.20%)</title><rect x="98.8363%" y="309" width="0.2045%" height="15" fill="rgb(235,228,7)" fg:x="346115829902" fg:w="716068395"/><text x="99.0863%" y="319.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (684,499,991 samples, 0.20%)</title><rect x="98.8453%" y="293" width="0.1955%" height="15" fill="rgb(245,175,0)" fg:x="346147398306" fg:w="684499991"/><text x="99.0953%" y="303.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (684,499,991 samples, 0.20%)</title><rect x="98.8453%" y="277" width="0.1955%" height="15" fill="rgb(208,168,36)" fg:x="346147398306" fg:w="684499991"/><text x="99.0953%" y="287.50"></text></g><g><title>matrixmultiply::gemm::pack (136,226,605 samples, 0.04%)</title><rect x="99.0019%" y="261" width="0.0389%" height="15" fill="rgb(246,171,24)" fg:x="346695671692" fg:w="136226605"/><text x="99.2519%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (115,911,057 samples, 0.03%)</title><rect x="99.0077%" y="245" width="0.0331%" height="15" fill="rgb(215,142,24)" fg:x="346715987240" fg:w="115911057"/><text x="99.2577%" y="255.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::predict_with_normalization (4,191,838,865 samples, 1.20%)</title><rect x="98.7661%" y="389" width="1.1970%" height="15" fill="rgb(250,187,7)" fg:x="345870019007" fg:w="4191838865"/><text x="99.0161%" y="399.50"></text></g><g><title>rkl::core::layers::Dense::forward (4,191,838,865 samples, 1.20%)</title><rect x="98.7661%" y="373" width="1.1970%" height="15" fill="rgb(228,66,33)" fg:x="345870019007" fg:w="4191838865"/><text x="99.0161%" y="383.50"></text></g><g><title>rkl::core::activations::Activation::forward (3,229,959,575 samples, 0.92%)</title><rect x="99.0408%" y="357" width="0.9223%" height="15" fill="rgb(234,215,21)" fg:x="346831898297" fg:w="3229959575"/><text x="99.2908%" y="367.50"></text></g><g><title>rkl::core::activations::tanh_forward (3,229,959,575 samples, 0.92%)</title><rect x="99.0408%" y="341" width="0.9223%" height="15" fill="rgb(222,191,20)" fg:x="346831898297" fg:w="3229959575"/><text x="99.2908%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (3,229,959,575 samples, 0.92%)</title><rect x="99.0408%" y="325" width="0.9223%" height="15" fill="rgb(245,79,54)" fg:x="346831898297" fg:w="3229959575"/><text x="99.2908%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (3,229,959,575 samples, 0.92%)</title><rect x="99.0408%" y="309" width="0.9223%" height="15" fill="rgb(240,10,37)" fg:x="346831898297" fg:w="3229959575"/><text x="99.2908%" y="319.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (3,229,959,575 samples, 0.92%)</title><rect x="99.0408%" y="293" width="0.9223%" height="15" fill="rgb(214,192,32)" fg:x="346831898297" fg:w="3229959575"/><text x="99.2908%" y="303.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (3,229,959,575 samples, 0.92%)</title><rect x="99.0408%" y="277" width="0.9223%" height="15" fill="rgb(209,36,54)" fg:x="346831898297" fg:w="3229959575"/><text x="99.2908%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,229,959,575 samples, 0.92%)</title><rect x="99.0408%" y="261" width="0.9223%" height="15" fill="rgb(220,10,11)" fg:x="346831898297" fg:w="3229959575"/><text x="99.2908%" y="271.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (3,221,312,247 samples, 0.92%)</title><rect x="99.0432%" y="245" width="0.9199%" height="15" fill="rgb(221,106,17)" fg:x="346840545625" fg:w="3221312247"/><text x="99.2932%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (3,178,525,998 samples, 0.91%)</title><rect x="99.0555%" y="229" width="0.9077%" height="15" fill="rgb(251,142,44)" fg:x="346883331874" fg:w="3178525998"/><text x="99.3055%" y="239.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (3,178,525,998 samples, 0.91%)</title><rect x="99.0555%" y="213" width="0.9077%" height="15" fill="rgb(238,13,15)" fg:x="346883331874" fg:w="3178525998"/><text x="99.3055%" y="223.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (3,178,525,998 samples, 0.91%)</title><rect x="99.0555%" y="197" width="0.9077%" height="15" fill="rgb(208,107,27)" fg:x="346883331874" fg:w="3178525998"/><text x="99.3055%" y="207.50"></text></g><g><title>tanhf32x (3,158,349,779 samples, 0.90%)</title><rect x="99.0612%" y="181" width="0.9019%" height="15" fill="rgb(205,136,37)" fg:x="346903508093" fg:w="3158349779"/><text x="99.3112%" y="191.50"></text></g><g><title>[libm.so.6] (2,306,895,434 samples, 0.66%)</title><rect x="99.3044%" y="165" width="0.6588%" height="15" fill="rgb(250,205,27)" fg:x="347754962438" fg:w="2306895434"/><text x="99.5544%" y="175.50"></text></g><g><title>std::io::stdio::_print (41,243,563 samples, 0.01%)</title><rect x="99.9631%" y="389" width="0.0118%" height="15" fill="rgb(210,80,43)" fg:x="350061857872" fg:w="41243563"/><text x="100.2131%" y="399.50"></text></g><g><title>std::io::stdio::print_to (41,243,563 samples, 0.01%)</title><rect x="99.9631%" y="373" width="0.0118%" height="15" fill="rgb(247,160,36)" fg:x="350061857872" fg:w="41243563"/><text x="100.2131%" y="383.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit (350,077,185,950 samples, 99.97%)</title><rect x="0.0164%" y="405" width="99.9675%" height="15" fill="rgb(234,13,49)" fg:x="57583558" fg:w="350077185950"/><text x="0.2664%" y="415.50">rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit</text></g><g><title>_start (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="677" width="99.9708%" height="15" fill="rgb(234,122,0)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="687.50">_start</text></g><g><title>__libc_start_main (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="661" width="99.9708%" height="15" fill="rgb(207,146,38)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="671.50">__libc_start_main</text></g><g><title>[libc.so.6] (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="645" width="99.9708%" height="15" fill="rgb(207,177,25)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="655.50">[libc.so.6]</text></g><g><title>main (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="629" width="99.9708%" height="15" fill="rgb(211,178,42)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="613" width="99.9708%" height="15" fill="rgb(230,69,54)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="597" width="99.9708%" height="15" fill="rgb(214,135,41)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="581" width="99.9708%" height="15" fill="rgb(237,67,25)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="565" width="99.9708%" height="15" fill="rgb(222,189,50)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="549" width="99.9708%" height="15" fill="rgb(245,148,34)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="559.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="533" width="99.9708%" height="15" fill="rgb(222,29,6)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="517" width="99.9708%" height="15" fill="rgb(221,189,43)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="501" width="99.9708%" height="15" fill="rgb(207,36,27)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="485" width="99.9708%" height="15" fill="rgb(217,90,24)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="469" width="99.9708%" height="15" fill="rgb(224,66,35)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="479.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="453" width="99.9708%" height="15" fill="rgb(221,13,50)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="437" width="99.9708%" height="15" fill="rgb(236,68,49)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>main_benchmark::main (350,088,604,849 samples, 99.97%)</title><rect x="0.0142%" y="421" width="99.9708%" height="15" fill="rgb(229,146,28)" fg:x="49714052" fg:w="350088604849"/><text x="0.2642%" y="431.50">main_benchmark::main</text></g><g><title>all (350,191,013,353 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(225,31,38)" fg:x="0" fg:w="350191013353"/><text x="0.2500%" y="719.50"></text></g><g><title>main_benchmark (350,191,013,353 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(250,208,3)" fg:x="0" fg:w="350191013353"/><text x="0.2500%" y="703.50">main_benchmark</text></g></svg></svg>