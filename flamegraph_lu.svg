<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="94549087732"><g><title>[libfontconfig.so.1.14.0] (21,439,910 samples, 0.02%)</title><rect x="0.0093%" y="693" width="0.0227%" height="15" fill="rgb(227,0,7)" fg:x="8766264" fg:w="21439910"/><text x="0.2593%" y="703.50"></text></g><g><title>[libfontconfig.so.1.14.0] (21,439,910 samples, 0.02%)</title><rect x="0.0093%" y="677" width="0.0227%" height="15" fill="rgb(217,0,24)" fg:x="8766264" fg:w="21439910"/><text x="0.2593%" y="687.50"></text></g><g><title>XML_ParseBuffer (14,196,170 samples, 0.02%)</title><rect x="0.0169%" y="661" width="0.0150%" height="15" fill="rgb(221,193,54)" fg:x="16010004" fg:w="14196170"/><text x="0.2669%" y="671.50"></text></g><g><title>[libexpat.so.1.10.0] (14,196,170 samples, 0.02%)</title><rect x="0.0169%" y="645" width="0.0150%" height="15" fill="rgb(248,212,6)" fg:x="16010004" fg:w="14196170"/><text x="0.2669%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (16,796,195 samples, 0.02%)</title><rect x="0.0487%" y="405" width="0.0178%" height="15" fill="rgb(208,68,35)" fg:x="46027571" fg:w="16796195"/><text x="0.2987%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (16,796,195 samples, 0.02%)</title><rect x="0.0487%" y="389" width="0.0178%" height="15" fill="rgb(232,128,0)" fg:x="46027571" fg:w="16796195"/><text x="0.2987%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16,796,195 samples, 0.02%)</title><rect x="0.0487%" y="373" width="0.0178%" height="15" fill="rgb(207,160,47)" fg:x="46027571" fg:w="16796195"/><text x="0.2987%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (16,796,195 samples, 0.02%)</title><rect x="0.0487%" y="357" width="0.0178%" height="15" fill="rgb(228,23,34)" fg:x="46027571" fg:w="16796195"/><text x="0.2987%" y="367.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (423,261,981 samples, 0.45%)</title><rect x="0.0664%" y="405" width="0.4477%" height="15" fill="rgb(218,30,26)" fg:x="62823766" fg:w="423261981"/><text x="0.3164%" y="415.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (423,261,981 samples, 0.45%)</title><rect x="0.0664%" y="389" width="0.4477%" height="15" fill="rgb(220,122,19)" fg:x="62823766" fg:w="423261981"/><text x="0.3164%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (423,261,981 samples, 0.45%)</title><rect x="0.0664%" y="373" width="0.4477%" height="15" fill="rgb(250,228,42)" fg:x="62823766" fg:w="423261981"/><text x="0.3164%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (423,261,981 samples, 0.45%)</title><rect x="0.0664%" y="357" width="0.4477%" height="15" fill="rgb(240,193,28)" fg:x="62823766" fg:w="423261981"/><text x="0.3164%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (423,261,981 samples, 0.45%)</title><rect x="0.0664%" y="341" width="0.4477%" height="15" fill="rgb(216,20,37)" fg:x="62823766" fg:w="423261981"/><text x="0.3164%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (423,261,981 samples, 0.45%)</title><rect x="0.0664%" y="325" width="0.4477%" height="15" fill="rgb(206,188,39)" fg:x="62823766" fg:w="423261981"/><text x="0.3164%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (414,781,778 samples, 0.44%)</title><rect x="0.0754%" y="309" width="0.4387%" height="15" fill="rgb(217,207,13)" fg:x="71303969" fg:w="414781778"/><text x="0.3254%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (414,781,778 samples, 0.44%)</title><rect x="0.0754%" y="293" width="0.4387%" height="15" fill="rgb(231,73,38)" fg:x="71303969" fg:w="414781778"/><text x="0.3254%" y="303.50"></text></g><g><title>[libc.so.6] (414,781,778 samples, 0.44%)</title><rect x="0.0754%" y="277" width="0.4387%" height="15" fill="rgb(225,20,46)" fg:x="71303969" fg:w="414781778"/><text x="0.3254%" y="287.50"></text></g><g><title>[unknown] (135,134,911 samples, 0.14%)</title><rect x="0.3712%" y="261" width="0.1429%" height="15" fill="rgb(210,31,41)" fg:x="350950836" fg:w="135134911"/><text x="0.6212%" y="271.50"></text></g><g><title>[unknown] (33,010,221 samples, 0.03%)</title><rect x="0.4792%" y="245" width="0.0349%" height="15" fill="rgb(221,200,47)" fg:x="453075526" fg:w="33010221"/><text x="0.7292%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (372,840,018 samples, 0.39%)</title><rect x="0.5557%" y="373" width="0.3943%" height="15" fill="rgb(226,26,5)" fg:x="525408978" fg:w="372840018"/><text x="0.8057%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (323,431,691 samples, 0.34%)</title><rect x="0.6080%" y="357" width="0.3421%" height="15" fill="rgb(249,33,26)" fg:x="574817305" fg:w="323431691"/><text x="0.8580%" y="367.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (323,431,691 samples, 0.34%)</title><rect x="0.6080%" y="341" width="0.3421%" height="15" fill="rgb(235,183,28)" fg:x="574817305" fg:w="323431691"/><text x="0.8580%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (323,431,691 samples, 0.34%)</title><rect x="0.6080%" y="325" width="0.3421%" height="15" fill="rgb(221,5,38)" fg:x="574817305" fg:w="323431691"/><text x="0.8580%" y="335.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_row_slice (2,137,230,344 samples, 2.26%)</title><rect x="0.5557%" y="405" width="2.2604%" height="15" fill="rgb(247,18,42)" fg:x="525408978" fg:w="2137230344"/><text x="0.8057%" y="415.50">n..</text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_row_slice_generic (2,137,230,344 samples, 2.26%)</title><rect x="0.5557%" y="389" width="2.2604%" height="15" fill="rgb(241,131,45)" fg:x="525408978" fg:w="2137230344"/><text x="0.8057%" y="399.50">n..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,764,390,326 samples, 1.87%)</title><rect x="0.9500%" y="373" width="1.8661%" height="15" fill="rgb(249,31,29)" fg:x="898248996" fg:w="1764390326"/><text x="1.2000%" y="383.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,764,390,326 samples, 1.87%)</title><rect x="0.9500%" y="357" width="1.8661%" height="15" fill="rgb(225,111,53)" fg:x="898248996" fg:w="1764390326"/><text x="1.2000%" y="367.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,743,234,803 samples, 1.84%)</title><rect x="0.9724%" y="341" width="1.8437%" height="15" fill="rgb(238,160,17)" fg:x="919404519" fg:w="1743234803"/><text x="1.2224%" y="351.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (771,349,816 samples, 0.82%)</title><rect x="2.8161%" y="229" width="0.8158%" height="15" fill="rgb(214,148,48)" fg:x="2662639322" fg:w="771349816"/><text x="3.0661%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (771,349,816 samples, 0.82%)</title><rect x="2.8161%" y="213" width="0.8158%" height="15" fill="rgb(232,36,49)" fg:x="2662639322" fg:w="771349816"/><text x="3.0661%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (771,349,816 samples, 0.82%)</title><rect x="2.8161%" y="197" width="0.8158%" height="15" fill="rgb(209,103,24)" fg:x="2662639322" fg:w="771349816"/><text x="3.0661%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (771,349,816 samples, 0.82%)</title><rect x="2.8161%" y="181" width="0.8158%" height="15" fill="rgb(229,88,8)" fg:x="2662639322" fg:w="771349816"/><text x="3.0661%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (771,349,816 samples, 0.82%)</title><rect x="2.8161%" y="165" width="0.8158%" height="15" fill="rgb(213,181,19)" fg:x="2662639322" fg:w="771349816"/><text x="3.0661%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each::check::_{{closure}} (771,349,816 samples, 0.82%)</title><rect x="2.8161%" y="149" width="0.8158%" height="15" fill="rgb(254,191,54)" fg:x="2662639322" fg:w="771349816"/><text x="3.0661%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (771,349,816 samples, 0.82%)</title><rect x="2.8161%" y="133" width="0.8158%" height="15" fill="rgb(241,83,37)" fg:x="2662639322" fg:w="771349816"/><text x="3.0661%" y="143.50"></text></g><g><title>core::ptr::write (771,349,816 samples, 0.82%)</title><rect x="2.8161%" y="117" width="0.8158%" height="15" fill="rgb(233,36,39)" fg:x="2662639322" fg:w="771349816"/><text x="3.0661%" y="127.50"></text></g><g><title>[libc.so.6] (771,349,816 samples, 0.82%)</title><rect x="2.8161%" y="101" width="0.8158%" height="15" fill="rgb(226,3,54)" fg:x="2662639322" fg:w="771349816"/><text x="3.0661%" y="111.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::identity (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="405" width="0.8203%" height="15" fill="rgb(245,192,40)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="415.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::identity_generic (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="389" width="0.8203%" height="15" fill="rgb(238,167,29)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="399.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_diagonal_element_generic (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="373" width="0.8203%" height="15" fill="rgb(232,182,51)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="383.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::zeros_generic (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="357" width="0.8203%" height="15" fill="rgb(231,60,39)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="367.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_element_generic (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="341" width="0.8203%" height="15" fill="rgb(208,69,12)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="351.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator_generic (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="325" width="0.8203%" height="15" fill="rgb(235,93,37)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="335.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::allocate_from_iterator (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="309" width="0.8203%" height="15" fill="rgb(213,116,39)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="293" width="0.8203%" height="15" fill="rgb(222,207,29)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="277" width="0.8203%" height="15" fill="rgb(206,96,30)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="261" width="0.8203%" height="15" fill="rgb(218,138,4)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (775,539,744 samples, 0.82%)</title><rect x="2.8161%" y="245" width="0.8203%" height="15" fill="rgb(250,191,14)" fg:x="2662639322" fg:w="775539744"/><text x="3.0661%" y="255.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (4,306,556,173 samples, 4.55%)</title><rect x="3.6394%" y="373" width="4.5548%" height="15" fill="rgb(239,60,40)" fg:x="3441057514" fg:w="4306556173"/><text x="3.8894%" y="383.50">&lt;nalg..</text></g><g><title>[unknown] (193,452,889 samples, 0.20%)</title><rect x="7.9897%" y="357" width="0.2046%" height="15" fill="rgb(206,27,48)" fg:x="7554160798" fg:w="193452889"/><text x="8.2397%" y="367.50"></text></g><g><title>[unknown] (127,202,877 samples, 0.13%)</title><rect x="8.0597%" y="341" width="0.1345%" height="15" fill="rgb(225,35,8)" fg:x="7620410810" fg:w="127202877"/><text x="8.3097%" y="351.50"></text></g><g><title>[unknown] (21,009,963 samples, 0.02%)</title><rect x="8.1721%" y="325" width="0.0222%" height="15" fill="rgb(250,213,24)" fg:x="7726603724" fg:w="21009963"/><text x="8.4221%" y="335.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (1,015,175,894 samples, 1.07%)</title><rect x="8.1943%" y="373" width="1.0737%" height="15" fill="rgb(247,123,22)" fg:x="7747613687" fg:w="1015175894"/><text x="8.4443%" y="383.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (289,425,627 samples, 0.31%)</title><rect x="9.3465%" y="341" width="0.3061%" height="15" fill="rgb(231,138,38)" fg:x="8837069513" fg:w="289425627"/><text x="9.5965%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (289,425,627 samples, 0.31%)</title><rect x="9.3465%" y="325" width="0.3061%" height="15" fill="rgb(231,145,46)" fg:x="8837069513" fg:w="289425627"/><text x="9.5965%" y="335.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose (5,775,293,590 samples, 6.11%)</title><rect x="3.6364%" y="405" width="6.1082%" height="15" fill="rgb(251,118,11)" fg:x="3438179066" fg:w="5775293590"/><text x="3.8864%" y="415.50">nalgebra..</text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose_to_uninit (5,772,415,142 samples, 6.11%)</title><rect x="3.6394%" y="389" width="6.1052%" height="15" fill="rgb(217,147,25)" fg:x="3441057514" fg:w="5772415142"/><text x="3.8894%" y="399.50">nalgebra..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (450,683,075 samples, 0.48%)</title><rect x="9.2680%" y="373" width="0.4767%" height="15" fill="rgb(247,81,37)" fg:x="8762789581" fg:w="450683075"/><text x="9.5180%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (450,683,075 samples, 0.48%)</title><rect x="9.2680%" y="357" width="0.4767%" height="15" fill="rgb(209,12,38)" fg:x="8762789581" fg:w="450683075"/><text x="9.5180%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (86,977,516 samples, 0.09%)</title><rect x="9.6527%" y="341" width="0.0920%" height="15" fill="rgb(227,1,9)" fg:x="9126495140" fg:w="86977516"/><text x="9.9027%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (310,207,317 samples, 0.33%)</title><rect x="9.7492%" y="357" width="0.3281%" height="15" fill="rgb(248,47,43)" fg:x="9217752122" fg:w="310207317"/><text x="9.9992%" y="367.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (39,422,262 samples, 0.04%)</title><rect x="10.0773%" y="357" width="0.0417%" height="15" fill="rgb(221,10,30)" fg:x="9527959439" fg:w="39422262"/><text x="10.3273%" y="367.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (402,383,560 samples, 0.43%)</title><rect x="9.7446%" y="405" width="0.4256%" height="15" fill="rgb(210,229,1)" fg:x="9213472656" fg:w="402383560"/><text x="9.9946%" y="415.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (398,104,094 samples, 0.42%)</title><rect x="9.7492%" y="389" width="0.4211%" height="15" fill="rgb(222,148,37)" fg:x="9217752122" fg:w="398104094"/><text x="9.9992%" y="399.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (398,104,094 samples, 0.42%)</title><rect x="9.7492%" y="373" width="0.4211%" height="15" fill="rgb(234,67,33)" fg:x="9217752122" fg:w="398104094"/><text x="9.9992%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (48,474,515 samples, 0.05%)</title><rect x="10.1190%" y="357" width="0.0513%" height="15" fill="rgb(247,98,35)" fg:x="9567381701" fg:w="48474515"/><text x="10.3690%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (48,474,515 samples, 0.05%)</title><rect x="10.1190%" y="341" width="0.0513%" height="15" fill="rgb(247,138,52)" fg:x="9567381701" fg:w="48474515"/><text x="10.3690%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (48,474,515 samples, 0.05%)</title><rect x="10.1190%" y="325" width="0.0513%" height="15" fill="rgb(213,79,30)" fg:x="9567381701" fg:w="48474515"/><text x="10.3690%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (48,474,515 samples, 0.05%)</title><rect x="10.1190%" y="309" width="0.0513%" height="15" fill="rgb(246,177,23)" fg:x="9567381701" fg:w="48474515"/><text x="10.3690%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,447,332,568 samples, 1.53%)</title><rect x="10.3304%" y="341" width="1.5308%" height="15" fill="rgb(230,62,27)" fg:x="9767280210" fg:w="1447332568"/><text x="10.5804%" y="351.50"></text></g><g><title>[unknown] (59,689,481 samples, 0.06%)</title><rect x="11.7980%" y="325" width="0.0631%" height="15" fill="rgb(216,154,8)" fg:x="11154923297" fg:w="59689481"/><text x="12.0480%" y="335.50"></text></g><g><title>[unknown] (20,475,208 samples, 0.02%)</title><rect x="11.8395%" y="309" width="0.0217%" height="15" fill="rgb(244,35,45)" fg:x="11194137570" fg:w="20475208"/><text x="12.0895%" y="319.50"></text></g><g><title>matrixmultiply::gemm::pack (1,618,370,910 samples, 1.71%)</title><rect x="10.1825%" y="357" width="1.7117%" height="15" fill="rgb(251,115,12)" fg:x="9627423860" fg:w="1618370910"/><text x="10.4325%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (31,181,992 samples, 0.03%)</title><rect x="11.8612%" y="341" width="0.0330%" height="15" fill="rgb(240,54,50)" fg:x="11214612778" fg:w="31181992"/><text x="12.1112%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (31,181,992 samples, 0.03%)</title><rect x="11.8612%" y="325" width="0.0330%" height="15" fill="rgb(233,84,52)" fg:x="11214612778" fg:w="31181992"/><text x="12.1112%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (31,181,992 samples, 0.03%)</title><rect x="11.8612%" y="309" width="0.0330%" height="15" fill="rgb(207,117,47)" fg:x="11214612778" fg:w="31181992"/><text x="12.1112%" y="319.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (18,569,524,101 samples, 19.64%)</title><rect x="13.7169%" y="229" width="19.6401%" height="15" fill="rgb(249,43,39)" fg:x="12969159679" fg:w="18569524101"/><text x="13.9669%" y="239.50">&lt;matrixmultiply::x86::FusedMulA..</text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (18,569,524,101 samples, 19.64%)</title><rect x="13.7169%" y="213" width="19.6401%" height="15" fill="rgb(209,38,44)" fg:x="12969159679" fg:w="18569524101"/><text x="13.9669%" y="223.50">core::core_arch::x86::fma::_mm2..</text></g><g><title>core::core_arch::x86::avx::_mm256_blend_pd (89,359,914 samples, 0.09%)</title><rect x="33.3569%" y="229" width="0.0945%" height="15" fill="rgb(236,212,23)" fg:x="31538684533" fg:w="89359914"/><text x="33.6069%" y="239.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_broadcast_sd (23,202,208 samples, 0.02%)</title><rect x="33.4515%" y="229" width="0.0245%" height="15" fill="rgb(242,79,21)" fg:x="31628044447" fg:w="23202208"/><text x="33.7015%" y="239.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set1_pd (23,202,208 samples, 0.02%)</title><rect x="33.4515%" y="213" width="0.0245%" height="15" fill="rgb(211,96,35)" fg:x="31628044447" fg:w="23202208"/><text x="33.7015%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_pd (23,202,208 samples, 0.02%)</title><rect x="33.4515%" y="197" width="0.0245%" height="15" fill="rgb(253,215,40)" fg:x="31628044447" fg:w="23202208"/><text x="33.7015%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (5,698,105,515 samples, 6.03%)</title><rect x="33.4760%" y="229" width="6.0266%" height="15" fill="rgb(211,81,21)" fg:x="31651246655" fg:w="5698105515"/><text x="33.7260%" y="239.50">core::co..</text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_pd (244,767,084 samples, 0.26%)</title><rect x="39.5026%" y="229" width="0.2589%" height="15" fill="rgb(208,190,38)" fg:x="37349352170" fg:w="244767084"/><text x="39.7526%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (244,767,084 samples, 0.26%)</title><rect x="39.5026%" y="213" width="0.2589%" height="15" fill="rgb(235,213,38)" fg:x="37349352170" fg:w="244767084"/><text x="39.7526%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_mul_pd (83,322,598 samples, 0.09%)</title><rect x="39.7615%" y="229" width="0.0881%" height="15" fill="rgb(237,122,38)" fg:x="37594119254" fg:w="83322598"/><text x="40.0115%" y="239.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_pd (534,331,451 samples, 0.57%)</title><rect x="39.8496%" y="229" width="0.5651%" height="15" fill="rgb(244,218,35)" fg:x="37677441852" fg:w="534331451"/><text x="40.0996%" y="239.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_shuffle_pd (702,441,676 samples, 0.74%)</title><rect x="40.4147%" y="229" width="0.7429%" height="15" fill="rgb(240,68,47)" fg:x="38211773303" fg:w="702441676"/><text x="40.6647%" y="239.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (287,070,612 samples, 0.30%)</title><rect x="41.1577%" y="229" width="0.3036%" height="15" fill="rgb(210,16,53)" fg:x="38914214979" fg:w="287070612"/><text x="41.4077%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (287,070,612 samples, 0.30%)</title><rect x="41.1577%" y="213" width="0.3036%" height="15" fill="rgb(235,124,12)" fg:x="38914214979" fg:w="287070612"/><text x="41.4077%" y="223.50"></text></g><g><title>core::ptr::write_unaligned (287,070,612 samples, 0.30%)</title><rect x="41.1577%" y="197" width="0.3036%" height="15" fill="rgb(224,169,11)" fg:x="38914214979" fg:w="287070612"/><text x="41.4077%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (287,070,612 samples, 0.30%)</title><rect x="41.1577%" y="181" width="0.3036%" height="15" fill="rgb(250,166,2)" fg:x="38914214979" fg:w="287070612"/><text x="41.4077%" y="191.50"></text></g><g><title>[unknown] (101,942,853 samples, 0.11%)</title><rect x="41.3535%" y="165" width="0.1078%" height="15" fill="rgb(242,216,29)" fg:x="39099342738" fg:w="101942853"/><text x="41.6035%" y="175.50"></text></g><g><title>[unknown] (36,078,516 samples, 0.04%)</title><rect x="41.4231%" y="149" width="0.0382%" height="15" fill="rgb(230,116,27)" fg:x="39165207075" fg:w="36078516"/><text x="41.6731%" y="159.50"></text></g><g><title>[unknown] (9,871,975 samples, 0.01%)</title><rect x="41.4509%" y="133" width="0.0104%" height="15" fill="rgb(228,99,48)" fg:x="39191413616" fg:w="9871975"/><text x="41.7009%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (145,270,638 samples, 0.15%)</title><rect x="41.4613%" y="229" width="0.1536%" height="15" fill="rgb(253,11,6)" fg:x="39201285591" fg:w="145270638"/><text x="41.7113%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (145,270,638 samples, 0.15%)</title><rect x="41.4613%" y="213" width="0.1536%" height="15" fill="rgb(247,143,39)" fg:x="39201285591" fg:w="145270638"/><text x="41.7113%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (48,154,969 samples, 0.05%)</title><rect x="41.5640%" y="197" width="0.0509%" height="15" fill="rgb(236,97,10)" fg:x="39298401260" fg:w="48154969"/><text x="41.8140%" y="207.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (28,129,714,423 samples, 29.75%)</title><rect x="11.9321%" y="277" width="29.7514%" height="15" fill="rgb(233,208,19)" fg:x="11281703456" fg:w="28129714423"/><text x="12.1821%" y="287.50">&lt;matrixmultiply::dgemm_kernel::KernelFma as matr..</text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (28,094,504,634 samples, 29.71%)</title><rect x="11.9694%" y="261" width="29.7142%" height="15" fill="rgb(216,164,2)" fg:x="11316913245" fg:w="28094504634"/><text x="12.2194%" y="271.50">matrixmultiply::dgemm_kernel::kernel_target_fma</text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (28,012,505,835 samples, 29.63%)</title><rect x="12.0561%" y="245" width="29.6275%" height="15" fill="rgb(220,129,5)" fg:x="11398912044" fg:w="28012505835"/><text x="12.3061%" y="255.50">matrixmultiply::dgemm_kernel::kernel_x86_avx</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (64,861,650 samples, 0.07%)</title><rect x="41.6150%" y="229" width="0.0686%" height="15" fill="rgb(242,17,10)" fg:x="39346556229" fg:w="64861650"/><text x="41.8650%" y="239.50"></text></g><g><title>&lt;matrixmultiply::util::RangeChunk as core::iter::traits::iterator::Iterator&gt;::next (11,427,832 samples, 0.01%)</title><rect x="41.6836%" y="277" width="0.0121%" height="15" fill="rgb(242,107,0)" fg:x="39411417879" fg:w="11427832"/><text x="41.9336%" y="287.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (358,100,899 samples, 0.38%)</title><rect x="41.7220%" y="213" width="0.3787%" height="15" fill="rgb(251,28,31)" fg:x="39447775318" fg:w="358100899"/><text x="41.9720%" y="223.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (358,100,899 samples, 0.38%)</title><rect x="41.7220%" y="197" width="0.3787%" height="15" fill="rgb(233,223,10)" fg:x="39447775318" fg:w="358100899"/><text x="41.9720%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (109,195,797 samples, 0.12%)</title><rect x="42.1052%" y="213" width="0.1155%" height="15" fill="rgb(215,21,27)" fg:x="39810104920" fg:w="109195797"/><text x="42.3552%" y="223.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (511,687,697 samples, 0.54%)</title><rect x="41.6999%" y="261" width="0.5412%" height="15" fill="rgb(232,23,21)" fg:x="39426852387" fg:w="511687697"/><text x="41.9499%" y="271.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (511,687,697 samples, 0.54%)</title><rect x="41.6999%" y="245" width="0.5412%" height="15" fill="rgb(244,5,23)" fg:x="39426852387" fg:w="511687697"/><text x="41.9499%" y="255.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (511,687,697 samples, 0.54%)</title><rect x="41.6999%" y="229" width="0.5412%" height="15" fill="rgb(226,81,46)" fg:x="39426852387" fg:w="511687697"/><text x="41.9499%" y="239.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_shuffle_pd (19,239,367 samples, 0.02%)</title><rect x="42.2207%" y="213" width="0.0203%" height="15" fill="rgb(247,70,30)" fg:x="39919300717" fg:w="19239367"/><text x="42.4707%" y="223.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (523,739,878 samples, 0.55%)</title><rect x="41.6956%" y="277" width="0.5539%" height="15" fill="rgb(212,68,19)" fg:x="39422845711" fg:w="523739878"/><text x="41.9456%" y="287.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (28,700,238,408 samples, 30.35%)</title><rect x="11.8986%" y="325" width="30.3549%" height="15" fill="rgb(240,187,13)" fg:x="11249976537" fg:w="28700238408"/><text x="12.1486%" y="335.50">matrixmultiply::gemm::gemm_packed</text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (28,700,238,408 samples, 30.35%)</title><rect x="11.8986%" y="309" width="30.3549%" height="15" fill="rgb(223,113,26)" fg:x="11249976537" fg:w="28700238408"/><text x="12.1486%" y="319.50">matrixmultiply::threading::RangeChunkParallel&lt;G&gt;:..</text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (28,692,193,414 samples, 30.35%)</title><rect x="11.9071%" y="293" width="30.3463%" height="15" fill="rgb(206,192,2)" fg:x="11258021531" fg:w="28692193414"/><text x="12.1571%" y="303.50">matrixmultiply::gemm::gemm_packed::_{{closure}}</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,290,967,037 samples, 2.42%)</title><rect x="42.2869%" y="309" width="2.4230%" height="15" fill="rgb(241,108,4)" fg:x="39981918877" fg:w="2290967037"/><text x="42.5369%" y="319.50">co..</text></g><g><title>matrixmultiply::gemm::gemm_loop (32,682,210,792 samples, 34.57%)</title><rect x="10.1790%" y="373" width="34.5664%" height="15" fill="rgb(247,173,49)" fg:x="9624183625" fg:w="32682210792"/><text x="10.4290%" y="383.50">matrixmultiply::gemm::gemm_loop</text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (31,060,599,647 samples, 32.85%)</title><rect x="11.8941%" y="357" width="32.8513%" height="15" fill="rgb(224,114,35)" fg:x="11245794770" fg:w="31060599647"/><text x="12.1441%" y="367.50">matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for..</text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (31,056,417,880 samples, 32.85%)</title><rect x="11.8986%" y="341" width="32.8469%" height="15" fill="rgb(245,159,27)" fg:x="11249976537" fg:w="31056417880"/><text x="12.1486%" y="351.50">matrixmultiply::gemm::gemm_loop::_{{closure}}</text></g><g><title>matrixmultiply::gemm::pack (2,356,179,472 samples, 2.49%)</title><rect x="42.2534%" y="325" width="2.4920%" height="15" fill="rgb(245,172,44)" fg:x="39950214945" fg:w="2356179472"/><text x="42.5034%" y="335.50">ma..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (33,508,503 samples, 0.04%)</title><rect x="44.7100%" y="309" width="0.0354%" height="15" fill="rgb(236,23,11)" fg:x="42272885914" fg:w="33508503"/><text x="44.9600%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (33,508,503 samples, 0.04%)</title><rect x="44.7100%" y="293" width="0.0354%" height="15" fill="rgb(205,117,38)" fg:x="42272885914" fg:w="33508503"/><text x="44.9600%" y="303.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (21,247,189 samples, 0.02%)</title><rect x="44.7230%" y="277" width="0.0225%" height="15" fill="rgb(237,72,25)" fg:x="42285147228" fg:w="21247189"/><text x="44.9730%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (21,247,189 samples, 0.02%)</title><rect x="44.7230%" y="261" width="0.0225%" height="15" fill="rgb(244,70,9)" fg:x="42285147228" fg:w="21247189"/><text x="44.9730%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (104,274,881 samples, 0.11%)</title><rect x="44.8170%" y="325" width="0.1103%" height="15" fill="rgb(217,125,39)" fg:x="42374039558" fg:w="104274881"/><text x="45.0670%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (72,392,617 samples, 0.08%)</title><rect x="44.9273%" y="325" width="0.0766%" height="15" fill="rgb(235,36,10)" fg:x="42478314439" fg:w="72392617"/><text x="45.1773%" y="335.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (146,009,332 samples, 0.15%)</title><rect x="45.0038%" y="325" width="0.1544%" height="15" fill="rgb(251,123,47)" fg:x="42550707056" fg:w="146009332"/><text x="45.2538%" y="335.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (33,184,074,964 samples, 35.10%)</title><rect x="10.1702%" y="389" width="35.0972%" height="15" fill="rgb(221,13,13)" fg:x="9615856216" fg:w="33184074964"/><text x="10.4202%" y="399.50">nalgebra::base::blas_uninit::gemm_uninit</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (493,536,763 samples, 0.52%)</title><rect x="44.7454%" y="373" width="0.5220%" height="15" fill="rgb(238,131,9)" fg:x="42306394417" fg:w="493536763"/><text x="44.9954%" y="383.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (493,536,763 samples, 0.52%)</title><rect x="44.7454%" y="357" width="0.5220%" height="15" fill="rgb(211,50,8)" fg:x="42306394417" fg:w="493536763"/><text x="44.9954%" y="367.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (493,536,763 samples, 0.52%)</title><rect x="44.7454%" y="341" width="0.5220%" height="15" fill="rgb(245,182,24)" fg:x="42306394417" fg:w="493536763"/><text x="44.9954%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (103,214,792 samples, 0.11%)</title><rect x="45.1583%" y="325" width="0.1092%" height="15" fill="rgb(242,14,37)" fg:x="42696716388" fg:w="103214792"/><text x="45.4083%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (103,214,792 samples, 0.11%)</title><rect x="45.1583%" y="309" width="0.1092%" height="15" fill="rgb(246,228,12)" fg:x="42696716388" fg:w="103214792"/><text x="45.4083%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (103,214,792 samples, 0.11%)</title><rect x="45.1583%" y="293" width="0.1092%" height="15" fill="rgb(213,55,15)" fg:x="42696716388" fg:w="103214792"/><text x="45.4083%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (103,214,792 samples, 0.11%)</title><rect x="45.1583%" y="277" width="0.1092%" height="15" fill="rgb(209,9,3)" fg:x="42696716388" fg:w="103214792"/><text x="45.4083%" y="287.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (33,187,986,534 samples, 35.10%)</title><rect x="10.1702%" y="405" width="35.1013%" height="15" fill="rgb(230,59,30)" fg:x="9615856216" fg:w="33187986534"/><text x="10.4202%" y="415.50">nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebr..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;f64,R,C,S&gt;&gt; for f64&gt;::mul (493,624,203 samples, 0.52%)</title><rect x="45.2716%" y="405" width="0.5221%" height="15" fill="rgb(209,121,21)" fg:x="42803842750" fg:w="493624203"/><text x="45.5216%" y="415.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Neg for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::neg (21,236,519 samples, 0.02%)</title><rect x="45.7936%" y="405" width="0.0225%" height="15" fill="rgb(220,109,13)" fg:x="43297466953" fg:w="21236519"/><text x="46.0436%" y="415.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::neg_mut (21,236,519 samples, 0.02%)</title><rect x="45.7936%" y="389" width="0.0225%" height="15" fill="rgb(232,18,1)" fg:x="43297466953" fg:w="21236519"/><text x="46.0436%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Neg&gt;::neg (21,236,519 samples, 0.02%)</title><rect x="45.7936%" y="373" width="0.0225%" height="15" fill="rgb(215,41,42)" fg:x="43297466953" fg:w="21236519"/><text x="46.0436%" y="383.50"></text></g><g><title>core::intrinsics::copy (76,386,752 samples, 0.08%)</title><rect x="45.8328%" y="293" width="0.0808%" height="15" fill="rgb(224,123,36)" fg:x="43334482120" fg:w="76386752"/><text x="46.0828%" y="303.50"></text></g><g><title>nalgebra::base::edition::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::swap_rows (88,647,417 samples, 0.09%)</title><rect x="45.8283%" y="373" width="0.0938%" height="15" fill="rgb(240,125,3)" fg:x="43330237689" fg:w="88647417"/><text x="46.0783%" y="383.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::swap_unchecked (84,402,986 samples, 0.09%)</title><rect x="45.8328%" y="357" width="0.0893%" height="15" fill="rgb(205,98,50)" fg:x="43334482120" fg:w="84402986"/><text x="46.0828%" y="367.50"></text></g><g><title>nalgebra::base::storage::RawStorageMut::swap_unchecked (84,402,986 samples, 0.09%)</title><rect x="45.8328%" y="341" width="0.0893%" height="15" fill="rgb(205,185,37)" fg:x="43334482120" fg:w="84402986"/><text x="46.0828%" y="351.50"></text></g><g><title>nalgebra::base::storage::RawStorageMut::swap_unchecked_linear (84,402,986 samples, 0.09%)</title><rect x="45.8328%" y="325" width="0.0893%" height="15" fill="rgb(238,207,15)" fg:x="43334482120" fg:w="84402986"/><text x="46.0828%" y="335.50"></text></g><g><title>core::ptr::swap (84,402,986 samples, 0.09%)</title><rect x="45.8328%" y="309" width="0.0893%" height="15" fill="rgb(213,199,42)" fg:x="43334482120" fg:w="84402986"/><text x="46.0828%" y="319.50"></text></g><g><title>nalgebra::base::min_max::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::icamax (231,296,427 samples, 0.24%)</title><rect x="45.9221%" y="373" width="0.2446%" height="15" fill="rgb(235,201,11)" fg:x="43418885106" fg:w="231296427"/><text x="46.1721%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (126,433,533 samples, 0.13%)</title><rect x="46.0330%" y="357" width="0.1337%" height="15" fill="rgb(207,46,11)" fg:x="43523748000" fg:w="126433533"/><text x="46.2830%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (126,433,533 samples, 0.13%)</title><rect x="46.0330%" y="341" width="0.1337%" height="15" fill="rgb(241,35,35)" fg:x="43523748000" fg:w="126433533"/><text x="46.2830%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (126,433,533 samples, 0.13%)</title><rect x="46.0330%" y="325" width="0.1337%" height="15" fill="rgb(243,32,47)" fg:x="43523748000" fg:w="126433533"/><text x="46.2830%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (126,433,533 samples, 0.13%)</title><rect x="46.0330%" y="309" width="0.1337%" height="15" fill="rgb(247,202,23)" fg:x="43523748000" fg:w="126433533"/><text x="46.2830%" y="319.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (418,412,444 samples, 0.44%)</title><rect x="46.1667%" y="357" width="0.4425%" height="15" fill="rgb(219,102,11)" fg:x="43650181533" fg:w="418412444"/><text x="46.4167%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (79,671,999 samples, 0.08%)</title><rect x="46.6092%" y="357" width="0.0843%" height="15" fill="rgb(243,110,44)" fg:x="44068593977" fg:w="79671999"/><text x="46.8592%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (79,671,999 samples, 0.08%)</title><rect x="46.6092%" y="341" width="0.0843%" height="15" fill="rgb(222,74,54)" fg:x="44068593977" fg:w="79671999"/><text x="46.8592%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (20,386,124 samples, 0.02%)</title><rect x="46.6719%" y="325" width="0.0216%" height="15" fill="rgb(216,99,12)" fg:x="44127879852" fg:w="20386124"/><text x="46.9219%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (20,386,124 samples, 0.02%)</title><rect x="46.6719%" y="309" width="0.0216%" height="15" fill="rgb(226,22,26)" fg:x="44127879852" fg:w="20386124"/><text x="46.9219%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (13,370,721,704 samples, 14.14%)</title><rect x="53.1920%" y="293" width="14.1416%" height="15" fill="rgb(217,163,10)" fg:x="50292543343" fg:w="13370721704"/><text x="53.4420%" y="303.50">&lt;f64 as core::ops::ar..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (3,010,207,828 samples, 3.18%)</title><rect x="67.3336%" y="293" width="3.1838%" height="15" fill="rgb(213,25,53)" fg:x="63663265047" fg:w="3010207828"/><text x="67.5836%" y="303.50">cor..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (8,639,745,877 samples, 9.14%)</title><rect x="70.6322%" y="261" width="9.1378%" height="15" fill="rgb(252,105,26)" fg:x="66782124030" fg:w="8639745877"/><text x="70.8822%" y="271.50">&lt;usize as cor..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (8,639,745,877 samples, 9.14%)</title><rect x="70.6322%" y="245" width="9.1378%" height="15" fill="rgb(220,39,43)" fg:x="66782124030" fg:w="8639745877"/><text x="70.8822%" y="255.50">core::num::&lt;i..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (31,290,550,304 samples, 33.09%)</title><rect x="46.6935%" y="357" width="33.0945%" height="15" fill="rgb(229,68,48)" fg:x="44148265976" fg:w="31290550304"/><text x="46.9435%" y="367.50">nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Ma..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (31,290,550,304 samples, 33.09%)</title><rect x="46.6935%" y="341" width="33.0945%" height="15" fill="rgb(252,8,32)" fg:x="44148265976" fg:w="31290550304"/><text x="46.9435%" y="351.50">nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Ma..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (31,290,550,304 samples, 33.09%)</title><rect x="46.6935%" y="325" width="33.0945%" height="15" fill="rgb(223,20,43)" fg:x="44148265976" fg:w="31290550304"/><text x="46.9435%" y="335.50">nalgebra::base::blas_uninit::axcpy_uninit</text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (31,290,550,304 samples, 33.09%)</title><rect x="46.6935%" y="309" width="33.0945%" height="15" fill="rgb(229,81,49)" fg:x="44148265976" fg:w="31290550304"/><text x="46.9435%" y="319.50">nalgebra::base::blas_uninit::array_axcpy</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8,765,343,405 samples, 9.27%)</title><rect x="70.5173%" y="293" width="9.2707%" height="15" fill="rgb(236,28,36)" fg:x="66673472875" fg:w="8765343405"/><text x="70.7673%" y="303.50">core::iter::r..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8,765,343,405 samples, 9.27%)</title><rect x="70.5173%" y="277" width="9.2707%" height="15" fill="rgb(249,185,26)" fg:x="66673472875" fg:w="8765343405"/><text x="70.7673%" y="287.50">&lt;core::ops::r..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (16,946,373 samples, 0.02%)</title><rect x="79.7701%" y="261" width="0.0179%" height="15" fill="rgb(249,174,33)" fg:x="75421869907" fg:w="16946373"/><text x="80.0201%" y="271.50"></text></g><g><title>nalgebra::base::matrix_view::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::column_mut (38,669,475 samples, 0.04%)</title><rect x="79.7880%" y="357" width="0.0409%" height="15" fill="rgb(233,201,37)" fg:x="75438816280" fg:w="38669475"/><text x="80.0380%" y="367.50"></text></g><g><title>nalgebra::base::matrix_view::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::fixed_columns_mut (38,669,475 samples, 0.04%)</title><rect x="79.7880%" y="341" width="0.0409%" height="15" fill="rgb(221,78,26)" fg:x="75438816280" fg:w="38669475"/><text x="80.0380%" y="351.50"></text></g><g><title>nalgebra::base::matrix_view::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::columns_generic_mut (38,669,475 samples, 0.04%)</title><rect x="79.7880%" y="325" width="0.0409%" height="15" fill="rgb(250,127,30)" fg:x="75438816280" fg:w="38669475"/><text x="80.0380%" y="335.50"></text></g><g><title>nalgebra::base::matrix_view::ViewStorageMut&lt;T,R,C,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;::new_unchecked (38,669,475 samples, 0.04%)</title><rect x="79.7880%" y="309" width="0.0409%" height="15" fill="rgb(230,49,44)" fg:x="75438816280" fg:w="38669475"/><text x="80.0380%" y="319.50"></text></g><g><title>nalgebra::base::matrix_view::ViewStorageMut&lt;T,R,C,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;::new_with_strides_unchecked (38,669,475 samples, 0.04%)</title><rect x="79.7880%" y="293" width="0.0409%" height="15" fill="rgb(229,67,23)" fg:x="75438816280" fg:w="38669475"/><text x="80.0380%" y="303.50"></text></g><g><title>nalgebra::base::storage::RawStorageMut::get_address_unchecked_mut (38,669,475 samples, 0.04%)</title><rect x="79.7880%" y="277" width="0.0409%" height="15" fill="rgb(249,83,47)" fg:x="75438816280" fg:w="38669475"/><text x="80.0380%" y="287.50"></text></g><g><title>nalgebra::base::storage::RawStorage::linear_index (38,669,475 samples, 0.04%)</title><rect x="79.7880%" y="261" width="0.0409%" height="15" fill="rgb(215,43,3)" fg:x="75438816280" fg:w="38669475"/><text x="80.0380%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::MulAssign&gt;::mul_assign (55,505,348 samples, 0.06%)</title><rect x="79.8289%" y="341" width="0.0587%" height="15" fill="rgb(238,154,13)" fg:x="75477485755" fg:w="55505348"/><text x="80.0789%" y="351.50"></text></g><g><title>nalgebra::linalg::lu::gauss_step (31,930,148,251 samples, 33.77%)</title><rect x="46.1667%" y="373" width="33.7710%" height="15" fill="rgb(219,56,2)" fg:x="43650181533" fg:w="31930148251"/><text x="46.4167%" y="383.50">nalgebra::linalg::lu::gauss_step</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::MulAssign&lt;T&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::mul_assign (102,844,029 samples, 0.11%)</title><rect x="79.8289%" y="357" width="0.1088%" height="15" fill="rgb(233,0,4)" fg:x="75477485755" fg:w="102844029"/><text x="80.0789%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (47,338,681 samples, 0.05%)</title><rect x="79.8876%" y="341" width="0.0501%" height="15" fill="rgb(235,30,7)" fg:x="75532991103" fg:w="47338681"/><text x="80.1376%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (47,338,681 samples, 0.05%)</title><rect x="79.8876%" y="325" width="0.0501%" height="15" fill="rgb(250,79,13)" fg:x="75532991103" fg:w="47338681"/><text x="80.1376%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (43,126,115 samples, 0.05%)</title><rect x="79.8920%" y="309" width="0.0456%" height="15" fill="rgb(211,146,34)" fg:x="75537203669" fg:w="43126115"/><text x="80.1420%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (43,126,115 samples, 0.05%)</title><rect x="79.8920%" y="293" width="0.0456%" height="15" fill="rgb(228,22,38)" fg:x="75537203669" fg:w="43126115"/><text x="80.1420%" y="303.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (49,524,919 samples, 0.05%)</title><rect x="79.9377%" y="357" width="0.0524%" height="15" fill="rgb(235,168,5)" fg:x="75580329784" fg:w="49524919"/><text x="80.1877%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (19,272,685 samples, 0.02%)</title><rect x="79.9900%" y="357" width="0.0204%" height="15" fill="rgb(221,155,16)" fg:x="75629854703" fg:w="19272685"/><text x="80.2400%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (19,272,685 samples, 0.02%)</title><rect x="79.9900%" y="341" width="0.0204%" height="15" fill="rgb(215,215,53)" fg:x="75629854703" fg:w="19272685"/><text x="80.2400%" y="351.50"></text></g><g><title>core::mem::swap (55,196,777 samples, 0.06%)</title><rect x="80.0104%" y="357" width="0.0584%" height="15" fill="rgb(223,4,10)" fg:x="75649127388" fg:w="55196777"/><text x="80.2604%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (2,001,420,598 samples, 2.12%)</title><rect x="81.1087%" y="293" width="2.1168%" height="15" fill="rgb(234,103,6)" fg:x="76687517426" fg:w="2001420598"/><text x="81.3587%" y="303.50">&lt;..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (460,817,960 samples, 0.49%)</title><rect x="83.2255%" y="293" width="0.4874%" height="15" fill="rgb(227,97,0)" fg:x="78688938024" fg:w="460817960"/><text x="83.4755%" y="303.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (4,712,245,552 samples, 4.98%)</title><rect x="80.0688%" y="357" width="4.9839%" height="15" fill="rgb(234,150,53)" fg:x="75704324165" fg:w="4712245552"/><text x="80.3188%" y="367.50">nalgeb..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (4,712,245,552 samples, 4.98%)</title><rect x="80.0688%" y="341" width="4.9839%" height="15" fill="rgb(228,201,54)" fg:x="75704324165" fg:w="4712245552"/><text x="80.3188%" y="351.50">nalgeb..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (4,712,245,552 samples, 4.98%)</title><rect x="80.0688%" y="325" width="4.9839%" height="15" fill="rgb(222,22,37)" fg:x="75704324165" fg:w="4712245552"/><text x="80.3188%" y="335.50">nalgeb..</text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (4,712,245,552 samples, 4.98%)</title><rect x="80.0688%" y="309" width="4.9839%" height="15" fill="rgb(237,53,32)" fg:x="75704324165" fg:w="4712245552"/><text x="80.3188%" y="319.50">nalgeb..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,266,813,733 samples, 1.34%)</title><rect x="83.7129%" y="293" width="1.3398%" height="15" fill="rgb(233,25,53)" fg:x="79149755984" fg:w="1266813733"/><text x="83.9629%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,266,813,733 samples, 1.34%)</title><rect x="83.7129%" y="277" width="1.3398%" height="15" fill="rgb(210,40,34)" fg:x="79149755984" fg:w="1266813733"/><text x="83.9629%" y="287.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,246,176,022 samples, 1.32%)</title><rect x="83.7347%" y="261" width="1.3180%" height="15" fill="rgb(241,220,44)" fg:x="79170393695" fg:w="1246176022"/><text x="83.9847%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,246,176,022 samples, 1.32%)</title><rect x="83.7347%" y="245" width="1.3180%" height="15" fill="rgb(235,28,35)" fg:x="79170393695" fg:w="1246176022"/><text x="83.9847%" y="255.50"></text></g><g><title>nalgebra::linalg::lu::gauss_step_swap (4,844,023,655 samples, 5.12%)</title><rect x="79.9377%" y="373" width="5.1233%" height="15" fill="rgb(210,56,17)" fg:x="75580329784" fg:w="4844023655"/><text x="80.1877%" y="383.50">nalgeb..</text></g><g><title>nalgebra::linalg::decomposition::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::lu (37,113,535,352 samples, 39.25%)</title><rect x="45.8161%" y="405" width="39.2532%" height="15" fill="rgb(224,130,29)" fg:x="43318703472" fg:w="37113535352"/><text x="46.0661%" y="415.50">nalgebra::linalg::decomposition::&lt;impl nalgebra::base::matrix::M..</text></g><g><title>nalgebra::linalg::lu::LU&lt;T,R,C&gt;::new (37,113,535,352 samples, 39.25%)</title><rect x="45.8161%" y="389" width="39.2532%" height="15" fill="rgb(235,212,8)" fg:x="43318703472" fg:w="37113535352"/><text x="46.0661%" y="399.50">nalgebra::linalg::lu::LU&lt;T,R,C&gt;::new</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (61,465,883 samples, 0.07%)</title><rect x="85.1033%" y="293" width="0.0650%" height="15" fill="rgb(223,33,50)" fg:x="80464357582" fg:w="61465883"/><text x="85.3533%" y="303.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (83,200,978 samples, 0.09%)</title><rect x="85.1683%" y="293" width="0.0880%" height="15" fill="rgb(219,149,13)" fg:x="80525823465" fg:w="83200978"/><text x="85.4183%" y="303.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::solve_lower_triangular_with_diag_mut (198,435,837 samples, 0.21%)</title><rect x="85.0693%" y="373" width="0.2099%" height="15" fill="rgb(250,156,29)" fg:x="80432238824" fg:w="198435837"/><text x="85.3193%" y="383.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (198,435,837 samples, 0.21%)</title><rect x="85.0693%" y="357" width="0.2099%" height="15" fill="rgb(216,193,19)" fg:x="80432238824" fg:w="198435837"/><text x="85.3193%" y="367.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (198,435,837 samples, 0.21%)</title><rect x="85.0693%" y="341" width="0.2099%" height="15" fill="rgb(216,135,14)" fg:x="80432238824" fg:w="198435837"/><text x="85.3193%" y="351.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (198,435,837 samples, 0.21%)</title><rect x="85.0693%" y="325" width="0.2099%" height="15" fill="rgb(241,47,5)" fg:x="80432238824" fg:w="198435837"/><text x="85.3193%" y="335.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (198,435,837 samples, 0.21%)</title><rect x="85.0693%" y="309" width="0.2099%" height="15" fill="rgb(233,42,35)" fg:x="80432238824" fg:w="198435837"/><text x="85.3193%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (21,650,218 samples, 0.02%)</title><rect x="85.2563%" y="293" width="0.0229%" height="15" fill="rgb(231,13,6)" fg:x="80609024443" fg:w="21650218"/><text x="85.5063%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (21,650,218 samples, 0.02%)</title><rect x="85.2563%" y="277" width="0.0229%" height="15" fill="rgb(207,181,40)" fg:x="80609024443" fg:w="21650218"/><text x="85.5063%" y="287.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (21,650,218 samples, 0.02%)</title><rect x="85.2563%" y="261" width="0.0229%" height="15" fill="rgb(254,173,49)" fg:x="80609024443" fg:w="21650218"/><text x="85.5063%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (21,650,218 samples, 0.02%)</title><rect x="85.2563%" y="245" width="0.0229%" height="15" fill="rgb(221,1,38)" fg:x="80609024443" fg:w="21650218"/><text x="85.5063%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (58,051,307 samples, 0.06%)</title><rect x="85.3262%" y="277" width="0.0614%" height="15" fill="rgb(206,124,46)" fg:x="80675109948" fg:w="58051307"/><text x="85.5762%" y="287.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (44,057,529 samples, 0.05%)</title><rect x="85.3876%" y="277" width="0.0466%" height="15" fill="rgb(249,21,11)" fg:x="80733161255" fg:w="44057529"/><text x="85.6376%" y="287.50"></text></g><g><title>nalgebra::linalg::lu::LU&lt;T,D,D&gt;::solve (361,940,972 samples, 0.38%)</title><rect x="85.0693%" y="405" width="0.3828%" height="15" fill="rgb(222,201,40)" fg:x="80432238824" fg:w="361940972"/><text x="85.3193%" y="415.50"></text></g><g><title>nalgebra::linalg::lu::LU&lt;T,D,D&gt;::solve_mut (361,940,972 samples, 0.38%)</title><rect x="85.0693%" y="389" width="0.3828%" height="15" fill="rgb(235,61,29)" fg:x="80432238824" fg:w="361940972"/><text x="85.3193%" y="399.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::solve_upper_triangular_mut (163,505,135 samples, 0.17%)</title><rect x="85.2792%" y="373" width="0.1729%" height="15" fill="rgb(219,207,3)" fg:x="80630674661" fg:w="163505135"/><text x="85.5292%" y="383.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::solve_upper_triangular_vector_mut (163,505,135 samples, 0.17%)</title><rect x="85.2792%" y="357" width="0.1729%" height="15" fill="rgb(222,56,46)" fg:x="80630674661" fg:w="163505135"/><text x="85.5292%" y="367.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (150,962,491 samples, 0.16%)</title><rect x="85.2924%" y="341" width="0.1597%" height="15" fill="rgb(239,76,54)" fg:x="80643217305" fg:w="150962491"/><text x="85.5424%" y="351.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (150,962,491 samples, 0.16%)</title><rect x="85.2924%" y="325" width="0.1597%" height="15" fill="rgb(231,124,27)" fg:x="80643217305" fg:w="150962491"/><text x="85.5424%" y="335.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (150,962,491 samples, 0.16%)</title><rect x="85.2924%" y="309" width="0.1597%" height="15" fill="rgb(249,195,6)" fg:x="80643217305" fg:w="150962491"/><text x="85.5424%" y="319.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (150,962,491 samples, 0.16%)</title><rect x="85.2924%" y="293" width="0.1597%" height="15" fill="rgb(237,174,47)" fg:x="80643217305" fg:w="150962491"/><text x="85.5424%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16,961,012 samples, 0.02%)</title><rect x="85.4342%" y="277" width="0.0179%" height="15" fill="rgb(206,201,31)" fg:x="80777218784" fg:w="16961012"/><text x="85.6842%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16,961,012 samples, 0.02%)</title><rect x="85.4342%" y="261" width="0.0179%" height="15" fill="rgb(231,57,52)" fg:x="80777218784" fg:w="16961012"/><text x="85.6842%" y="271.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (12,741,547 samples, 0.01%)</title><rect x="85.4386%" y="245" width="0.0135%" height="15" fill="rgb(248,177,22)" fg:x="80781438249" fg:w="12741547"/><text x="85.6886%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (12,741,547 samples, 0.01%)</title><rect x="85.4386%" y="229" width="0.0135%" height="15" fill="rgb(215,211,37)" fg:x="80781438249" fg:w="12741547"/><text x="85.6886%" y="239.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (86,572,577 samples, 0.09%)</title><rect x="85.4521%" y="405" width="0.0916%" height="15" fill="rgb(241,128,51)" fg:x="80794179796" fg:w="86572577"/><text x="85.7021%" y="415.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (86,572,577 samples, 0.09%)</title><rect x="85.4521%" y="389" width="0.0916%" height="15" fill="rgb(227,165,31)" fg:x="80794179796" fg:w="86572577"/><text x="85.7021%" y="399.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (86,572,577 samples, 0.09%)</title><rect x="85.4521%" y="373" width="0.0916%" height="15" fill="rgb(228,167,24)" fg:x="80794179796" fg:w="86572577"/><text x="85.7021%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (86,572,577 samples, 0.09%)</title><rect x="85.4521%" y="357" width="0.0916%" height="15" fill="rgb(228,143,12)" fg:x="80794179796" fg:w="86572577"/><text x="85.7021%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (86,572,577 samples, 0.09%)</title><rect x="85.4521%" y="341" width="0.0916%" height="15" fill="rgb(249,149,8)" fg:x="80794179796" fg:w="86572577"/><text x="85.7021%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (86,572,577 samples, 0.09%)</title><rect x="85.4521%" y="325" width="0.0916%" height="15" fill="rgb(243,35,44)" fg:x="80794179796" fg:w="86572577"/><text x="85.7021%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (86,572,577 samples, 0.09%)</title><rect x="85.4521%" y="309" width="0.0916%" height="15" fill="rgb(246,89,9)" fg:x="80794179796" fg:w="86572577"/><text x="85.7021%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (86,572,577 samples, 0.09%)</title><rect x="85.4521%" y="293" width="0.0916%" height="15" fill="rgb(233,213,13)" fg:x="80794179796" fg:w="86572577"/><text x="85.7021%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (82,701,077 samples, 0.09%)</title><rect x="85.4562%" y="277" width="0.0875%" height="15" fill="rgb(233,141,41)" fg:x="80798051296" fg:w="82701077"/><text x="85.7062%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82,701,077 samples, 0.09%)</title><rect x="85.4562%" y="261" width="0.0875%" height="15" fill="rgb(239,167,4)" fg:x="80798051296" fg:w="82701077"/><text x="85.7062%" y="271.50"></text></g><g><title>[libc.so.6] (82,701,077 samples, 0.09%)</title><rect x="85.4562%" y="245" width="0.0875%" height="15" fill="rgb(209,217,16)" fg:x="80798051296" fg:w="82701077"/><text x="85.7062%" y="255.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="405" width="1.0753%" height="15" fill="rgb(219,88,35)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="415.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="389" width="1.0753%" height="15" fill="rgb(220,193,23)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="399.50"></text></g><g><title>alloc::vec::from_elem (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="373" width="1.0753%" height="15" fill="rgb(230,90,52)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="383.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="357" width="1.0753%" height="15" fill="rgb(252,106,19)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="341" width="1.0753%" height="15" fill="rgb(206,74,20)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="325" width="1.0753%" height="15" fill="rgb(230,138,44)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="309" width="1.0753%" height="15" fill="rgb(235,182,43)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="293" width="1.0753%" height="15" fill="rgb(242,16,51)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="277" width="1.0753%" height="15" fill="rgb(248,9,4)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="261" width="1.0753%" height="15" fill="rgb(210,31,22)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="271.50"></text></g><g><title>[libc.so.6] (1,016,657,108 samples, 1.08%)</title><rect x="85.5482%" y="245" width="1.0753%" height="15" fill="rgb(239,54,39)" fg:x="80885003163" fg:w="1016657108"/><text x="85.7982%" y="255.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="389" width="0.1607%" height="15" fill="rgb(230,99,41)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="399.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="373" width="0.1607%" height="15" fill="rgb(253,106,12)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="357" width="0.1607%" height="15" fill="rgb(213,46,41)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="341" width="0.1607%" height="15" fill="rgb(215,133,35)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="325" width="0.1607%" height="15" fill="rgb(213,28,5)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="309" width="0.1607%" height="15" fill="rgb(215,77,49)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="293" width="0.1607%" height="15" fill="rgb(248,100,22)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="277" width="0.1607%" height="15" fill="rgb(208,67,9)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="261" width="0.1607%" height="15" fill="rgb(219,133,21)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="245" width="0.1607%" height="15" fill="rgb(246,46,29)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="255.50"></text></g><g><title>[libc.so.6] (151,942,140 samples, 0.16%)</title><rect x="86.6359%" y="229" width="0.1607%" height="15" fill="rgb(246,185,52)" fg:x="81913413293" fg:w="151942140"/><text x="86.8859%" y="239.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="389" width="0.0400%" height="15" fill="rgb(252,136,11)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="373" width="0.0400%" height="15" fill="rgb(219,138,53)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="357" width="0.0400%" height="15" fill="rgb(211,51,23)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="367.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="341" width="0.0400%" height="15" fill="rgb(247,221,28)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="325" width="0.0400%" height="15" fill="rgb(251,222,45)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="309" width="0.0400%" height="15" fill="rgb(217,162,53)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="293" width="0.0400%" height="15" fill="rgb(229,93,14)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="277" width="0.0400%" height="15" fill="rgb(209,67,49)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="261" width="0.0400%" height="15" fill="rgb(213,87,29)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="245" width="0.0400%" height="15" fill="rgb(205,151,52)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="229" width="0.0400%" height="15" fill="rgb(253,215,39)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="213" width="0.0400%" height="15" fill="rgb(221,220,41)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="197" width="0.0400%" height="15" fill="rgb(218,133,21)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (37,848,453 samples, 0.04%)</title><rect x="86.7966%" y="181" width="0.0400%" height="15" fill="rgb(221,193,43)" fg:x="82065355433" fg:w="37848453"/><text x="87.0466%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (33,782,002 samples, 0.04%)</title><rect x="86.8009%" y="165" width="0.0357%" height="15" fill="rgb(240,128,52)" fg:x="82069421884" fg:w="33782002"/><text x="87.0509%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (33,782,002 samples, 0.04%)</title><rect x="86.8009%" y="149" width="0.0357%" height="15" fill="rgb(253,114,12)" fg:x="82069421884" fg:w="33782002"/><text x="87.0509%" y="159.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (21,655,839 samples, 0.02%)</title><rect x="86.8137%" y="133" width="0.0229%" height="15" fill="rgb(215,223,47)" fg:x="82081548047" fg:w="21655839"/><text x="87.0637%" y="143.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (102,446,361 samples, 0.11%)</title><rect x="86.8731%" y="197" width="0.1084%" height="15" fill="rgb(248,225,23)" fg:x="82137769731" fg:w="102446361"/><text x="87.1231%" y="207.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (102,446,361 samples, 0.11%)</title><rect x="86.8731%" y="181" width="0.1084%" height="15" fill="rgb(250,108,0)" fg:x="82137769731" fg:w="102446361"/><text x="87.1231%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (16,792,247 samples, 0.02%)</title><rect x="86.9860%" y="197" width="0.0178%" height="15" fill="rgb(228,208,7)" fg:x="82244465193" fg:w="16792247"/><text x="87.2360%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_shuffle_pd (15,949,799 samples, 0.02%)</title><rect x="87.0113%" y="197" width="0.0169%" height="15" fill="rgb(244,45,10)" fg:x="82268429550" fg:w="15949799"/><text x="87.2613%" y="207.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (217,214,346 samples, 0.23%)</title><rect x="86.8457%" y="245" width="0.2297%" height="15" fill="rgb(207,125,25)" fg:x="82111790103" fg:w="217214346"/><text x="87.0957%" y="255.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (213,060,987 samples, 0.23%)</title><rect x="86.8501%" y="229" width="0.2253%" height="15" fill="rgb(210,195,18)" fg:x="82115943462" fg:w="213060987"/><text x="87.1001%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (195,500,685 samples, 0.21%)</title><rect x="86.8686%" y="213" width="0.2068%" height="15" fill="rgb(249,80,12)" fg:x="82133503764" fg:w="195500685"/><text x="87.1186%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (28,764,993 samples, 0.03%)</title><rect x="87.0450%" y="197" width="0.0304%" height="15" fill="rgb(221,65,9)" fg:x="82300239456" fg:w="28764993"/><text x="87.2950%" y="207.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (251,291,225 samples, 0.27%)</title><rect x="86.8457%" y="293" width="0.2658%" height="15" fill="rgb(235,49,36)" fg:x="82111790103" fg:w="251291225"/><text x="87.0957%" y="303.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (251,291,225 samples, 0.27%)</title><rect x="86.8457%" y="277" width="0.2658%" height="15" fill="rgb(225,32,20)" fg:x="82111790103" fg:w="251291225"/><text x="87.0957%" y="287.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (251,291,225 samples, 0.27%)</title><rect x="86.8457%" y="261" width="0.2658%" height="15" fill="rgb(215,141,46)" fg:x="82111790103" fg:w="251291225"/><text x="87.0957%" y="271.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (30,604,018 samples, 0.03%)</title><rect x="87.0791%" y="245" width="0.0324%" height="15" fill="rgb(250,160,47)" fg:x="82332477310" fg:w="30604018"/><text x="87.3291%" y="255.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (18,746,767 samples, 0.02%)</title><rect x="87.0916%" y="229" width="0.0198%" height="15" fill="rgb(216,222,40)" fg:x="82344334561" fg:w="18746767"/><text x="87.3416%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (18,746,767 samples, 0.02%)</title><rect x="87.0916%" y="213" width="0.0198%" height="15" fill="rgb(234,217,39)" fg:x="82344334561" fg:w="18746767"/><text x="87.3416%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (14,492,004 samples, 0.02%)</title><rect x="87.0961%" y="197" width="0.0153%" height="15" fill="rgb(207,178,40)" fg:x="82348589324" fg:w="14492004"/><text x="87.3461%" y="207.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (304,468,451 samples, 0.32%)</title><rect x="86.8366%" y="389" width="0.3220%" height="15" fill="rgb(221,136,13)" fg:x="82103203886" fg:w="304468451"/><text x="87.0866%" y="399.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (304,468,451 samples, 0.32%)</title><rect x="86.8366%" y="373" width="0.3220%" height="15" fill="rgb(249,199,10)" fg:x="82103203886" fg:w="304468451"/><text x="87.0866%" y="383.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (304,468,451 samples, 0.32%)</title><rect x="86.8366%" y="357" width="0.3220%" height="15" fill="rgb(249,222,13)" fg:x="82103203886" fg:w="304468451"/><text x="87.0866%" y="367.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (304,468,451 samples, 0.32%)</title><rect x="86.8366%" y="341" width="0.3220%" height="15" fill="rgb(244,185,38)" fg:x="82103203886" fg:w="304468451"/><text x="87.0866%" y="351.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (295,882,234 samples, 0.31%)</title><rect x="86.8457%" y="325" width="0.3129%" height="15" fill="rgb(236,202,9)" fg:x="82111790103" fg:w="295882234"/><text x="87.0957%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (295,882,234 samples, 0.31%)</title><rect x="86.8457%" y="309" width="0.3129%" height="15" fill="rgb(250,229,37)" fg:x="82111790103" fg:w="295882234"/><text x="87.0957%" y="319.50"></text></g><g><title>matrixmultiply::gemm::pack (44,591,009 samples, 0.05%)</title><rect x="87.1115%" y="293" width="0.0472%" height="15" fill="rgb(206,174,23)" fg:x="82363081328" fg:w="44591009"/><text x="87.3615%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40,530,808 samples, 0.04%)</title><rect x="87.1157%" y="277" width="0.0429%" height="15" fill="rgb(211,33,43)" fg:x="82367141529" fg:w="40530808"/><text x="87.3657%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,249,105,902 samples, 1.32%)</title><rect x="87.1631%" y="293" width="1.3211%" height="15" fill="rgb(245,58,50)" fg:x="82411956605" fg:w="1249105902"/><text x="87.4131%" y="303.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (1,249,105,902 samples, 1.32%)</title><rect x="87.1631%" y="277" width="1.3211%" height="15" fill="rgb(244,68,36)" fg:x="82411956605" fg:w="1249105902"/><text x="87.4131%" y="287.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (1,232,292,532 samples, 1.30%)</title><rect x="87.1809%" y="261" width="1.3033%" height="15" fill="rgb(232,229,15)" fg:x="82428769975" fg:w="1232292532"/><text x="87.4309%" y="271.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (1,232,292,532 samples, 1.30%)</title><rect x="87.1809%" y="245" width="1.3033%" height="15" fill="rgb(254,30,23)" fg:x="82428769975" fg:w="1232292532"/><text x="87.4309%" y="255.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (1,232,292,532 samples, 1.30%)</title><rect x="87.1809%" y="229" width="1.3033%" height="15" fill="rgb(235,160,14)" fg:x="82428769975" fg:w="1232292532"/><text x="87.4309%" y="239.50"></text></g><g><title>tanhf32x (1,228,706,695 samples, 1.30%)</title><rect x="87.1847%" y="213" width="1.2995%" height="15" fill="rgb(212,155,44)" fg:x="82432355812" fg:w="1228706695"/><text x="87.4347%" y="223.50"></text></g><g><title>[libm.so.6] (740,130,139 samples, 0.78%)</title><rect x="87.7015%" y="197" width="0.7828%" height="15" fill="rgb(226,2,50)" fg:x="82920932368" fg:w="740130139"/><text x="87.9515%" y="207.50"></text></g><g><title>rkl::core::layers::Dense::forward (1,759,207,049 samples, 1.86%)</title><rect x="86.6359%" y="405" width="1.8606%" height="15" fill="rgb(234,177,6)" fg:x="81913413293" fg:w="1759207049"/><text x="86.8859%" y="415.50">r..</text></g><g><title>rkl::core::activations::Activation::forward (1,264,948,005 samples, 1.34%)</title><rect x="87.1586%" y="389" width="1.3379%" height="15" fill="rgb(217,24,9)" fg:x="82407672337" fg:w="1264948005"/><text x="87.4086%" y="399.50"></text></g><g><title>rkl::core::activations::tanh_forward (1,260,663,737 samples, 1.33%)</title><rect x="87.1631%" y="373" width="1.3333%" height="15" fill="rgb(220,13,46)" fg:x="82411956605" fg:w="1260663737"/><text x="87.4131%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (1,260,663,737 samples, 1.33%)</title><rect x="87.1631%" y="357" width="1.3333%" height="15" fill="rgb(239,221,27)" fg:x="82411956605" fg:w="1260663737"/><text x="87.4131%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (1,260,663,737 samples, 1.33%)</title><rect x="87.1631%" y="341" width="1.3333%" height="15" fill="rgb(222,198,25)" fg:x="82411956605" fg:w="1260663737"/><text x="87.4131%" y="351.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (1,260,663,737 samples, 1.33%)</title><rect x="87.1631%" y="325" width="1.3333%" height="15" fill="rgb(211,99,13)" fg:x="82411956605" fg:w="1260663737"/><text x="87.4131%" y="335.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (1,260,663,737 samples, 1.33%)</title><rect x="87.1631%" y="309" width="1.3333%" height="15" fill="rgb(232,111,31)" fg:x="82411956605" fg:w="1260663737"/><text x="87.4131%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="293" width="0.0122%" height="15" fill="rgb(245,82,37)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="277" width="0.0122%" height="15" fill="rgb(227,149,46)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="261" width="0.0122%" height="15" fill="rgb(218,36,50)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="245" width="0.0122%" height="15" fill="rgb(226,80,48)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="229" width="0.0122%" height="15" fill="rgb(238,224,15)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="213" width="0.0122%" height="15" fill="rgb(241,136,10)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="197" width="0.0122%" height="15" fill="rgb(208,32,45)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="207.50"></text></g><g><title>alloc::alloc::alloc (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="181" width="0.0122%" height="15" fill="rgb(207,135,9)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="191.50"></text></g><g><title>malloc (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="165" width="0.0122%" height="15" fill="rgb(206,86,44)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="175.50"></text></g><g><title>[libc.so.6] (11,557,835 samples, 0.01%)</title><rect x="88.4843%" y="149" width="0.0122%" height="15" fill="rgb(245,177,15)" fg:x="83661062507" fg:w="11557835"/><text x="88.7343%" y="159.50"></text></g><g><title>rkl::core::losses::criteria (12,669,083 samples, 0.01%)</title><rect x="88.4965%" y="405" width="0.0134%" height="15" fill="rgb(206,64,50)" fg:x="83672620342" fg:w="12669083"/><text x="88.7465%" y="415.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (409,325,580 samples, 0.43%)</title><rect x="88.5164%" y="373" width="0.4329%" height="15" fill="rgb(234,36,40)" fg:x="83691460644" fg:w="409325580"/><text x="88.7664%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (409,325,580 samples, 0.43%)</title><rect x="88.5164%" y="357" width="0.4329%" height="15" fill="rgb(213,64,8)" fg:x="83691460644" fg:w="409325580"/><text x="88.7664%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (409,325,580 samples, 0.43%)</title><rect x="88.5164%" y="341" width="0.4329%" height="15" fill="rgb(210,75,36)" fg:x="83691460644" fg:w="409325580"/><text x="88.7664%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (409,325,580 samples, 0.43%)</title><rect x="88.5164%" y="325" width="0.4329%" height="15" fill="rgb(229,88,21)" fg:x="83691460644" fg:w="409325580"/><text x="88.7664%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (409,325,580 samples, 0.43%)</title><rect x="88.5164%" y="309" width="0.4329%" height="15" fill="rgb(252,204,47)" fg:x="83691460644" fg:w="409325580"/><text x="88.7664%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (409,325,580 samples, 0.43%)</title><rect x="88.5164%" y="293" width="0.4329%" height="15" fill="rgb(208,77,27)" fg:x="83691460644" fg:w="409325580"/><text x="88.7664%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (409,325,580 samples, 0.43%)</title><rect x="88.5164%" y="277" width="0.4329%" height="15" fill="rgb(221,76,26)" fg:x="83691460644" fg:w="409325580"/><text x="88.7664%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (406,706,983 samples, 0.43%)</title><rect x="88.5192%" y="261" width="0.4302%" height="15" fill="rgb(225,139,18)" fg:x="83694079241" fg:w="406706983"/><text x="88.7692%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (406,706,983 samples, 0.43%)</title><rect x="88.5192%" y="245" width="0.4302%" height="15" fill="rgb(230,137,11)" fg:x="83694079241" fg:w="406706983"/><text x="88.7692%" y="255.50"></text></g><g><title>[libc.so.6] (406,706,983 samples, 0.43%)</title><rect x="88.5192%" y="229" width="0.4302%" height="15" fill="rgb(212,28,1)" fg:x="83694079241" fg:w="406706983"/><text x="88.7692%" y="239.50"></text></g><g><title>[unknown] (21,793,989 samples, 0.02%)</title><rect x="88.9263%" y="213" width="0.0231%" height="15" fill="rgb(248,164,17)" fg:x="84078992235" fg:w="21793989"/><text x="89.1763%" y="223.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (413,542,422 samples, 0.44%)</title><rect x="88.5164%" y="389" width="0.4374%" height="15" fill="rgb(222,171,42)" fg:x="83691460644" fg:w="413542422"/><text x="88.7664%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign (3,083,598,159 samples, 3.26%)</title><rect x="88.9614%" y="389" width="3.2614%" height="15" fill="rgb(243,84,45)" fg:x="84112173605" fg:w="3083598159"/><text x="89.2114%" y="399.50">nda..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (3,083,598,159 samples, 3.26%)</title><rect x="88.9614%" y="373" width="3.2614%" height="15" fill="rgb(252,49,23)" fg:x="84112173605" fg:w="3083598159"/><text x="89.2114%" y="383.50">nda..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (3,083,598,159 samples, 3.26%)</title><rect x="88.9614%" y="357" width="3.2614%" height="15" fill="rgb(215,19,7)" fg:x="84112173605" fg:w="3083598159"/><text x="89.2114%" y="367.50">nda..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (3,083,598,159 samples, 3.26%)</title><rect x="88.9614%" y="341" width="3.2614%" height="15" fill="rgb(238,81,41)" fg:x="84112173605" fg:w="3083598159"/><text x="89.2114%" y="351.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (3,083,598,159 samples, 3.26%)</title><rect x="88.9614%" y="325" width="3.2614%" height="15" fill="rgb(210,199,37)" fg:x="84112173605" fg:w="3083598159"/><text x="89.2114%" y="335.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (3,083,598,159 samples, 3.26%)</title><rect x="88.9614%" y="309" width="3.2614%" height="15" fill="rgb(244,192,49)" fg:x="84112173605" fg:w="3083598159"/><text x="89.2114%" y="319.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (3,083,598,159 samples, 3.26%)</title><rect x="88.9614%" y="293" width="3.2614%" height="15" fill="rgb(226,211,11)" fg:x="84112173605" fg:w="3083598159"/><text x="89.2114%" y="303.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (3,083,598,159 samples, 3.26%)</title><rect x="88.9614%" y="277" width="3.2614%" height="15" fill="rgb(236,162,54)" fg:x="84112173605" fg:w="3083598159"/><text x="89.2114%" y="287.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (3,083,598,159 samples, 3.26%)</title><rect x="88.9614%" y="261" width="3.2614%" height="15" fill="rgb(220,229,9)" fg:x="84112173605" fg:w="3083598159"/><text x="89.2114%" y="271.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (3,051,832,534 samples, 3.23%)</title><rect x="88.9950%" y="245" width="3.2278%" height="15" fill="rgb(250,87,22)" fg:x="84143939230" fg:w="3051832534"/><text x="89.2450%" y="255.50">nda..</text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (3,051,832,534 samples, 3.23%)</title><rect x="88.9950%" y="229" width="3.2278%" height="15" fill="rgb(239,43,17)" fg:x="84143939230" fg:w="3051832534"/><text x="89.2450%" y="239.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (3,051,832,534 samples, 3.23%)</title><rect x="88.9950%" y="213" width="3.2278%" height="15" fill="rgb(231,177,25)" fg:x="84143939230" fg:w="3051832534"/><text x="89.2450%" y="223.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (3,051,832,534 samples, 3.23%)</title><rect x="88.9950%" y="197" width="3.2278%" height="15" fill="rgb(219,179,1)" fg:x="84143939230" fg:w="3051832534"/><text x="89.2450%" y="207.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (3,051,832,534 samples, 3.23%)</title><rect x="88.9950%" y="181" width="3.2278%" height="15" fill="rgb(238,219,53)" fg:x="84143939230" fg:w="3051832534"/><text x="89.2450%" y="191.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (3,051,832,534 samples, 3.23%)</title><rect x="88.9950%" y="165" width="3.2278%" height="15" fill="rgb(232,167,36)" fg:x="84143939230" fg:w="3051832534"/><text x="89.2450%" y="175.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (3,051,832,534 samples, 3.23%)</title><rect x="88.9950%" y="149" width="3.2278%" height="15" fill="rgb(244,19,51)" fg:x="84143939230" fg:w="3051832534"/><text x="89.2450%" y="159.50">nda..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (2,695,945,332 samples, 2.85%)</title><rect x="89.3714%" y="133" width="2.8514%" height="15" fill="rgb(224,6,22)" fg:x="84499826432" fg:w="2695945332"/><text x="89.6214%" y="143.50">nd..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,695,945,332 samples, 2.85%)</title><rect x="89.3714%" y="117" width="2.8514%" height="15" fill="rgb(224,145,5)" fg:x="84499826432" fg:w="2695945332"/><text x="89.6214%" y="127.50">co..</text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign::_{{closure}} (1,888,892,965 samples, 2.00%)</title><rect x="90.2250%" y="101" width="1.9978%" height="15" fill="rgb(234,130,49)" fg:x="85306878799" fg:w="1888892965"/><text x="90.4750%" y="111.50">n..</text></g><g><title>core::clone::Clone::clone_from (1,888,892,965 samples, 2.00%)</title><rect x="90.2250%" y="85" width="1.9978%" height="15" fill="rgb(254,6,2)" fg:x="85306878799" fg:w="1888892965"/><text x="90.4750%" y="95.50">c..</text></g><g><title>[unknown] (319,556,793 samples, 0.34%)</title><rect x="91.8848%" y="69" width="0.3380%" height="15" fill="rgb(208,96,46)" fg:x="86876214971" fg:w="319556793"/><text x="92.1348%" y="79.50"></text></g><g><title>[unknown] (83,285,392 samples, 0.09%)</title><rect x="92.1347%" y="53" width="0.0881%" height="15" fill="rgb(239,3,39)" fg:x="87112486372" fg:w="83285392"/><text x="92.3847%" y="63.50"></text></g><g><title>[unknown] (19,946,730 samples, 0.02%)</title><rect x="92.2017%" y="37" width="0.0211%" height="15" fill="rgb(233,210,1)" fg:x="87175825034" fg:w="19946730"/><text x="92.4517%" y="47.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="389" width="0.0300%" height="15" fill="rgb(244,137,37)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="373" width="0.0300%" height="15" fill="rgb(240,136,2)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="357" width="0.0300%" height="15" fill="rgb(239,18,37)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="367.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="341" width="0.0300%" height="15" fill="rgb(218,185,22)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="325" width="0.0300%" height="15" fill="rgb(225,218,4)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="309" width="0.0300%" height="15" fill="rgb(230,182,32)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="293" width="0.0300%" height="15" fill="rgb(242,56,43)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="277" width="0.0300%" height="15" fill="rgb(233,99,24)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="261" width="0.0300%" height="15" fill="rgb(234,209,42)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="245" width="0.0300%" height="15" fill="rgb(227,7,12)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="229" width="0.0300%" height="15" fill="rgb(245,203,43)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="213" width="0.0300%" height="15" fill="rgb(238,205,33)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="197" width="0.0300%" height="15" fill="rgb(231,56,7)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (28,365,042 samples, 0.03%)</title><rect x="92.2228%" y="181" width="0.0300%" height="15" fill="rgb(244,186,29)" fg:x="87195771764" fg:w="28365042"/><text x="92.4728%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (16,198,562 samples, 0.02%)</title><rect x="92.2356%" y="165" width="0.0171%" height="15" fill="rgb(234,111,31)" fg:x="87207938244" fg:w="16198562"/><text x="92.4856%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (16,198,562 samples, 0.02%)</title><rect x="92.2356%" y="149" width="0.0171%" height="15" fill="rgb(241,149,10)" fg:x="87207938244" fg:w="16198562"/><text x="92.4856%" y="159.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (16,198,562 samples, 0.02%)</title><rect x="92.2356%" y="133" width="0.0171%" height="15" fill="rgb(249,206,44)" fg:x="87207938244" fg:w="16198562"/><text x="92.4856%" y="143.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (46,954,539 samples, 0.05%)</title><rect x="92.2792%" y="197" width="0.0497%" height="15" fill="rgb(251,153,30)" fg:x="87249106124" fg:w="46954539"/><text x="92.5292%" y="207.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (46,954,539 samples, 0.05%)</title><rect x="92.2792%" y="181" width="0.0497%" height="15" fill="rgb(239,152,38)" fg:x="87249106124" fg:w="46954539"/><text x="92.5292%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (15,493,722 samples, 0.02%)</title><rect x="92.3288%" y="197" width="0.0164%" height="15" fill="rgb(249,139,47)" fg:x="87296060663" fg:w="15493722"/><text x="92.5788%" y="207.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (95,034,862 samples, 0.10%)</title><rect x="92.2690%" y="245" width="0.1005%" height="15" fill="rgb(244,64,35)" fg:x="87239492730" fg:w="95034862"/><text x="92.5190%" y="255.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (91,412,804 samples, 0.10%)</title><rect x="92.2728%" y="229" width="0.0967%" height="15" fill="rgb(216,46,15)" fg:x="87243114788" fg:w="91412804"/><text x="92.5228%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (91,412,804 samples, 0.10%)</title><rect x="92.2728%" y="213" width="0.0967%" height="15" fill="rgb(250,74,19)" fg:x="87243114788" fg:w="91412804"/><text x="92.5228%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (18,972,390 samples, 0.02%)</title><rect x="92.3494%" y="197" width="0.0201%" height="15" fill="rgb(249,42,33)" fg:x="87315555202" fg:w="18972390"/><text x="92.5994%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (18,972,390 samples, 0.02%)</title><rect x="92.3494%" y="181" width="0.0201%" height="15" fill="rgb(242,149,17)" fg:x="87315555202" fg:w="18972390"/><text x="92.5994%" y="191.50"></text></g><g><title>core::ptr::write_unaligned (18,972,390 samples, 0.02%)</title><rect x="92.3494%" y="165" width="0.0201%" height="15" fill="rgb(244,29,21)" fg:x="87315555202" fg:w="18972390"/><text x="92.5994%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18,972,390 samples, 0.02%)</title><rect x="92.3494%" y="149" width="0.0201%" height="15" fill="rgb(220,130,37)" fg:x="87315555202" fg:w="18972390"/><text x="92.5994%" y="159.50"></text></g><g><title>[unknown] (18,972,390 samples, 0.02%)</title><rect x="92.3494%" y="133" width="0.0201%" height="15" fill="rgb(211,67,2)" fg:x="87315555202" fg:w="18972390"/><text x="92.5994%" y="143.50"></text></g><g><title>[unknown] (10,513,878 samples, 0.01%)</title><rect x="92.3584%" y="117" width="0.0111%" height="15" fill="rgb(235,68,52)" fg:x="87324013714" fg:w="10513878"/><text x="92.6084%" y="127.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (114,245,612 samples, 0.12%)</title><rect x="92.2607%" y="293" width="0.1208%" height="15" fill="rgb(246,142,3)" fg:x="87231605891" fg:w="114245612"/><text x="92.5107%" y="303.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (114,245,612 samples, 0.12%)</title><rect x="92.2607%" y="277" width="0.1208%" height="15" fill="rgb(241,25,7)" fg:x="87231605891" fg:w="114245612"/><text x="92.5107%" y="287.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (110,510,320 samples, 0.12%)</title><rect x="92.2646%" y="261" width="0.1169%" height="15" fill="rgb(242,119,39)" fg:x="87235341183" fg:w="110510320"/><text x="92.5146%" y="271.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (11,323,911 samples, 0.01%)</title><rect x="92.3695%" y="245" width="0.0120%" height="15" fill="rgb(241,98,45)" fg:x="87334527592" fg:w="11323911"/><text x="92.6195%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43,542,878 samples, 0.05%)</title><rect x="92.3815%" y="277" width="0.0461%" height="15" fill="rgb(254,28,30)" fg:x="87345851503" fg:w="43542878"/><text x="92.6315%" y="287.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (172,683,526 samples, 0.18%)</title><rect x="92.2528%" y="389" width="0.1826%" height="15" fill="rgb(241,142,54)" fg:x="87224136806" fg:w="172683526"/><text x="92.5028%" y="399.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (172,683,526 samples, 0.18%)</title><rect x="92.2528%" y="373" width="0.1826%" height="15" fill="rgb(222,85,15)" fg:x="87224136806" fg:w="172683526"/><text x="92.5028%" y="383.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (168,683,824 samples, 0.18%)</title><rect x="92.2570%" y="357" width="0.1784%" height="15" fill="rgb(210,85,47)" fg:x="87228136508" fg:w="168683824"/><text x="92.5070%" y="367.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (168,683,824 samples, 0.18%)</title><rect x="92.2570%" y="341" width="0.1784%" height="15" fill="rgb(224,206,25)" fg:x="87228136508" fg:w="168683824"/><text x="92.5070%" y="351.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (165,214,441 samples, 0.17%)</title><rect x="92.2607%" y="325" width="0.1747%" height="15" fill="rgb(243,201,19)" fg:x="87231605891" fg:w="165214441"/><text x="92.5107%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (165,214,441 samples, 0.17%)</title><rect x="92.2607%" y="309" width="0.1747%" height="15" fill="rgb(236,59,4)" fg:x="87231605891" fg:w="165214441"/><text x="92.5107%" y="319.50"></text></g><g><title>matrixmultiply::gemm::pack (50,968,829 samples, 0.05%)</title><rect x="92.3815%" y="293" width="0.0539%" height="15" fill="rgb(254,179,45)" fg:x="87345851503" fg:w="50968829"/><text x="92.6315%" y="303.50"></text></g><g><title>ndarray::stacking::concatenate (1,608,534,627 samples, 1.70%)</title><rect x="92.4354%" y="389" width="1.7013%" height="15" fill="rgb(226,14,10)" fg:x="87396820332" fg:w="1608534627"/><text x="92.6854%" y="399.50"></text></g><g><title>ndarray::impl_owned_array::&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (1,598,480,846 samples, 1.69%)</title><rect x="92.4460%" y="373" width="1.6906%" height="15" fill="rgb(244,27,41)" fg:x="87406874113" fg:w="1598480846"/><text x="92.6960%" y="383.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (1,598,480,846 samples, 1.69%)</title><rect x="92.4460%" y="357" width="1.6906%" height="15" fill="rgb(235,35,32)" fg:x="87406874113" fg:w="1598480846"/><text x="92.6960%" y="367.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (1,598,480,846 samples, 1.69%)</title><rect x="92.4460%" y="341" width="1.6906%" height="15" fill="rgb(218,68,31)" fg:x="87406874113" fg:w="1598480846"/><text x="92.6960%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (1,598,480,846 samples, 1.69%)</title><rect x="92.4460%" y="325" width="1.6906%" height="15" fill="rgb(207,120,37)" fg:x="87406874113" fg:w="1598480846"/><text x="92.6960%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (1,598,480,846 samples, 1.69%)</title><rect x="92.4460%" y="309" width="1.6906%" height="15" fill="rgb(227,98,0)" fg:x="87406874113" fg:w="1598480846"/><text x="92.6960%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (1,598,480,846 samples, 1.69%)</title><rect x="92.4460%" y="293" width="1.6906%" height="15" fill="rgb(207,7,3)" fg:x="87406874113" fg:w="1598480846"/><text x="92.6960%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (1,303,813,966 samples, 1.38%)</title><rect x="92.7577%" y="277" width="1.3790%" height="15" fill="rgb(206,98,19)" fg:x="87701540993" fg:w="1303813966"/><text x="93.0077%" y="287.50"></text></g><g><title>ndarray::impl_owned_array::_&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append::_{{closure}} (1,303,813,966 samples, 1.38%)</title><rect x="92.7577%" y="261" width="1.3790%" height="15" fill="rgb(217,5,26)" fg:x="87701540993" fg:w="1303813966"/><text x="93.0077%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1,303,813,966 samples, 1.38%)</title><rect x="92.7577%" y="245" width="1.3790%" height="15" fill="rgb(235,190,38)" fg:x="87701540993" fg:w="1303813966"/><text x="93.0077%" y="255.50"></text></g><g><title>core::ptr::write (1,303,813,966 samples, 1.38%)</title><rect x="92.7577%" y="229" width="1.3790%" height="15" fill="rgb(247,86,24)" fg:x="87701540993" fg:w="1303813966"/><text x="93.0077%" y="239.50"></text></g><g><title>[unknown] (370,686,625 samples, 0.39%)</title><rect x="93.7446%" y="213" width="0.3921%" height="15" fill="rgb(205,101,16)" fg:x="88634668334" fg:w="370686625"/><text x="93.9946%" y="223.50"></text></g><g><title>[unknown] (246,931,557 samples, 0.26%)</title><rect x="93.8755%" y="197" width="0.2612%" height="15" fill="rgb(246,168,33)" fg:x="88758423402" fg:w="246931557"/><text x="94.1255%" y="207.50"></text></g><g><title>[unknown] (37,965,037 samples, 0.04%)</title><rect x="94.0965%" y="181" width="0.0402%" height="15" fill="rgb(231,114,1)" fg:x="88967389922" fg:w="37965037"/><text x="94.3465%" y="191.50"></text></g><g><title>core::ptr::write (24,159,183 samples, 0.03%)</title><rect x="94.1410%" y="261" width="0.0256%" height="15" fill="rgb(207,184,53)" fg:x="89009456506" fg:w="24159183"/><text x="94.3910%" y="271.50"></text></g><g><title>[unknown] (19,994,261 samples, 0.02%)</title><rect x="94.1454%" y="245" width="0.0211%" height="15" fill="rgb(224,95,51)" fg:x="89013621428" fg:w="19994261"/><text x="94.3954%" y="255.50"></text></g><g><title>[unknown] (11,942,345 samples, 0.01%)</title><rect x="94.1539%" y="229" width="0.0126%" height="15" fill="rgb(212,188,45)" fg:x="89021673344" fg:w="11942345"/><text x="94.4039%" y="239.50"></text></g><g><title>rkl::core::activations::Activation::forward (696,944,098 samples, 0.74%)</title><rect x="94.1367%" y="389" width="0.7371%" height="15" fill="rgb(223,154,38)" fg:x="89005354959" fg:w="696944098"/><text x="94.3867%" y="399.50"></text></g><g><title>rkl::core::activations::tanh_forward (696,944,098 samples, 0.74%)</title><rect x="94.1367%" y="373" width="0.7371%" height="15" fill="rgb(251,22,52)" fg:x="89005354959" fg:w="696944098"/><text x="94.3867%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (696,944,098 samples, 0.74%)</title><rect x="94.1367%" y="357" width="0.7371%" height="15" fill="rgb(229,209,22)" fg:x="89005354959" fg:w="696944098"/><text x="94.3867%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (696,944,098 samples, 0.74%)</title><rect x="94.1367%" y="341" width="0.7371%" height="15" fill="rgb(234,138,34)" fg:x="89005354959" fg:w="696944098"/><text x="94.3867%" y="351.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (696,944,098 samples, 0.74%)</title><rect x="94.1367%" y="325" width="0.7371%" height="15" fill="rgb(212,95,11)" fg:x="89005354959" fg:w="696944098"/><text x="94.3867%" y="335.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (696,944,098 samples, 0.74%)</title><rect x="94.1367%" y="309" width="0.7371%" height="15" fill="rgb(240,179,47)" fg:x="89005354959" fg:w="696944098"/><text x="94.3867%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (696,944,098 samples, 0.74%)</title><rect x="94.1367%" y="293" width="0.7371%" height="15" fill="rgb(240,163,11)" fg:x="89005354959" fg:w="696944098"/><text x="94.3867%" y="303.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (696,944,098 samples, 0.74%)</title><rect x="94.1367%" y="277" width="0.7371%" height="15" fill="rgb(236,37,12)" fg:x="89005354959" fg:w="696944098"/><text x="94.3867%" y="287.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (668,683,368 samples, 0.71%)</title><rect x="94.1666%" y="261" width="0.7072%" height="15" fill="rgb(232,164,16)" fg:x="89033615689" fg:w="668683368"/><text x="94.4166%" y="271.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (668,683,368 samples, 0.71%)</title><rect x="94.1666%" y="245" width="0.7072%" height="15" fill="rgb(244,205,15)" fg:x="89033615689" fg:w="668683368"/><text x="94.4166%" y="255.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (668,683,368 samples, 0.71%)</title><rect x="94.1666%" y="229" width="0.7072%" height="15" fill="rgb(223,117,47)" fg:x="89033615689" fg:w="668683368"/><text x="94.4166%" y="239.50"></text></g><g><title>tanhf32x (668,683,368 samples, 0.71%)</title><rect x="94.1666%" y="213" width="0.7072%" height="15" fill="rgb(244,107,35)" fg:x="89033615689" fg:w="668683368"/><text x="94.4166%" y="223.50"></text></g><g><title>[libm.so.6] (438,845,386 samples, 0.46%)</title><rect x="94.4096%" y="197" width="0.4641%" height="15" fill="rgb(205,140,8)" fg:x="89263453671" fg:w="438845386"/><text x="94.6596%" y="207.50"></text></g><g><title>[unknown] (82,578,825 samples, 0.09%)</title><rect x="95.2108%" y="373" width="0.0873%" height="15" fill="rgb(228,84,46)" fg:x="90020965749" fg:w="82578825"/><text x="95.4608%" y="383.50"></text></g><g><title>[unknown] (43,618,538 samples, 0.05%)</title><rect x="95.2520%" y="357" width="0.0461%" height="15" fill="rgb(254,188,9)" fg:x="90059926036" fg:w="43618538"/><text x="95.5020%" y="367.50"></text></g><g><title>[unknown] (19,910,082 samples, 0.02%)</title><rect x="95.2771%" y="341" width="0.0211%" height="15" fill="rgb(206,112,54)" fg:x="90083634492" fg:w="19910082"/><text x="95.5271%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (233,067,443 samples, 0.25%)</title><rect x="95.3420%" y="341" width="0.2465%" height="15" fill="rgb(216,84,49)" fg:x="90144960022" fg:w="233067443"/><text x="95.5920%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (233,067,443 samples, 0.25%)</title><rect x="95.3420%" y="325" width="0.2465%" height="15" fill="rgb(214,194,35)" fg:x="90144960022" fg:w="233067443"/><text x="95.5920%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (339,635,781 samples, 0.36%)</title><rect x="95.2982%" y="373" width="0.3592%" height="15" fill="rgb(249,28,3)" fg:x="90103544574" fg:w="339635781"/><text x="95.5482%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (339,635,781 samples, 0.36%)</title><rect x="95.2982%" y="357" width="0.3592%" height="15" fill="rgb(222,56,52)" fg:x="90103544574" fg:w="339635781"/><text x="95.5482%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (65,152,890 samples, 0.07%)</title><rect x="95.5885%" y="341" width="0.0689%" height="15" fill="rgb(245,217,50)" fg:x="90378027465" fg:w="65152890"/><text x="95.8385%" y="351.50"></text></g><g><title>&lt;[usize: 2] as ndarray::dimension::ndindex::NdIndex&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::index_checked (11,908,985 samples, 0.01%)</title><rect x="95.6574%" y="357" width="0.0126%" height="15" fill="rgb(213,201,24)" fg:x="90443180355" fg:w="11908985"/><text x="95.9074%" y="367.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::stride_offset_checked (11,908,985 samples, 0.01%)</title><rect x="95.6574%" y="341" width="0.0126%" height="15" fill="rgb(248,116,28)" fg:x="90443180355" fg:w="11908985"/><text x="95.9074%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (214,620,382 samples, 0.23%)</title><rect x="95.6700%" y="357" width="0.2270%" height="15" fill="rgb(219,72,43)" fg:x="90455089340" fg:w="214620382"/><text x="95.9200%" y="367.50"></text></g><g><title>ndarray::arraytraits::&lt;impl core::ops::index::Index&lt;I&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::index (233,524,933 samples, 0.25%)</title><rect x="95.6574%" y="373" width="0.2470%" height="15" fill="rgb(209,138,14)" fg:x="90443180355" fg:w="233524933"/><text x="95.9074%" y="383.50"></text></g><g><title>[libc.so.6] (61,446,730 samples, 0.06%)</title><rect x="95.9044%" y="213" width="0.0650%" height="15" fill="rgb(222,18,33)" fg:x="90676705288" fg:w="61446730"/><text x="96.1544%" y="223.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="373" width="0.0689%" height="15" fill="rgb(213,199,7)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="357" width="0.0689%" height="15" fill="rgb(250,110,10)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="341" width="0.0689%" height="15" fill="rgb(248,123,6)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="325" width="0.0689%" height="15" fill="rgb(206,91,31)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="309" width="0.0689%" height="15" fill="rgb(211,154,13)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="293" width="0.0689%" height="15" fill="rgb(225,148,7)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="277" width="0.0689%" height="15" fill="rgb(220,160,43)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="261" width="0.0689%" height="15" fill="rgb(213,52,39)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="245" width="0.0689%" height="15" fill="rgb(243,137,7)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (65,155,851 samples, 0.07%)</title><rect x="95.9044%" y="229" width="0.0689%" height="15" fill="rgb(230,79,13)" fg:x="90676705288" fg:w="65155851"/><text x="96.1544%" y="239.50"></text></g><g><title>[libc.so.6] (160,048,694 samples, 0.17%)</title><rect x="95.9733%" y="213" width="0.1693%" height="15" fill="rgb(247,105,23)" fg:x="90741861139" fg:w="160048694"/><text x="96.2233%" y="223.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="373" width="0.1751%" height="15" fill="rgb(223,179,41)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="383.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="357" width="0.1751%" height="15" fill="rgb(218,9,34)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="367.50"></text></g><g><title>alloc::vec::from_elem (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="341" width="0.1751%" height="15" fill="rgb(222,106,8)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="325" width="0.1751%" height="15" fill="rgb(211,220,0)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="309" width="0.1751%" height="15" fill="rgb(229,52,16)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="293" width="0.1751%" height="15" fill="rgb(212,155,18)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="277" width="0.1751%" height="15" fill="rgb(242,21,14)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="261" width="0.1751%" height="15" fill="rgb(222,19,48)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="245" width="0.1751%" height="15" fill="rgb(232,45,27)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (165,586,051 samples, 0.18%)</title><rect x="95.9733%" y="229" width="0.1751%" height="15" fill="rgb(249,103,42)" fg:x="90741861139" fg:w="165586051"/><text x="96.2233%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::collapse_axis (11,549,751 samples, 0.01%)</title><rect x="96.2375%" y="309" width="0.0122%" height="15" fill="rgb(246,81,33)" fg:x="90991658463" fg:w="11549751"/><text x="96.4875%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move (196,539,736 samples, 0.21%)</title><rect x="96.1546%" y="357" width="0.2079%" height="15" fill="rgb(252,33,42)" fg:x="90913330595" fg:w="196539736"/><text x="96.4046%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (196,539,736 samples, 0.21%)</title><rect x="96.1546%" y="341" width="0.2079%" height="15" fill="rgb(209,212,41)" fg:x="90913330595" fg:w="196539736"/><text x="96.4046%" y="351.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move::_{{closure}} (196,539,736 samples, 0.21%)</title><rect x="96.1546%" y="325" width="0.2079%" height="15" fill="rgb(207,154,6)" fg:x="90913330595" fg:w="196539736"/><text x="96.4046%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_axis_inplace (106,662,117 samples, 0.11%)</title><rect x="96.2497%" y="309" width="0.1128%" height="15" fill="rgb(223,64,47)" fg:x="91003208214" fg:w="106662117"/><text x="96.4997%" y="319.50"></text></g><g><title>ndarray::dimension::do_slice (94,062,387 samples, 0.10%)</title><rect x="96.2630%" y="293" width="0.0995%" height="15" fill="rgb(211,161,38)" fg:x="91015807944" fg:w="94062387"/><text x="96.5130%" y="303.50"></text></g><g><title>ndarray::dimension::to_abs_slice (58,211,633 samples, 0.06%)</title><rect x="96.3009%" y="277" width="0.0616%" height="15" fill="rgb(219,138,40)" fg:x="91051658698" fg:w="58211633"/><text x="96.5509%" y="287.50"></text></g><g><title>ndarray::dimension::abs_index (36,182,281 samples, 0.04%)</title><rect x="96.3242%" y="261" width="0.0383%" height="15" fill="rgb(241,228,46)" fg:x="91073688050" fg:w="36182281"/><text x="96.5742%" y="271.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;I&gt; as core::clone::Clone&gt;::clone (11,098,192 samples, 0.01%)</title><rect x="96.3625%" y="341" width="0.0117%" height="15" fill="rgb(223,209,38)" fg:x="91109870331" fg:w="11098192"/><text x="96.6125%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (216,262,497 samples, 0.23%)</title><rect x="96.1484%" y="373" width="0.2287%" height="15" fill="rgb(236,164,45)" fg:x="90907447190" fg:w="216262497"/><text x="96.3984%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::view (13,839,356 samples, 0.01%)</title><rect x="96.3625%" y="357" width="0.0146%" height="15" fill="rgb(231,15,5)" fg:x="91109870331" fg:w="13839356"/><text x="96.6125%" y="367.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (32,710,509 samples, 0.03%)</title><rect x="96.3935%" y="181" width="0.0346%" height="15" fill="rgb(252,35,15)" fg:x="91139194494" fg:w="32710509"/><text x="96.6435%" y="191.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (32,710,509 samples, 0.03%)</title><rect x="96.3935%" y="165" width="0.0346%" height="15" fill="rgb(248,181,18)" fg:x="91139194494" fg:w="32710509"/><text x="96.6435%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (12,431,204 samples, 0.01%)</title><rect x="96.4381%" y="181" width="0.0131%" height="15" fill="rgb(233,39,42)" fg:x="91181341804" fg:w="12431204"/><text x="96.6881%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (17,472,960 samples, 0.02%)</title><rect x="96.4648%" y="181" width="0.0185%" height="15" fill="rgb(238,110,33)" fg:x="91206627065" fg:w="17472960"/><text x="96.7148%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (17,472,960 samples, 0.02%)</title><rect x="96.4648%" y="165" width="0.0185%" height="15" fill="rgb(233,195,10)" fg:x="91206627065" fg:w="17472960"/><text x="96.7148%" y="175.50"></text></g><g><title>core::ptr::write_unaligned (17,472,960 samples, 0.02%)</title><rect x="96.4648%" y="149" width="0.0185%" height="15" fill="rgb(254,105,3)" fg:x="91206627065" fg:w="17472960"/><text x="96.7148%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17,472,960 samples, 0.02%)</title><rect x="96.4648%" y="133" width="0.0185%" height="15" fill="rgb(221,225,9)" fg:x="91206627065" fg:w="17472960"/><text x="96.7148%" y="143.50"></text></g><g><title>[unknown] (10,514,349 samples, 0.01%)</title><rect x="96.4722%" y="117" width="0.0111%" height="15" fill="rgb(224,227,45)" fg:x="91213585676" fg:w="10514349"/><text x="96.7222%" y="127.50"></text></g><g><title>[unknown] (10,514,349 samples, 0.01%)</title><rect x="96.4722%" y="101" width="0.0111%" height="15" fill="rgb(229,198,43)" fg:x="91213585676" fg:w="10514349"/><text x="96.7222%" y="111.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (98,989,919 samples, 0.10%)</title><rect x="96.3870%" y="229" width="0.1047%" height="15" fill="rgb(206,209,35)" fg:x="91132997498" fg:w="98989919"/><text x="96.6370%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (98,989,919 samples, 0.10%)</title><rect x="96.3870%" y="213" width="0.1047%" height="15" fill="rgb(245,195,53)" fg:x="91132997498" fg:w="98989919"/><text x="96.6370%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (98,989,919 samples, 0.10%)</title><rect x="96.3870%" y="197" width="0.1047%" height="15" fill="rgb(240,92,26)" fg:x="91132997498" fg:w="98989919"/><text x="96.6370%" y="207.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (116,043,348 samples, 0.12%)</title><rect x="96.3870%" y="277" width="0.1227%" height="15" fill="rgb(207,40,23)" fg:x="91132997498" fg:w="116043348"/><text x="96.6370%" y="287.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (116,043,348 samples, 0.12%)</title><rect x="96.3870%" y="261" width="0.1227%" height="15" fill="rgb(223,111,35)" fg:x="91132997498" fg:w="116043348"/><text x="96.6370%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (116,043,348 samples, 0.12%)</title><rect x="96.3870%" y="245" width="0.1227%" height="15" fill="rgb(229,147,28)" fg:x="91132997498" fg:w="116043348"/><text x="96.6370%" y="255.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (10,724,602 samples, 0.01%)</title><rect x="96.4984%" y="229" width="0.0113%" height="15" fill="rgb(211,29,28)" fg:x="91238316244" fg:w="10724602"/><text x="96.7484%" y="239.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (130,995,628 samples, 0.14%)</title><rect x="96.3771%" y="373" width="0.1385%" height="15" fill="rgb(228,72,33)" fg:x="91123709687" fg:w="130995628"/><text x="96.6271%" y="383.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (130,995,628 samples, 0.14%)</title><rect x="96.3771%" y="357" width="0.1385%" height="15" fill="rgb(205,214,31)" fg:x="91123709687" fg:w="130995628"/><text x="96.6271%" y="367.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (127,175,801 samples, 0.13%)</title><rect x="96.3812%" y="341" width="0.1345%" height="15" fill="rgb(224,111,15)" fg:x="91127529514" fg:w="127175801"/><text x="96.6312%" y="351.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (124,493,254 samples, 0.13%)</title><rect x="96.3840%" y="325" width="0.1317%" height="15" fill="rgb(253,21,26)" fg:x="91130212061" fg:w="124493254"/><text x="96.6340%" y="335.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (121,707,817 samples, 0.13%)</title><rect x="96.3870%" y="309" width="0.1287%" height="15" fill="rgb(245,139,43)" fg:x="91132997498" fg:w="121707817"/><text x="96.6370%" y="319.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (121,707,817 samples, 0.13%)</title><rect x="96.3870%" y="293" width="0.1287%" height="15" fill="rgb(252,170,7)" fg:x="91132997498" fg:w="121707817"/><text x="96.6370%" y="303.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="357" width="0.0354%" height="15" fill="rgb(231,118,14)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="367.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="341" width="0.0354%" height="15" fill="rgb(238,83,0)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="325" width="0.0354%" height="15" fill="rgb(221,39,39)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="309" width="0.0354%" height="15" fill="rgb(222,119,46)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="293" width="0.0354%" height="15" fill="rgb(222,165,49)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="277" width="0.0354%" height="15" fill="rgb(219,113,52)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="261" width="0.0354%" height="15" fill="rgb(214,7,15)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="245" width="0.0354%" height="15" fill="rgb(235,32,4)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="229" width="0.0354%" height="15" fill="rgb(238,90,54)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="213" width="0.0354%" height="15" fill="rgb(213,208,19)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="223.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="197" width="0.0354%" height="15" fill="rgb(233,156,4)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="181" width="0.0354%" height="15" fill="rgb(207,194,5)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="165" width="0.0354%" height="15" fill="rgb(206,111,30)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="149" width="0.0354%" height="15" fill="rgb(243,70,54)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="159.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="133" width="0.0354%" height="15" fill="rgb(242,28,8)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="143.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (33,491,659 samples, 0.04%)</title><rect x="96.5157%" y="117" width="0.0354%" height="15" fill="rgb(219,106,18)" fg:x="91254705315" fg:w="33491659"/><text x="96.7657%" y="127.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (31,156,860 samples, 0.03%)</title><rect x="96.5182%" y="101" width="0.0330%" height="15" fill="rgb(244,222,10)" fg:x="91257040114" fg:w="31156860"/><text x="96.7682%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (31,156,860 samples, 0.03%)</title><rect x="96.5182%" y="85" width="0.0330%" height="15" fill="rgb(236,179,52)" fg:x="91257040114" fg:w="31156860"/><text x="96.7682%" y="95.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (31,156,860 samples, 0.03%)</title><rect x="96.5182%" y="69" width="0.0330%" height="15" fill="rgb(213,23,39)" fg:x="91257040114" fg:w="31156860"/><text x="96.7682%" y="79.50"></text></g><g><title>core::ops::function::Fn::call (13,040,163 samples, 0.01%)</title><rect x="96.5373%" y="53" width="0.0138%" height="15" fill="rgb(238,48,10)" fg:x="91275156811" fg:w="13040163"/><text x="96.7873%" y="63.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (13,040,163 samples, 0.01%)</title><rect x="96.5373%" y="37" width="0.0138%" height="15" fill="rgb(251,196,23)" fg:x="91275156811" fg:w="13040163"/><text x="96.7873%" y="47.50"></text></g><g><title>core::ptr::write (16,571,664 samples, 0.02%)</title><rect x="96.5617%" y="245" width="0.0175%" height="15" fill="rgb(250,152,24)" fg:x="91298219083" fg:w="16571664"/><text x="96.8117%" y="255.50"></text></g><g><title>rkl::core::layers::Dense::backward_jacobian (2,302,512,316 samples, 2.44%)</title><rect x="94.8738%" y="389" width="2.4353%" height="15" fill="rgb(209,150,17)" fg:x="89702299057" fg:w="2302512316"/><text x="95.1238%" y="399.50">rk..</text></g><g><title>rkl::core::activations::Activation::backward (750,106,058 samples, 0.79%)</title><rect x="96.5157%" y="373" width="0.7934%" height="15" fill="rgb(234,202,34)" fg:x="91254705315" fg:w="750106058"/><text x="96.7657%" y="383.50"></text></g><g><title>rkl::core::activations::tanh_backward (716,614,399 samples, 0.76%)</title><rect x="96.5511%" y="357" width="0.7579%" height="15" fill="rgb(253,148,53)" fg:x="91288196974" fg:w="716614399"/><text x="96.8011%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (716,614,399 samples, 0.76%)</title><rect x="96.5511%" y="341" width="0.7579%" height="15" fill="rgb(218,129,16)" fg:x="91288196974" fg:w="716614399"/><text x="96.8011%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (716,614,399 samples, 0.76%)</title><rect x="96.5511%" y="325" width="0.7579%" height="15" fill="rgb(216,85,19)" fg:x="91288196974" fg:w="716614399"/><text x="96.8011%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (716,614,399 samples, 0.76%)</title><rect x="96.5511%" y="309" width="0.7579%" height="15" fill="rgb(235,228,7)" fg:x="91288196974" fg:w="716614399"/><text x="96.8011%" y="319.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (716,614,399 samples, 0.76%)</title><rect x="96.5511%" y="293" width="0.7579%" height="15" fill="rgb(245,175,0)" fg:x="91288196974" fg:w="716614399"/><text x="96.8011%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (716,614,399 samples, 0.76%)</title><rect x="96.5511%" y="277" width="0.7579%" height="15" fill="rgb(208,168,36)" fg:x="91288196974" fg:w="716614399"/><text x="96.8011%" y="287.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (716,614,399 samples, 0.76%)</title><rect x="96.5511%" y="261" width="0.7579%" height="15" fill="rgb(246,171,24)" fg:x="91288196974" fg:w="716614399"/><text x="96.8011%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (690,020,626 samples, 0.73%)</title><rect x="96.5792%" y="245" width="0.7298%" height="15" fill="rgb(215,142,24)" fg:x="91314790747" fg:w="690020626"/><text x="96.8292%" y="255.50"></text></g><g><title>rkl::core::activations::tanh_backward::_{{closure}} (690,020,626 samples, 0.73%)</title><rect x="96.5792%" y="229" width="0.7298%" height="15" fill="rgb(250,187,7)" fg:x="91314790747" fg:w="690020626"/><text x="96.8292%" y="239.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (651,584,864 samples, 0.69%)</title><rect x="96.6199%" y="213" width="0.6891%" height="15" fill="rgb(228,66,33)" fg:x="91353226509" fg:w="651584864"/><text x="96.8699%" y="223.50"></text></g><g><title>tanhf32x (647,831,432 samples, 0.69%)</title><rect x="96.6239%" y="197" width="0.6852%" height="15" fill="rgb(234,215,21)" fg:x="91356979941" fg:w="647831432"/><text x="96.8739%" y="207.50"></text></g><g><title>[libm.so.6] (391,939,998 samples, 0.41%)</title><rect x="96.8945%" y="181" width="0.4145%" height="15" fill="rgb(222,191,20)" fg:x="91612871375" fg:w="391939998"/><text x="97.1445%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (10,586,289 samples, 0.01%)</title><rect x="98.8826%" y="341" width="0.0112%" height="15" fill="rgb(245,79,54)" fg:x="93492589274" fg:w="10586289"/><text x="99.1326%" y="351.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::backward_jacobian (9,943,836,612 samples, 10.52%)</title><rect x="88.5099%" y="405" width="10.5171%" height="15" fill="rgb(240,10,37)" fg:x="83685289425" fg:w="9943836612"/><text x="88.7599%" y="415.50">rkl::models::Se..</text></g><g><title>rkl::models::divide_rows_by_last_value (1,624,314,664 samples, 1.72%)</title><rect x="97.3090%" y="389" width="1.7180%" height="15" fill="rgb(214,192,32)" fg:x="92004811373" fg:w="1624314664"/><text x="97.5590%" y="399.50"></text></g><g><title>&lt;ndarray::iterators::IterMut&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (168,220,332 samples, 0.18%)</title><rect x="98.8491%" y="373" width="0.1779%" height="15" fill="rgb(209,36,54)" fg:x="93460905705" fg:w="168220332"/><text x="99.0991%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (150,722,480 samples, 0.16%)</title><rect x="98.8676%" y="357" width="0.1594%" height="15" fill="rgb(220,10,11)" fg:x="93478403557" fg:w="150722480"/><text x="99.1176%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (125,950,474 samples, 0.13%)</title><rect x="98.8938%" y="341" width="0.1332%" height="15" fill="rgb(221,106,17)" fg:x="93503175563" fg:w="125950474"/><text x="99.1438%" y="351.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (125,950,474 samples, 0.13%)</title><rect x="98.8938%" y="325" width="0.1332%" height="15" fill="rgb(251,142,44)" fg:x="93503175563" fg:w="125950474"/><text x="99.1438%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (125,950,474 samples, 0.13%)</title><rect x="98.8938%" y="309" width="0.1332%" height="15" fill="rgb(238,13,15)" fg:x="93503175563" fg:w="125950474"/><text x="99.1438%" y="319.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="373" width="0.0462%" height="15" fill="rgb(208,107,27)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="357" width="0.0462%" height="15" fill="rgb(205,136,37)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="341" width="0.0462%" height="15" fill="rgb(250,205,27)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="325" width="0.0462%" height="15" fill="rgb(210,80,43)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="309" width="0.0462%" height="15" fill="rgb(247,160,36)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="293" width="0.0462%" height="15" fill="rgb(234,13,49)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="277" width="0.0462%" height="15" fill="rgb(234,122,0)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="261" width="0.0462%" height="15" fill="rgb(207,146,38)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="245" width="0.0462%" height="15" fill="rgb(207,177,25)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="229" width="0.0462%" height="15" fill="rgb(211,178,42)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="239.50"></text></g><g><title>[libc.so.6] (43,689,456 samples, 0.05%)</title><rect x="99.0315%" y="213" width="0.0462%" height="15" fill="rgb(230,69,54)" fg:x="93633337554" fg:w="43689456"/><text x="99.2815%" y="223.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="373" width="0.0221%" height="15" fill="rgb(214,135,41)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="357" width="0.0221%" height="15" fill="rgb(237,67,25)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="341" width="0.0221%" height="15" fill="rgb(222,189,50)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="325" width="0.0221%" height="15" fill="rgb(245,148,34)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="309" width="0.0221%" height="15" fill="rgb(222,29,6)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="293" width="0.0221%" height="15" fill="rgb(221,189,43)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="277" width="0.0221%" height="15" fill="rgb(207,36,27)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="261" width="0.0221%" height="15" fill="rgb(217,90,24)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="245" width="0.0221%" height="15" fill="rgb(224,66,35)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="229" width="0.0221%" height="15" fill="rgb(221,13,50)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="213" width="0.0221%" height="15" fill="rgb(236,68,49)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="197" width="0.0221%" height="15" fill="rgb(229,146,28)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="181" width="0.0221%" height="15" fill="rgb(225,31,38)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (20,852,933 samples, 0.02%)</title><rect x="99.0777%" y="165" width="0.0221%" height="15" fill="rgb(250,208,3)" fg:x="93677027010" fg:w="20852933"/><text x="99.3277%" y="175.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (49,239,143 samples, 0.05%)</title><rect x="99.1279%" y="181" width="0.0521%" height="15" fill="rgb(246,54,23)" fg:x="93724567487" fg:w="49239143"/><text x="99.3779%" y="191.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (49,239,143 samples, 0.05%)</title><rect x="99.1279%" y="165" width="0.0521%" height="15" fill="rgb(243,76,11)" fg:x="93724567487" fg:w="49239143"/><text x="99.3779%" y="175.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (74,557,028 samples, 0.08%)</title><rect x="99.1147%" y="229" width="0.0789%" height="15" fill="rgb(245,21,50)" fg:x="93712018996" fg:w="74557028"/><text x="99.3647%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (74,557,028 samples, 0.08%)</title><rect x="99.1147%" y="213" width="0.0789%" height="15" fill="rgb(228,9,43)" fg:x="93712018996" fg:w="74557028"/><text x="99.3647%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (70,305,360 samples, 0.07%)</title><rect x="99.1192%" y="197" width="0.0744%" height="15" fill="rgb(208,100,47)" fg:x="93716270664" fg:w="70305360"/><text x="99.3692%" y="207.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (99,507,896 samples, 0.11%)</title><rect x="99.1096%" y="277" width="0.1052%" height="15" fill="rgb(232,26,8)" fg:x="93707240298" fg:w="99507896"/><text x="99.3596%" y="287.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (99,507,896 samples, 0.11%)</title><rect x="99.1096%" y="261" width="0.1052%" height="15" fill="rgb(216,166,38)" fg:x="93707240298" fg:w="99507896"/><text x="99.3596%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (99,507,896 samples, 0.11%)</title><rect x="99.1096%" y="245" width="0.1052%" height="15" fill="rgb(251,202,51)" fg:x="93707240298" fg:w="99507896"/><text x="99.3596%" y="255.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (20,172,170 samples, 0.02%)</title><rect x="99.1935%" y="229" width="0.0213%" height="15" fill="rgb(254,216,34)" fg:x="93786576024" fg:w="20172170"/><text x="99.4435%" y="239.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (123,793,704 samples, 0.13%)</title><rect x="99.0997%" y="373" width="0.1309%" height="15" fill="rgb(251,32,27)" fg:x="93697879943" fg:w="123793704"/><text x="99.3497%" y="383.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (123,793,704 samples, 0.13%)</title><rect x="99.0997%" y="357" width="0.1309%" height="15" fill="rgb(208,127,28)" fg:x="93697879943" fg:w="123793704"/><text x="99.3497%" y="367.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (123,793,704 samples, 0.13%)</title><rect x="99.0997%" y="341" width="0.1309%" height="15" fill="rgb(224,137,22)" fg:x="93697879943" fg:w="123793704"/><text x="99.3497%" y="351.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (123,793,704 samples, 0.13%)</title><rect x="99.0997%" y="325" width="0.1309%" height="15" fill="rgb(254,70,32)" fg:x="93697879943" fg:w="123793704"/><text x="99.3497%" y="335.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (114,433,349 samples, 0.12%)</title><rect x="99.1096%" y="309" width="0.1210%" height="15" fill="rgb(229,75,37)" fg:x="93707240298" fg:w="114433349"/><text x="99.3596%" y="319.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (114,433,349 samples, 0.12%)</title><rect x="99.1096%" y="293" width="0.1210%" height="15" fill="rgb(252,64,23)" fg:x="93707240298" fg:w="114433349"/><text x="99.3596%" y="303.50"></text></g><g><title>matrixmultiply::gemm::pack (14,925,453 samples, 0.02%)</title><rect x="99.2149%" y="277" width="0.0158%" height="15" fill="rgb(232,162,48)" fg:x="93806748194" fg:w="14925453"/><text x="99.4649%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14,925,453 samples, 0.02%)</title><rect x="99.2149%" y="261" width="0.0158%" height="15" fill="rgb(246,160,12)" fg:x="93806748194" fg:w="14925453"/><text x="99.4649%" y="271.50"></text></g><g><title>core::ptr::write (16,839,286 samples, 0.02%)</title><rect x="99.2433%" y="245" width="0.0178%" height="15" fill="rgb(247,166,0)" fg:x="93833665728" fg:w="16839286"/><text x="99.4933%" y="255.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::predict_with_normalization (862,637,922 samples, 0.91%)</title><rect x="99.0270%" y="405" width="0.9124%" height="15" fill="rgb(249,219,21)" fg:x="93629126037" fg:w="862637922"/><text x="99.2770%" y="415.50"></text></g><g><title>rkl::core::layers::Dense::forward (858,426,405 samples, 0.91%)</title><rect x="99.0315%" y="389" width="0.9079%" height="15" fill="rgb(205,209,3)" fg:x="93633337554" fg:w="858426405"/><text x="99.2815%" y="399.50"></text></g><g><title>rkl::core::activations::Activation::forward (670,090,312 samples, 0.71%)</title><rect x="99.2306%" y="373" width="0.7087%" height="15" fill="rgb(243,44,1)" fg:x="93821673647" fg:w="670090312"/><text x="99.4806%" y="383.50"></text></g><g><title>rkl::core::activations::tanh_forward (670,090,312 samples, 0.71%)</title><rect x="99.2306%" y="357" width="0.7087%" height="15" fill="rgb(206,159,16)" fg:x="93821673647" fg:w="670090312"/><text x="99.4806%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (670,090,312 samples, 0.71%)</title><rect x="99.2306%" y="341" width="0.7087%" height="15" fill="rgb(244,77,30)" fg:x="93821673647" fg:w="670090312"/><text x="99.4806%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (670,090,312 samples, 0.71%)</title><rect x="99.2306%" y="325" width="0.7087%" height="15" fill="rgb(218,69,12)" fg:x="93821673647" fg:w="670090312"/><text x="99.4806%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (670,090,312 samples, 0.71%)</title><rect x="99.2306%" y="309" width="0.7087%" height="15" fill="rgb(212,87,7)" fg:x="93821673647" fg:w="670090312"/><text x="99.4806%" y="319.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (670,090,312 samples, 0.71%)</title><rect x="99.2306%" y="293" width="0.7087%" height="15" fill="rgb(245,114,25)" fg:x="93821673647" fg:w="670090312"/><text x="99.4806%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (670,090,312 samples, 0.71%)</title><rect x="99.2306%" y="277" width="0.7087%" height="15" fill="rgb(210,61,42)" fg:x="93821673647" fg:w="670090312"/><text x="99.4806%" y="287.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (670,090,312 samples, 0.71%)</title><rect x="99.2306%" y="261" width="0.7087%" height="15" fill="rgb(211,52,33)" fg:x="93821673647" fg:w="670090312"/><text x="99.4806%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (641,258,945 samples, 0.68%)</title><rect x="99.2611%" y="245" width="0.6782%" height="15" fill="rgb(234,58,33)" fg:x="93850505014" fg:w="641258945"/><text x="99.5111%" y="255.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (641,258,945 samples, 0.68%)</title><rect x="99.2611%" y="229" width="0.6782%" height="15" fill="rgb(220,115,36)" fg:x="93850505014" fg:w="641258945"/><text x="99.5111%" y="239.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (641,258,945 samples, 0.68%)</title><rect x="99.2611%" y="213" width="0.6782%" height="15" fill="rgb(243,153,54)" fg:x="93850505014" fg:w="641258945"/><text x="99.5111%" y="223.50"></text></g><g><title>tanhf32x (637,104,013 samples, 0.67%)</title><rect x="99.2655%" y="197" width="0.6738%" height="15" fill="rgb(251,47,18)" fg:x="93854659946" fg:w="637104013"/><text x="99.5155%" y="207.50"></text></g><g><title>[libm.so.6] (399,746,638 samples, 0.42%)</title><rect x="99.5166%" y="181" width="0.4228%" height="15" fill="rgb(242,102,42)" fg:x="94092017321" fg:w="399746638"/><text x="99.7666%" y="191.50"></text></g><g><title>_start (94,457,718,403 samples, 99.90%)</title><rect x="0.0401%" y="693" width="99.9034%" height="15" fill="rgb(234,31,38)" fg:x="37949991" fg:w="94457718403"/><text x="0.2901%" y="703.50">_start</text></g><g><title>__libc_start_main (94,457,718,403 samples, 99.90%)</title><rect x="0.0401%" y="677" width="99.9034%" height="15" fill="rgb(221,117,51)" fg:x="37949991" fg:w="94457718403"/><text x="0.2901%" y="687.50">__libc_start_main</text></g><g><title>[libc.so.6] (94,457,718,403 samples, 99.90%)</title><rect x="0.0401%" y="661" width="99.9034%" height="15" fill="rgb(212,20,18)" fg:x="37949991" fg:w="94457718403"/><text x="0.2901%" y="671.50">[libc.so.6]</text></g><g><title>main (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="645" width="99.8993%" height="15" fill="rgb(245,133,36)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="629" width="99.8993%" height="15" fill="rgb(212,6,19)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="613" width="99.8993%" height="15" fill="rgb(218,1,36)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="597" width="99.8993%" height="15" fill="rgb(246,84,54)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="581" width="99.8993%" height="15" fill="rgb(242,110,6)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="591.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="565" width="99.8993%" height="15" fill="rgb(214,47,5)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="575.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="549" width="99.8993%" height="15" fill="rgb(218,159,25)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="533" width="99.8993%" height="15" fill="rgb(215,211,28)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="517" width="99.8993%" height="15" fill="rgb(238,59,32)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="501" width="99.8993%" height="15" fill="rgb(226,82,3)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="485" width="99.8993%" height="15" fill="rgb(240,164,32)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="495.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="469" width="99.8993%" height="15" fill="rgb(232,46,7)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="453" width="99.8993%" height="15" fill="rgb(229,129,53)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>main_benchmark::main (94,453,830,244 samples, 99.90%)</title><rect x="0.0443%" y="437" width="99.8993%" height="15" fill="rgb(234,188,29)" fg:x="41838150" fg:w="94453830244"/><text x="0.2943%" y="447.50">main_benchmark::main</text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit (94,449,640,823 samples, 99.89%)</title><rect x="0.0487%" y="421" width="99.8948%" height="15" fill="rgb(246,141,4)" fg:x="46027571" fg:w="94449640823"/><text x="0.2987%" y="431.50">rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit</text></g><g><title>plotters::chart::mesh::MeshStyle&lt;X,Y,DB&gt;::draw (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="693" width="0.0215%" height="15" fill="rgb(229,23,39)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="703.50"></text></g><g><title>plotters::chart::context::cartesian2d::draw_impl::&lt;impl plotters::chart::context::ChartContext&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;&gt;::draw_mesh (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="677" width="0.0215%" height="15" fill="rgb(206,12,3)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="687.50"></text></g><g><title>plotters::chart::context::cartesian2d::draw_impl::&lt;impl plotters::chart::context::ChartContext&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;&gt;::draw_mesh_lines (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="661" width="0.0215%" height="15" fill="rgb(252,226,20)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="671.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;::draw_mesh (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="645" width="0.0215%" height="15" fill="rgb(216,123,35)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="655.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::backend_ops (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="629" width="0.0215%" height="15" fill="rgb(212,68,40)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="639.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;::draw_mesh::_{{closure}} (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="613" width="0.0215%" height="15" fill="rgb(254,125,32)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="623.50"></text></g><g><title>plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;::draw_mesh (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="597" width="0.0215%" height="15" fill="rgb(253,97,22)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="607.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;::draw_mesh::_{{closure}}::_{{closure}} (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="581" width="0.0215%" height="15" fill="rgb(241,101,14)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="591.50"></text></g><g><title>plotters::chart::context::cartesian2d::draw_impl::_&lt;impl plotters::chart::context::ChartContext&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;&gt;::draw_mesh_lines::_{{closure}} (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="565" width="0.0215%" height="15" fill="rgb(238,103,29)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="575.50"></text></g><g><title>plotters::coord::ranged2d::cartesian::MeshLine&lt;X,Y&gt;::draw (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="549" width="0.0215%" height="15" fill="rgb(233,195,47)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="559.50"></text></g><g><title>&lt;plotters_bitmap::bitmap::BitMapBackend&lt;P&gt; as plotters_backend::DrawingBackend&gt;::draw_line (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="533" width="0.0215%" height="15" fill="rgb(246,218,30)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="543.50"></text></g><g><title>&lt;plotters_bitmap::bitmap_pixel::rgb::RGBPixel as plotters_bitmap::bitmap_pixel::pixel_format::PixelFormat&gt;::blend_rect_fast (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="517" width="0.0215%" height="15" fill="rgb(219,145,47)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="527.50"></text></g><g><title>plotters_bitmap::bitmap_pixel::pixel_format::blend (20,330,956 samples, 0.02%)</title><rect x="99.9474%" y="501" width="0.0215%" height="15" fill="rgb(243,12,26)" fg:x="94499331948" fg:w="20330956"/><text x="100.1974%" y="511.50"></text></g><g><title>rkl::plot::plot_comparision::plot_comparison (17,687,148 samples, 0.02%)</title><rect x="99.9689%" y="693" width="0.0187%" height="15" fill="rgb(214,87,16)" fg:x="94519662904" fg:w="17687148"/><text x="100.2189%" y="703.50"></text></g><g><title>all (94,549,087,732 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(208,99,42)" fg:x="0" fg:w="94549087732"/><text x="0.2500%" y="735.50"></text></g><g><title>main_benchmark (94,549,087,732 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(253,99,2)" fg:x="0" fg:w="94549087732"/><text x="0.2500%" y="719.50">main_benchmark</text></g><g><title>rkl::plot::plot_errors_over_epochs::plot_errors_over_epochs (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="693" width="0.0124%" height="15" fill="rgb(220,168,23)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="703.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::present (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="677" width="0.0124%" height="15" fill="rgb(242,38,24)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="687.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::backend_ops (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="661" width="0.0124%" height="15" fill="rgb(225,182,9)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="671.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::present::_{{closure}} (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="645" width="0.0124%" height="15" fill="rgb(243,178,37)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="655.50"></text></g><g><title>&lt;plotters_bitmap::bitmap::BitMapBackend&lt;P&gt; as plotters_backend::DrawingBackend&gt;::present (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="629" width="0.0124%" height="15" fill="rgb(232,139,19)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="639.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::save (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="613" width="0.0124%" height="15" fill="rgb(225,201,24)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="623.50"></text></g><g><title>image::dynimage::save_buffer (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="597" width="0.0124%" height="15" fill="rgb(221,47,46)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="607.50"></text></g><g><title>image::io::free_functions::save_buffer_impl (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="581" width="0.0124%" height="15" fill="rgb(249,23,13)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="591.50"></text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="565" width="0.0124%" height="15" fill="rgb(219,9,5)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="575.50"></text></g><g><title>image::io::free_functions::write_buffer_impl (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="549" width="0.0124%" height="15" fill="rgb(254,171,16)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="559.50"></text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="533" width="0.0124%" height="15" fill="rgb(230,171,20)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="543.50"></text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="517" width="0.0124%" height="15" fill="rgb(210,71,41)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="527.50"></text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (11,737,680 samples, 0.01%)</title><rect x="99.9876%" y="501" width="0.0124%" height="15" fill="rgb(206,173,20)" fg:x="94537350052" fg:w="11737680"/><text x="100.2376%" y="511.50"></text></g></svg></svg>