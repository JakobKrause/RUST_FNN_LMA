<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="69170449300"><g><title>[libc.so.6] (7,535,777 samples, 0.01%)</title><rect x="0.0108%" y="677" width="0.0109%" height="15" fill="rgb(227,0,7)" fg:x="7439889" fg:w="7535777"/><text x="0.2608%" y="687.50"></text></g><g><title>[libexpat.so.1.10.0] (9,921,821 samples, 0.01%)</title><rect x="0.0450%" y="565" width="0.0143%" height="15" fill="rgb(217,0,24)" fg:x="31159178" fg:w="9921821"/><text x="0.2950%" y="575.50"></text></g><g><title>[libfontconfig.so.1.14.0] (29,196,067 samples, 0.04%)</title><rect x="0.0217%" y="677" width="0.0422%" height="15" fill="rgb(221,193,54)" fg:x="14975666" fg:w="29196067"/><text x="0.2717%" y="687.50"></text></g><g><title>[libfontconfig.so.1.14.0] (29,196,067 samples, 0.04%)</title><rect x="0.0217%" y="661" width="0.0422%" height="15" fill="rgb(248,212,6)" fg:x="14975666" fg:w="29196067"/><text x="0.2717%" y="671.50"></text></g><g><title>XML_ParseBuffer (18,973,560 samples, 0.03%)</title><rect x="0.0364%" y="645" width="0.0274%" height="15" fill="rgb(208,68,35)" fg:x="25198173" fg:w="18973560"/><text x="0.2864%" y="655.50"></text></g><g><title>[libexpat.so.1.10.0] (18,973,560 samples, 0.03%)</title><rect x="0.0364%" y="629" width="0.0274%" height="15" fill="rgb(232,128,0)" fg:x="25198173" fg:w="18973560"/><text x="0.2864%" y="639.50"></text></g><g><title>[libexpat.so.1.10.0] (18,973,560 samples, 0.03%)</title><rect x="0.0364%" y="613" width="0.0274%" height="15" fill="rgb(207,160,47)" fg:x="25198173" fg:w="18973560"/><text x="0.2864%" y="623.50"></text></g><g><title>[libexpat.so.1.10.0] (18,973,560 samples, 0.03%)</title><rect x="0.0364%" y="597" width="0.0274%" height="15" fill="rgb(228,23,34)" fg:x="25198173" fg:w="18973560"/><text x="0.2864%" y="607.50"></text></g><g><title>[libexpat.so.1.10.0] (18,973,560 samples, 0.03%)</title><rect x="0.0364%" y="581" width="0.0274%" height="15" fill="rgb(218,30,26)" fg:x="25198173" fg:w="18973560"/><text x="0.2864%" y="591.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (478,294,529 samples, 0.69%)</title><rect x="0.0806%" y="389" width="0.6915%" height="15" fill="rgb(220,122,19)" fg:x="55739748" fg:w="478294529"/><text x="0.3306%" y="399.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (478,294,529 samples, 0.69%)</title><rect x="0.0806%" y="373" width="0.6915%" height="15" fill="rgb(250,228,42)" fg:x="55739748" fg:w="478294529"/><text x="0.3306%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (478,294,529 samples, 0.69%)</title><rect x="0.0806%" y="357" width="0.6915%" height="15" fill="rgb(240,193,28)" fg:x="55739748" fg:w="478294529"/><text x="0.3306%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (478,294,529 samples, 0.69%)</title><rect x="0.0806%" y="341" width="0.6915%" height="15" fill="rgb(216,20,37)" fg:x="55739748" fg:w="478294529"/><text x="0.3306%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (478,294,529 samples, 0.69%)</title><rect x="0.0806%" y="325" width="0.6915%" height="15" fill="rgb(206,188,39)" fg:x="55739748" fg:w="478294529"/><text x="0.3306%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (478,294,529 samples, 0.69%)</title><rect x="0.0806%" y="309" width="0.6915%" height="15" fill="rgb(217,207,13)" fg:x="55739748" fg:w="478294529"/><text x="0.3306%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (474,100,915 samples, 0.69%)</title><rect x="0.0866%" y="293" width="0.6854%" height="15" fill="rgb(231,73,38)" fg:x="59933362" fg:w="474100915"/><text x="0.3366%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (474,100,915 samples, 0.69%)</title><rect x="0.0866%" y="277" width="0.6854%" height="15" fill="rgb(225,20,46)" fg:x="59933362" fg:w="474100915"/><text x="0.3366%" y="287.50"></text></g><g><title>[libc.so.6] (474,100,915 samples, 0.69%)</title><rect x="0.0866%" y="261" width="0.6854%" height="15" fill="rgb(210,31,41)" fg:x="59933362" fg:w="474100915"/><text x="0.3366%" y="271.50"></text></g><g><title>[unknown] (137,138,263 samples, 0.20%)</title><rect x="0.5738%" y="245" width="0.1983%" height="15" fill="rgb(221,200,47)" fg:x="396896014" fg:w="137138263"/><text x="0.8238%" y="255.50"></text></g><g><title>[unknown] (39,486,173 samples, 0.06%)</title><rect x="0.7150%" y="229" width="0.0571%" height="15" fill="rgb(226,26,5)" fg:x="494548104" fg:w="39486173"/><text x="0.9650%" y="239.50"></text></g><g><title>[unknown] (11,500,822 samples, 0.02%)</title><rect x="0.7554%" y="213" width="0.0166%" height="15" fill="rgb(249,33,26)" fg:x="522533455" fg:w="11500822"/><text x="1.0054%" y="223.50"></text></g><g><title>[unknown] (7,355,252 samples, 0.01%)</title><rect x="0.7614%" y="197" width="0.0106%" height="15" fill="rgb(235,183,28)" fg:x="526679025" fg:w="7355252"/><text x="1.0114%" y="207.50"></text></g><g><title>[unknown] (7,355,252 samples, 0.01%)</title><rect x="0.7614%" y="181" width="0.0106%" height="15" fill="rgb(221,5,38)" fg:x="526679025" fg:w="7355252"/><text x="1.0114%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8,459,474 samples, 0.01%)</title><rect x="0.7721%" y="389" width="0.0122%" height="15" fill="rgb(247,18,42)" fg:x="534034277" fg:w="8459474"/><text x="1.0221%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8,459,474 samples, 0.01%)</title><rect x="0.7721%" y="373" width="0.0122%" height="15" fill="rgb(241,131,45)" fg:x="534034277" fg:w="8459474"/><text x="1.0221%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (8,459,474 samples, 0.01%)</title><rect x="0.7721%" y="357" width="0.0122%" height="15" fill="rgb(249,31,29)" fg:x="534034277" fg:w="8459474"/><text x="1.0221%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (8,459,474 samples, 0.01%)</title><rect x="0.7721%" y="341" width="0.0122%" height="15" fill="rgb(225,111,53)" fg:x="534034277" fg:w="8459474"/><text x="1.0221%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (8,459,474 samples, 0.01%)</title><rect x="0.7721%" y="325" width="0.0122%" height="15" fill="rgb(238,160,17)" fg:x="534034277" fg:w="8459474"/><text x="1.0221%" y="335.50"></text></g><g><title>malloc (8,459,474 samples, 0.01%)</title><rect x="0.7721%" y="309" width="0.0122%" height="15" fill="rgb(214,148,48)" fg:x="534034277" fg:w="8459474"/><text x="1.0221%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (28,745,315 samples, 0.04%)</title><rect x="0.8191%" y="245" width="0.0416%" height="15" fill="rgb(232,36,49)" fg:x="566546974" fg:w="28745315"/><text x="1.0691%" y="255.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::ad_solve_lower_triangular_unchecked_mut (90,386,565 samples, 0.13%)</title><rect x="0.8026%" y="325" width="0.1307%" height="15" fill="rgb(209,103,24)" fg:x="555188125" fg:w="90386565"/><text x="1.0526%" y="335.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::xx_solve_lower_triangular_vector_unchecked_mut (90,386,565 samples, 0.13%)</title><rect x="0.8026%" y="309" width="0.1307%" height="15" fill="rgb(229,88,8)" fg:x="555188125" fg:w="90386565"/><text x="1.0526%" y="319.50"></text></g><g><title>nalgebra::linalg::solve::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::ad_solve_lower_triangular_unchecked_mut::_{{closure}} (82,002,746 samples, 0.12%)</title><rect x="0.8148%" y="293" width="0.1186%" height="15" fill="rgb(213,181,19)" fg:x="563571944" fg:w="82002746"/><text x="1.0648%" y="303.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (82,002,746 samples, 0.12%)</title><rect x="0.8148%" y="277" width="0.1186%" height="15" fill="rgb(254,191,54)" fg:x="563571944" fg:w="82002746"/><text x="1.0648%" y="287.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx (82,002,746 samples, 0.12%)</title><rect x="0.8148%" y="261" width="0.1186%" height="15" fill="rgb(241,83,37)" fg:x="563571944" fg:w="82002746"/><text x="1.0648%" y="271.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (45,875,254 samples, 0.07%)</title><rect x="0.8670%" y="245" width="0.0663%" height="15" fill="rgb(233,36,39)" fg:x="599699436" fg:w="45875254"/><text x="1.1170%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (49,295,866 samples, 0.07%)</title><rect x="1.0081%" y="229" width="0.0713%" height="15" fill="rgb(226,3,54)" fg:x="697296404" fg:w="49295866"/><text x="1.2581%" y="239.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (42,536,737 samples, 0.06%)</title><rect x="1.0794%" y="229" width="0.0615%" height="15" fill="rgb(245,192,40)" fg:x="746592270" fg:w="42536737"/><text x="1.3294%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (304,528,418 samples, 0.44%)</title><rect x="0.7964%" y="389" width="0.4403%" height="15" fill="rgb(238,167,29)" fg:x="550892770" fg:w="304528418"/><text x="1.0464%" y="399.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit::_{{closure}} (304,528,418 samples, 0.44%)</title><rect x="0.7964%" y="373" width="0.4403%" height="15" fill="rgb(232,182,51)" fg:x="550892770" fg:w="304528418"/><text x="1.0464%" y="383.50"></text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::solve (304,528,418 samples, 0.44%)</title><rect x="0.7964%" y="357" width="0.4403%" height="15" fill="rgb(231,60,39)" fg:x="550892770" fg:w="304528418"/><text x="1.0464%" y="367.50"></text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::solve_mut (300,233,063 samples, 0.43%)</title><rect x="0.8026%" y="341" width="0.4340%" height="15" fill="rgb(208,69,12)" fg:x="555188125" fg:w="300233063"/><text x="1.0526%" y="351.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::solve_lower_triangular_unchecked_mut (209,846,498 samples, 0.30%)</title><rect x="0.9333%" y="325" width="0.3034%" height="15" fill="rgb(235,93,37)" fg:x="645574690" fg:w="209846498"/><text x="1.1833%" y="335.50"></text></g><g><title>nalgebra::linalg::solve::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::solve_lower_triangular_vector_unchecked_mut (209,846,498 samples, 0.30%)</title><rect x="0.9333%" y="309" width="0.3034%" height="15" fill="rgb(213,116,39)" fg:x="645574690" fg:w="209846498"/><text x="1.1833%" y="319.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (209,846,498 samples, 0.30%)</title><rect x="0.9333%" y="293" width="0.3034%" height="15" fill="rgb(222,207,29)" fg:x="645574690" fg:w="209846498"/><text x="1.1833%" y="303.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (209,846,498 samples, 0.30%)</title><rect x="0.9333%" y="277" width="0.3034%" height="15" fill="rgb(206,96,30)" fg:x="645574690" fg:w="209846498"/><text x="1.1833%" y="287.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (209,846,498 samples, 0.30%)</title><rect x="0.9333%" y="261" width="0.3034%" height="15" fill="rgb(218,138,4)" fg:x="645574690" fg:w="209846498"/><text x="1.1833%" y="271.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (209,846,498 samples, 0.30%)</title><rect x="0.9333%" y="245" width="0.3034%" height="15" fill="rgb(250,191,14)" fg:x="645574690" fg:w="209846498"/><text x="1.1833%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (66,292,181 samples, 0.10%)</title><rect x="1.1408%" y="229" width="0.0958%" height="15" fill="rgb(239,60,40)" fg:x="789129007" fg:w="66292181"/><text x="1.3908%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (66,292,181 samples, 0.10%)</title><rect x="1.1408%" y="213" width="0.0958%" height="15" fill="rgb(206,27,48)" fg:x="789129007" fg:w="66292181"/><text x="1.3908%" y="223.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (66,292,181 samples, 0.10%)</title><rect x="1.1408%" y="197" width="0.0958%" height="15" fill="rgb(225,35,8)" fg:x="789129007" fg:w="66292181"/><text x="1.3908%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (66,292,181 samples, 0.10%)</title><rect x="1.1408%" y="181" width="0.0958%" height="15" fill="rgb(250,213,24)" fg:x="789129007" fg:w="66292181"/><text x="1.3908%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt; (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="389" width="0.0246%" height="15" fill="rgb(247,123,22)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt; (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="373" width="0.0246%" height="15" fill="rgb(231,138,38)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="357" width="0.0246%" height="15" fill="rgb(231,145,46)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="341" width="0.0246%" height="15" fill="rgb(251,118,11)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="325" width="0.0246%" height="15" fill="rgb(217,147,25)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="309" width="0.0246%" height="15" fill="rgb(247,81,37)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="293" width="0.0246%" height="15" fill="rgb(209,12,38)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="277" width="0.0246%" height="15" fill="rgb(227,1,9)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="287.50"></text></g><g><title>cfree (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="261" width="0.0246%" height="15" fill="rgb(248,47,43)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="271.50"></text></g><g><title>[libc.so.6] (17,007,537 samples, 0.02%)</title><rect x="1.2551%" y="245" width="0.0246%" height="15" fill="rgb(221,10,30)" fg:x="868151492" fg:w="17007537"/><text x="1.5051%" y="255.50"></text></g><g><title>__default_morecore (12,629,680 samples, 0.02%)</title><rect x="1.2614%" y="229" width="0.0183%" height="15" fill="rgb(210,229,1)" fg:x="872529349" fg:w="12629680"/><text x="1.5114%" y="239.50"></text></g><g><title>__sbrk (12,629,680 samples, 0.02%)</title><rect x="1.2614%" y="213" width="0.0183%" height="15" fill="rgb(222,148,37)" fg:x="872529349" fg:w="12629680"/><text x="1.5114%" y="223.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_column_slice (11,354,578 samples, 0.02%)</title><rect x="1.2857%" y="389" width="0.0164%" height="15" fill="rgb(234,67,33)" fg:x="889329116" fg:w="11354578"/><text x="1.5357%" y="399.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_column_slice_generic (11,354,578 samples, 0.02%)</title><rect x="1.2857%" y="373" width="0.0164%" height="15" fill="rgb(247,98,35)" fg:x="889329116" fg:w="11354578"/><text x="1.5357%" y="383.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator_generic (11,354,578 samples, 0.02%)</title><rect x="1.2857%" y="357" width="0.0164%" height="15" fill="rgb(247,138,52)" fg:x="889329116" fg:w="11354578"/><text x="1.5357%" y="367.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::allocate_from_iterator (11,354,578 samples, 0.02%)</title><rect x="1.2857%" y="341" width="0.0164%" height="15" fill="rgb(213,79,30)" fg:x="889329116" fg:w="11354578"/><text x="1.5357%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (11,354,578 samples, 0.02%)</title><rect x="1.2857%" y="325" width="0.0164%" height="15" fill="rgb(246,177,23)" fg:x="889329116" fg:w="11354578"/><text x="1.5357%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11,354,578 samples, 0.02%)</title><rect x="1.2857%" y="309" width="0.0164%" height="15" fill="rgb(230,62,27)" fg:x="889329116" fg:w="11354578"/><text x="1.5357%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11,354,578 samples, 0.02%)</title><rect x="1.2857%" y="293" width="0.0164%" height="15" fill="rgb(216,154,8)" fg:x="889329116" fg:w="11354578"/><text x="1.5357%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (11,354,578 samples, 0.02%)</title><rect x="1.2857%" y="277" width="0.0164%" height="15" fill="rgb(244,35,45)" fg:x="889329116" fg:w="11354578"/><text x="1.5357%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (109,003,215 samples, 0.16%)</title><rect x="1.3119%" y="357" width="0.1576%" height="15" fill="rgb(251,115,12)" fg:x="907447224" fg:w="109003215"/><text x="1.5619%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (109,003,215 samples, 0.16%)</title><rect x="1.3119%" y="341" width="0.1576%" height="15" fill="rgb(240,54,50)" fg:x="907447224" fg:w="109003215"/><text x="1.5619%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (109,003,215 samples, 0.16%)</title><rect x="1.3119%" y="325" width="0.1576%" height="15" fill="rgb(233,84,52)" fg:x="907447224" fg:w="109003215"/><text x="1.5619%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (109,003,215 samples, 0.16%)</title><rect x="1.3119%" y="309" width="0.1576%" height="15" fill="rgb(207,117,47)" fg:x="907447224" fg:w="109003215"/><text x="1.5619%" y="319.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_row_slice (1,324,115,522 samples, 1.91%)</title><rect x="1.3021%" y="389" width="1.9143%" height="15" fill="rgb(249,43,39)" fg:x="900683694" fg:w="1324115522"/><text x="1.5521%" y="399.50">n..</text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_row_slice_generic (1,324,115,522 samples, 1.91%)</title><rect x="1.3021%" y="373" width="1.9143%" height="15" fill="rgb(209,38,44)" fg:x="900683694" fg:w="1324115522"/><text x="1.5521%" y="383.50">n..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,208,348,777 samples, 1.75%)</title><rect x="1.4695%" y="357" width="1.7469%" height="15" fill="rgb(236,212,23)" fg:x="1016450439" fg:w="1208348777"/><text x="1.7195%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,208,348,777 samples, 1.75%)</title><rect x="1.4695%" y="341" width="1.7469%" height="15" fill="rgb(242,79,21)" fg:x="1016450439" fg:w="1208348777"/><text x="1.7195%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,135,540,434 samples, 1.64%)</title><rect x="1.5747%" y="325" width="1.6417%" height="15" fill="rgb(211,96,35)" fg:x="1089258782" fg:w="1135540434"/><text x="1.8247%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (831,447,041 samples, 1.20%)</title><rect x="3.2164%" y="213" width="1.2020%" height="15" fill="rgb(253,215,40)" fg:x="2224799216" fg:w="831447041"/><text x="3.4664%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (831,447,041 samples, 1.20%)</title><rect x="3.2164%" y="197" width="1.2020%" height="15" fill="rgb(211,81,21)" fg:x="2224799216" fg:w="831447041"/><text x="3.4664%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (831,447,041 samples, 1.20%)</title><rect x="3.2164%" y="181" width="1.2020%" height="15" fill="rgb(208,190,38)" fg:x="2224799216" fg:w="831447041"/><text x="3.4664%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (831,447,041 samples, 1.20%)</title><rect x="3.2164%" y="165" width="1.2020%" height="15" fill="rgb(235,213,38)" fg:x="2224799216" fg:w="831447041"/><text x="3.4664%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (831,447,041 samples, 1.20%)</title><rect x="3.2164%" y="149" width="1.2020%" height="15" fill="rgb(237,122,38)" fg:x="2224799216" fg:w="831447041"/><text x="3.4664%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each::check::_{{closure}} (831,447,041 samples, 1.20%)</title><rect x="3.2164%" y="133" width="1.2020%" height="15" fill="rgb(244,218,35)" fg:x="2224799216" fg:w="831447041"/><text x="3.4664%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (831,447,041 samples, 1.20%)</title><rect x="3.2164%" y="117" width="1.2020%" height="15" fill="rgb(240,68,47)" fg:x="2224799216" fg:w="831447041"/><text x="3.4664%" y="127.50"></text></g><g><title>core::ptr::write (831,447,041 samples, 1.20%)</title><rect x="3.2164%" y="101" width="1.2020%" height="15" fill="rgb(210,16,53)" fg:x="2224799216" fg:w="831447041"/><text x="3.4664%" y="111.50"></text></g><g><title>[libc.so.6] (831,447,041 samples, 1.20%)</title><rect x="3.2164%" y="85" width="1.2020%" height="15" fill="rgb(235,124,12)" fg:x="2224799216" fg:w="831447041"/><text x="3.4664%" y="95.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::identity (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="389" width="1.2080%" height="15" fill="rgb(224,169,11)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="399.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::identity_generic (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="373" width="1.2080%" height="15" fill="rgb(250,166,2)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="383.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_diagonal_element_generic (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="357" width="1.2080%" height="15" fill="rgb(242,216,29)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="367.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::zeros_generic (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="341" width="1.2080%" height="15" fill="rgb(230,116,27)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="351.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_element_generic (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="325" width="1.2080%" height="15" fill="rgb(228,99,48)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="335.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator_generic (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="309" width="1.2080%" height="15" fill="rgb(253,11,6)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="319.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::allocate_from_iterator (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="293" width="1.2080%" height="15" fill="rgb(247,143,39)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="277" width="1.2080%" height="15" fill="rgb(236,97,10)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="261" width="1.2080%" height="15" fill="rgb(233,208,19)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="245" width="1.2080%" height="15" fill="rgb(216,164,2)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (835,601,359 samples, 1.21%)</title><rect x="3.2164%" y="229" width="1.2080%" height="15" fill="rgb(220,129,5)" fg:x="2224799216" fg:w="835601359"/><text x="3.4664%" y="239.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (2,650,007,034 samples, 3.83%)</title><rect x="4.4289%" y="357" width="3.8311%" height="15" fill="rgb(242,17,10)" fg:x="3063493859" fg:w="2650007034"/><text x="4.6789%" y="367.50">&lt;nal..</text></g><g><title>[unknown] (195,177,505 samples, 0.28%)</title><rect x="7.9779%" y="341" width="0.2822%" height="15" fill="rgb(242,107,0)" fg:x="5518323388" fg:w="195177505"/><text x="8.2279%" y="351.50"></text></g><g><title>[unknown] (141,631,369 samples, 0.20%)</title><rect x="8.0553%" y="325" width="0.2048%" height="15" fill="rgb(251,28,31)" fg:x="5571869524" fg:w="141631369"/><text x="8.3053%" y="335.50"></text></g><g><title>[unknown] (35,806,504 samples, 0.05%)</title><rect x="8.2083%" y="309" width="0.0518%" height="15" fill="rgb(233,223,10)" fg:x="5677694389" fg:w="35806504"/><text x="8.4583%" y="319.50"></text></g><g><title>[unknown] (16,131,966 samples, 0.02%)</title><rect x="8.2367%" y="293" width="0.0233%" height="15" fill="rgb(215,21,27)" fg:x="5697368927" fg:w="16131966"/><text x="8.4867%" y="303.50"></text></g><g><title>[unknown] (16,131,966 samples, 0.02%)</title><rect x="8.2367%" y="277" width="0.0233%" height="15" fill="rgb(232,23,21)" fg:x="5697368927" fg:w="16131966"/><text x="8.4867%" y="287.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (420,797,171 samples, 0.61%)</title><rect x="8.2600%" y="357" width="0.6083%" height="15" fill="rgb(244,5,23)" fg:x="5713500893" fg:w="420797171"/><text x="8.5100%" y="367.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (160,742,918 samples, 0.23%)</title><rect x="8.9175%" y="325" width="0.2324%" height="15" fill="rgb(226,81,46)" fg:x="6168292630" fg:w="160742918"/><text x="9.1675%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (160,742,918 samples, 0.23%)</title><rect x="8.9175%" y="309" width="0.2324%" height="15" fill="rgb(247,70,30)" fg:x="6168292630" fg:w="160742918"/><text x="9.1675%" y="319.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose (3,320,872,848 samples, 4.80%)</title><rect x="4.4244%" y="389" width="4.8010%" height="15" fill="rgb(212,68,19)" fg:x="3060400575" fg:w="3320872848"/><text x="4.6744%" y="399.50">nalgeb..</text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose_to_uninit (3,317,779,564 samples, 4.80%)</title><rect x="4.4289%" y="373" width="4.7965%" height="15" fill="rgb(240,187,13)" fg:x="3063493859" fg:w="3317779564"/><text x="4.6789%" y="383.50">nalgeb..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (246,975,359 samples, 0.36%)</title><rect x="8.8684%" y="357" width="0.3571%" height="15" fill="rgb(223,113,26)" fg:x="6134298064" fg:w="246975359"/><text x="9.1184%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (246,975,359 samples, 0.36%)</title><rect x="8.8684%" y="341" width="0.3571%" height="15" fill="rgb(206,192,2)" fg:x="6134298064" fg:w="246975359"/><text x="9.1184%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (52,237,875 samples, 0.08%)</title><rect x="9.1499%" y="325" width="0.0755%" height="15" fill="rgb(241,108,4)" fg:x="6329035548" fg:w="52237875"/><text x="9.3999%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (313,627,923 samples, 0.45%)</title><rect x="9.2254%" y="341" width="0.4534%" height="15" fill="rgb(247,173,49)" fg:x="6381273423" fg:w="313627923"/><text x="9.4754%" y="351.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (25,603,079 samples, 0.04%)</title><rect x="9.6788%" y="341" width="0.0370%" height="15" fill="rgb(224,114,35)" fg:x="6694901346" fg:w="25603079"/><text x="9.9288%" y="351.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (395,017,183 samples, 0.57%)</title><rect x="9.2254%" y="389" width="0.5711%" height="15" fill="rgb(245,159,27)" fg:x="6381273423" fg:w="395017183"/><text x="9.4754%" y="399.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (395,017,183 samples, 0.57%)</title><rect x="9.2254%" y="373" width="0.5711%" height="15" fill="rgb(245,172,44)" fg:x="6381273423" fg:w="395017183"/><text x="9.4754%" y="383.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (395,017,183 samples, 0.57%)</title><rect x="9.2254%" y="357" width="0.5711%" height="15" fill="rgb(236,23,11)" fg:x="6381273423" fg:w="395017183"/><text x="9.4754%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (55,786,181 samples, 0.08%)</title><rect x="9.7159%" y="341" width="0.0807%" height="15" fill="rgb(205,117,38)" fg:x="6720504425" fg:w="55786181"/><text x="9.9659%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (55,786,181 samples, 0.08%)</title><rect x="9.7159%" y="325" width="0.0807%" height="15" fill="rgb(237,72,25)" fg:x="6720504425" fg:w="55786181"/><text x="9.9659%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (55,786,181 samples, 0.08%)</title><rect x="9.7159%" y="309" width="0.0807%" height="15" fill="rgb(244,70,9)" fg:x="6720504425" fg:w="55786181"/><text x="9.9659%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (55,786,181 samples, 0.08%)</title><rect x="9.7159%" y="293" width="0.0807%" height="15" fill="rgb(217,125,39)" fg:x="6720504425" fg:w="55786181"/><text x="9.9659%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,716,888,612 samples, 2.48%)</title><rect x="9.9968%" y="325" width="2.4821%" height="15" fill="rgb(235,36,10)" fg:x="6914817149" fg:w="1716888612"/><text x="10.2468%" y="335.50">co..</text></g><g><title>[unknown] (94,000,400 samples, 0.14%)</title><rect x="12.3430%" y="309" width="0.1359%" height="15" fill="rgb(251,123,47)" fg:x="8537705361" fg:w="94000400"/><text x="12.5930%" y="319.50"></text></g><g><title>[unknown] (35,872,279 samples, 0.05%)</title><rect x="12.4270%" y="293" width="0.0519%" height="15" fill="rgb(221,13,13)" fg:x="8595833482" fg:w="35872279"/><text x="12.6770%" y="303.50"></text></g><g><title>matrixmultiply::gemm::pack (1,878,661,907 samples, 2.72%)</title><rect x="9.8119%" y="341" width="2.7160%" height="15" fill="rgb(238,131,9)" fg:x="6786940445" fg:w="1878661907"/><text x="10.0619%" y="351.50">ma..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (33,896,591 samples, 0.05%)</title><rect x="12.4789%" y="325" width="0.0490%" height="15" fill="rgb(211,50,8)" fg:x="8631705761" fg:w="33896591"/><text x="12.7289%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (33,896,591 samples, 0.05%)</title><rect x="12.4789%" y="309" width="0.0490%" height="15" fill="rgb(245,182,24)" fg:x="8631705761" fg:w="33896591"/><text x="12.7289%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (33,896,591 samples, 0.05%)</title><rect x="12.4789%" y="293" width="0.0490%" height="15" fill="rgb(242,14,37)" fg:x="8631705761" fg:w="33896591"/><text x="12.7289%" y="303.50"></text></g><g><title>&lt;matrixmultiply::util::RangeChunk as core::iter::traits::iterator::Iterator&gt;::next (19,024,879 samples, 0.03%)</title><rect x="12.5435%" y="277" width="0.0275%" height="15" fill="rgb(246,228,12)" fg:x="8676416755" fg:w="19024879"/><text x="12.7935%" y="287.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (18,787,777,678 samples, 27.16%)</title><rect x="14.9214%" y="213" width="27.1616%" height="15" fill="rgb(213,55,15)" fg:x="10321217632" fg:w="18787777678"/><text x="15.1714%" y="223.50">&lt;matrixmultiply::x86::FusedMulAdd as matrixm..</text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (18,787,777,678 samples, 27.16%)</title><rect x="14.9214%" y="197" width="27.1616%" height="15" fill="rgb(209,9,3)" fg:x="10321217632" fg:w="18787777678"/><text x="15.1714%" y="207.50">core::core_arch::x86::fma::_mm256_fmadd_pd</text></g><g><title>core::core_arch::x86::avx::_mm256_blend_pd (92,290,251 samples, 0.13%)</title><rect x="42.0830%" y="213" width="0.1334%" height="15" fill="rgb(230,59,30)" fg:x="29108995310" fg:w="92290251"/><text x="42.3330%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_broadcast_sd (23,895,231 samples, 0.03%)</title><rect x="42.2164%" y="213" width="0.0345%" height="15" fill="rgb(209,121,21)" fg:x="29201285561" fg:w="23895231"/><text x="42.4664%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set1_pd (23,895,231 samples, 0.03%)</title><rect x="42.2164%" y="197" width="0.0345%" height="15" fill="rgb(220,109,13)" fg:x="29201285561" fg:w="23895231"/><text x="42.4664%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_pd (23,895,231 samples, 0.03%)</title><rect x="42.2164%" y="181" width="0.0345%" height="15" fill="rgb(232,18,1)" fg:x="29201285561" fg:w="23895231"/><text x="42.4664%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (5,715,266,239 samples, 8.26%)</title><rect x="42.2510%" y="213" width="8.2626%" height="15" fill="rgb(215,41,42)" fg:x="29225180792" fg:w="5715266239"/><text x="42.5010%" y="223.50">core::core_a..</text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_pd (316,977,183 samples, 0.46%)</title><rect x="50.5135%" y="213" width="0.4583%" height="15" fill="rgb(224,123,36)" fg:x="34940447031" fg:w="316977183"/><text x="50.7635%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (316,977,183 samples, 0.46%)</title><rect x="50.5135%" y="197" width="0.4583%" height="15" fill="rgb(240,125,3)" fg:x="34940447031" fg:w="316977183"/><text x="50.7635%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_mul_pd (51,058,772 samples, 0.07%)</title><rect x="50.9718%" y="213" width="0.0738%" height="15" fill="rgb(205,98,50)" fg:x="35257424214" fg:w="51058772"/><text x="51.2218%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_pd (550,374,206 samples, 0.80%)</title><rect x="51.0456%" y="213" width="0.7957%" height="15" fill="rgb(205,185,37)" fg:x="35308482986" fg:w="550374206"/><text x="51.2956%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_shuffle_pd (807,532,806 samples, 1.17%)</title><rect x="51.8413%" y="213" width="1.1675%" height="15" fill="rgb(238,207,15)" fg:x="35858857192" fg:w="807532806"/><text x="52.0913%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (302,473,244 samples, 0.44%)</title><rect x="53.0087%" y="213" width="0.4373%" height="15" fill="rgb(213,199,42)" fg:x="36666389998" fg:w="302473244"/><text x="53.2587%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (302,473,244 samples, 0.44%)</title><rect x="53.0087%" y="197" width="0.4373%" height="15" fill="rgb(235,201,11)" fg:x="36666389998" fg:w="302473244"/><text x="53.2587%" y="207.50"></text></g><g><title>core::ptr::write_unaligned (302,473,244 samples, 0.44%)</title><rect x="53.0087%" y="181" width="0.4373%" height="15" fill="rgb(207,46,11)" fg:x="36666389998" fg:w="302473244"/><text x="53.2587%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (302,473,244 samples, 0.44%)</title><rect x="53.0087%" y="165" width="0.4373%" height="15" fill="rgb(241,35,35)" fg:x="36666389998" fg:w="302473244"/><text x="53.2587%" y="175.50"></text></g><g><title>[unknown] (142,950,171 samples, 0.21%)</title><rect x="53.2394%" y="149" width="0.2067%" height="15" fill="rgb(243,32,47)" fg:x="36825913071" fg:w="142950171"/><text x="53.4894%" y="159.50"></text></g><g><title>[unknown] (60,645,309 samples, 0.09%)</title><rect x="53.3584%" y="133" width="0.0877%" height="15" fill="rgb(247,202,23)" fg:x="36908217933" fg:w="60645309"/><text x="53.6084%" y="143.50"></text></g><g><title>[unknown] (26,162,674 samples, 0.04%)</title><rect x="53.4082%" y="117" width="0.0378%" height="15" fill="rgb(219,102,11)" fg:x="36942700568" fg:w="26162674"/><text x="53.6582%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (114,550,322 samples, 0.17%)</title><rect x="53.4460%" y="213" width="0.1656%" height="15" fill="rgb(243,110,44)" fg:x="36968863242" fg:w="114550322"/><text x="53.6960%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (114,550,322 samples, 0.17%)</title><rect x="53.4460%" y="197" width="0.1656%" height="15" fill="rgb(222,74,54)" fg:x="36968863242" fg:w="114550322"/><text x="53.6960%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (65,871,729 samples, 0.10%)</title><rect x="53.5164%" y="181" width="0.0952%" height="15" fill="rgb(216,99,12)" fg:x="37017541835" fg:w="65871729"/><text x="53.7664%" y="191.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (28,431,820,045 samples, 41.10%)</title><rect x="12.6041%" y="261" width="41.1040%" height="15" fill="rgb(226,22,26)" fg:x="8718344978" fg:w="28431820045"/><text x="12.8541%" y="271.50">&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel:..</text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (28,416,637,384 samples, 41.08%)</title><rect x="12.6261%" y="245" width="41.0820%" height="15" fill="rgb(217,163,10)" fg:x="8733527639" fg:w="28416637384"/><text x="12.8761%" y="255.50">matrixmultiply::dgemm_kernel::kernel_target_fma</text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (28,349,993,924 samples, 40.99%)</title><rect x="12.7224%" y="229" width="40.9857%" height="15" fill="rgb(213,25,53)" fg:x="8800171099" fg:w="28349993924"/><text x="12.9724%" y="239.50">matrixmultiply::dgemm_kernel::kernel_x86_avx</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (66,751,459 samples, 0.10%)</title><rect x="53.6116%" y="213" width="0.0965%" height="15" fill="rgb(252,105,26)" fg:x="37083413564" fg:w="66751459"/><text x="53.8616%" y="223.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (336,060,126 samples, 0.49%)</title><rect x="53.7455%" y="197" width="0.4858%" height="15" fill="rgb(220,39,43)" fg:x="37176017287" fg:w="336060126"/><text x="53.9955%" y="207.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (336,060,126 samples, 0.49%)</title><rect x="53.7455%" y="181" width="0.4858%" height="15" fill="rgb(229,68,48)" fg:x="37176017287" fg:w="336060126"/><text x="53.9955%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (107,683,131 samples, 0.16%)</title><rect x="54.2314%" y="197" width="0.1557%" height="15" fill="rgb(252,8,32)" fg:x="37512077413" fg:w="107683131"/><text x="54.4814%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_pd (21,713,590 samples, 0.03%)</title><rect x="54.3870%" y="197" width="0.0314%" height="15" fill="rgb(223,20,43)" fg:x="37619760544" fg:w="21713590"/><text x="54.6370%" y="207.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (492,034,041 samples, 0.71%)</title><rect x="53.7124%" y="245" width="0.7113%" height="15" fill="rgb(229,81,49)" fg:x="37153119632" fg:w="492034041"/><text x="53.9624%" y="255.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (492,034,041 samples, 0.71%)</title><rect x="53.7124%" y="229" width="0.7113%" height="15" fill="rgb(236,28,36)" fg:x="37153119632" fg:w="492034041"/><text x="53.9624%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (492,034,041 samples, 0.71%)</title><rect x="53.7124%" y="213" width="0.7113%" height="15" fill="rgb(249,185,26)" fg:x="37153119632" fg:w="492034041"/><text x="53.9624%" y="223.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (503,458,839 samples, 0.73%)</title><rect x="53.7124%" y="261" width="0.7279%" height="15" fill="rgb(249,174,33)" fg:x="37153119632" fg:w="503458839"/><text x="53.9624%" y="271.50"></text></g><g><title>matrixmultiply::gemm::c_to_masked_ab_beta_c (11,424,798 samples, 0.02%)</title><rect x="54.4238%" y="245" width="0.0165%" height="15" fill="rgb(233,201,37)" fg:x="37645153673" fg:w="11424798"/><text x="54.6738%" y="255.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (29,001,718,679 samples, 41.93%)</title><rect x="12.5279%" y="309" width="41.9279%" height="15" fill="rgb(221,78,26)" fg:x="8665602352" fg:w="29001718679"/><text x="12.7779%" y="319.50">matrixmultiply::gemm::gemm_packed</text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (28,997,872,438 samples, 41.92%)</title><rect x="12.5335%" y="293" width="41.9223%" height="15" fill="rgb(250,127,30)" fg:x="8669448593" fg:w="28997872438"/><text x="12.7835%" y="303.50">matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each</text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (28,971,879,397 samples, 41.88%)</title><rect x="12.5710%" y="277" width="41.8848%" height="15" fill="rgb(230,49,44)" fg:x="8695441634" fg:w="28971879397"/><text x="12.8210%" y="287.50">matrixmultiply::gemm::gemm_packed::_{{closure}}</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,442,555,878 samples, 3.53%)</title><rect x="54.5245%" y="293" width="3.5312%" height="15" fill="rgb(229,67,23)" fg:x="37714812759" fg:w="2442555878"/><text x="54.7745%" y="303.50">cor..</text></g><g><title>matrixmultiply::gemm::gemm_loop (33,399,775,191 samples, 48.29%)</title><rect x="9.8071%" y="357" width="48.2862%" height="15" fill="rgb(249,83,47)" fg:x="6783614845" fg:w="33399775191"/><text x="10.0571%" y="367.50">matrixmultiply::gemm::gemm_loop</text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (31,517,787,684 samples, 45.57%)</title><rect x="12.5279%" y="341" width="45.5654%" height="15" fill="rgb(215,43,3)" fg:x="8665602352" fg:w="31517787684"/><text x="12.7779%" y="351.50">matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each</text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (31,517,787,684 samples, 45.57%)</title><rect x="12.5279%" y="325" width="45.5654%" height="15" fill="rgb(238,154,13)" fg:x="8665602352" fg:w="31517787684"/><text x="12.7779%" y="335.50">matrixmultiply::gemm::gemm_loop::_{{closure}}</text></g><g><title>matrixmultiply::gemm::pack (2,516,069,005 samples, 3.64%)</title><rect x="54.4558%" y="309" width="3.6375%" height="15" fill="rgb(219,56,2)" fg:x="37667321031" fg:w="2516069005"/><text x="54.7058%" y="319.50">matr..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (26,021,399 samples, 0.04%)</title><rect x="58.0557%" y="293" width="0.0376%" height="15" fill="rgb(233,0,4)" fg:x="40157368637" fg:w="26021399"/><text x="58.3057%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (26,021,399 samples, 0.04%)</title><rect x="58.0557%" y="277" width="0.0376%" height="15" fill="rgb(235,30,7)" fg:x="40157368637" fg:w="26021399"/><text x="58.3057%" y="287.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (21,850,821 samples, 0.03%)</title><rect x="58.0617%" y="261" width="0.0316%" height="15" fill="rgb(250,79,13)" fg:x="40161539215" fg:w="21850821"/><text x="58.3117%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (21,850,821 samples, 0.03%)</title><rect x="58.0617%" y="245" width="0.0316%" height="15" fill="rgb(211,146,34)" fg:x="40161539215" fg:w="21850821"/><text x="58.3117%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (27,581,249 samples, 0.04%)</title><rect x="58.1777%" y="309" width="0.0399%" height="15" fill="rgb(228,22,38)" fg:x="40241783367" fg:w="27581249"/><text x="58.4277%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (36,856,683 samples, 0.05%)</title><rect x="58.2176%" y="309" width="0.0533%" height="15" fill="rgb(235,168,5)" fg:x="40269364616" fg:w="36856683"/><text x="58.4676%" y="319.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (68,610,571 samples, 0.10%)</title><rect x="58.2709%" y="309" width="0.0992%" height="15" fill="rgb(221,155,16)" fg:x="40306221299" fg:w="68610571"/><text x="58.5209%" y="319.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (33,629,155,765 samples, 48.62%)</title><rect x="9.7965%" y="373" width="48.6178%" height="15" fill="rgb(215,215,53)" fg:x="6776290606" fg:w="33629155765"/><text x="10.0465%" y="383.50">nalgebra::base::blas_uninit::gemm_uninit</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (222,056,335 samples, 0.32%)</title><rect x="58.0933%" y="357" width="0.3210%" height="15" fill="rgb(223,4,10)" fg:x="40183390036" fg:w="222056335"/><text x="58.3433%" y="367.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (222,056,335 samples, 0.32%)</title><rect x="58.0933%" y="341" width="0.3210%" height="15" fill="rgb(234,103,6)" fg:x="40183390036" fg:w="222056335"/><text x="58.3433%" y="351.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (222,056,335 samples, 0.32%)</title><rect x="58.0933%" y="325" width="0.3210%" height="15" fill="rgb(227,97,0)" fg:x="40183390036" fg:w="222056335"/><text x="58.3433%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (30,614,501 samples, 0.04%)</title><rect x="58.3701%" y="309" width="0.0443%" height="15" fill="rgb(234,150,53)" fg:x="40374831870" fg:w="30614501"/><text x="58.6201%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (30,614,501 samples, 0.04%)</title><rect x="58.3701%" y="293" width="0.0443%" height="15" fill="rgb(228,201,54)" fg:x="40374831870" fg:w="30614501"/><text x="58.6201%" y="303.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (26,528,955 samples, 0.04%)</title><rect x="58.3760%" y="277" width="0.0384%" height="15" fill="rgb(222,22,37)" fg:x="40378917416" fg:w="26528955"/><text x="58.6260%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (26,528,955 samples, 0.04%)</title><rect x="58.3760%" y="261" width="0.0384%" height="15" fill="rgb(237,53,32)" fg:x="40378917416" fg:w="26528955"/><text x="58.6260%" y="271.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (33,632,330,929 samples, 48.62%)</title><rect x="9.7965%" y="389" width="48.6224%" height="15" fill="rgb(233,25,53)" fg:x="6776290606" fg:w="33632330929"/><text x="10.0465%" y="399.50">nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;f64,R,C,S&gt;&gt; for f64&gt;::mul (513,143,461 samples, 0.74%)</title><rect x="58.4189%" y="389" width="0.7419%" height="15" fill="rgb(210,40,34)" fg:x="40408621535" fg:w="513143461"/><text x="58.6689%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (24,415,069 samples, 0.04%)</title><rect x="60.2654%" y="341" width="0.0353%" height="15" fill="rgb(241,220,44)" fg:x="41685864981" fg:w="24415069"/><text x="60.5154%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (24,415,069 samples, 0.04%)</title><rect x="60.2654%" y="325" width="0.0353%" height="15" fill="rgb(235,28,35)" fg:x="41685864981" fg:w="24415069"/><text x="60.5154%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (7,916,435 samples, 0.01%)</title><rect x="60.3007%" y="341" width="0.0114%" height="15" fill="rgb(210,56,17)" fg:x="41710280050" fg:w="7916435"/><text x="60.5507%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (7,207,128,081 samples, 10.42%)</title><rect x="64.9479%" y="277" width="10.4194%" height="15" fill="rgb(224,130,29)" fg:x="44924762196" fg:w="7207128081"/><text x="65.1979%" y="287.50">&lt;f64 as core::o..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (3,075,252,882 samples, 4.45%)</title><rect x="75.3673%" y="277" width="4.4459%" height="15" fill="rgb(235,212,8)" fg:x="52131890277" fg:w="3075252882"/><text x="75.6173%" y="287.50">core:..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2,856,373,021 samples, 4.13%)</title><rect x="79.9626%" y="245" width="4.1295%" height="15" fill="rgb(223,33,50)" fg:x="55310503569" fg:w="2856373021"/><text x="80.2126%" y="255.50">&lt;usi..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2,856,373,021 samples, 4.13%)</title><rect x="79.9626%" y="229" width="4.1295%" height="15" fill="rgb(219,149,13)" fg:x="55310503569" fg:w="2856373021"/><text x="80.2126%" y="239.50">core..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (16,457,510,670 samples, 23.79%)</title><rect x="60.3122%" y="341" width="23.7927%" height="15" fill="rgb(250,156,29)" fg:x="41718196485" fg:w="16457510670"/><text x="60.5622%" y="351.50">nalgebra::base::blas::&lt;impl nalgebra::..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (16,457,510,670 samples, 23.79%)</title><rect x="60.3122%" y="325" width="23.7927%" height="15" fill="rgb(216,193,19)" fg:x="41718196485" fg:w="16457510670"/><text x="60.5622%" y="335.50">nalgebra::base::blas::&lt;impl nalgebra::..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (16,457,510,670 samples, 23.79%)</title><rect x="60.3122%" y="309" width="23.7927%" height="15" fill="rgb(216,135,14)" fg:x="41718196485" fg:w="16457510670"/><text x="60.5622%" y="319.50">nalgebra::base::blas_uninit::axcpy_uni..</text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (16,457,510,670 samples, 23.79%)</title><rect x="60.3122%" y="293" width="23.7927%" height="15" fill="rgb(241,47,5)" fg:x="41718196485" fg:w="16457510670"/><text x="60.5622%" y="303.50">nalgebra::base::blas_uninit::array_axc..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,968,563,996 samples, 4.29%)</title><rect x="79.8132%" y="277" width="4.2917%" height="15" fill="rgb(233,42,35)" fg:x="55207143159" fg:w="2968563996"/><text x="80.0632%" y="287.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,968,563,996 samples, 4.29%)</title><rect x="79.8132%" y="261" width="4.2917%" height="15" fill="rgb(231,13,6)" fg:x="55207143159" fg:w="2968563996"/><text x="80.0632%" y="271.50">&lt;core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8,830,565 samples, 0.01%)</title><rect x="84.0921%" y="245" width="0.0128%" height="15" fill="rgb(207,181,40)" fg:x="58166876590" fg:w="8830565"/><text x="84.3421%" y="255.50"></text></g><g><title>nalgebra::base::matrix_view::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::columns_range_pair_mut (48,936,848 samples, 0.07%)</title><rect x="84.1049%" y="341" width="0.0707%" height="15" fill="rgb(254,173,49)" fg:x="58175707155" fg:w="48936848"/><text x="84.3549%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::DivAssign&gt;::div_assign (264,779,786 samples, 0.38%)</title><rect x="84.1756%" y="325" width="0.3828%" height="15" fill="rgb(221,1,38)" fg:x="58224644003" fg:w="264779786"/><text x="84.4256%" y="335.50"></text></g><g><title>nalgebra::linalg::decomposition::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,D,S&gt;&gt;::cholesky (17,582,663,897 samples, 25.42%)</title><rect x="59.1669%" y="389" width="25.4193%" height="15" fill="rgb(206,124,46)" fg:x="40925988221" fg:w="17582663897"/><text x="59.4169%" y="399.50">nalgebra::linalg::decomposition::&lt;impl na..</text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::new (17,582,663,897 samples, 25.42%)</title><rect x="59.1669%" y="373" width="25.4193%" height="15" fill="rgb(249,21,11)" fg:x="40925988221" fg:w="17582663897"/><text x="59.4169%" y="383.50">nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;..</text></g><g><title>nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;::new_internal (17,582,663,897 samples, 25.42%)</title><rect x="59.1669%" y="357" width="25.4193%" height="15" fill="rgb(222,201,40)" fg:x="40925988221" fg:w="17582663897"/><text x="59.4169%" y="367.50">nalgebra::linalg::cholesky::Cholesky&lt;T,D&gt;..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::DivAssign&lt;T&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::div_assign (284,008,115 samples, 0.41%)</title><rect x="84.1756%" y="341" width="0.4106%" height="15" fill="rgb(235,61,29)" fg:x="58224644003" fg:w="284008115"/><text x="84.4256%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (19,228,329 samples, 0.03%)</title><rect x="84.5584%" y="325" width="0.0278%" height="15" fill="rgb(219,207,3)" fg:x="58489423789" fg:w="19228329"/><text x="84.8084%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (19,228,329 samples, 0.03%)</title><rect x="84.5584%" y="309" width="0.0278%" height="15" fill="rgb(222,56,46)" fg:x="58489423789" fg:w="19228329"/><text x="84.8084%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (19,228,329 samples, 0.03%)</title><rect x="84.5584%" y="293" width="0.0278%" height="15" fill="rgb(239,76,54)" fg:x="58489423789" fg:w="19228329"/><text x="84.8084%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (19,228,329 samples, 0.03%)</title><rect x="84.5584%" y="277" width="0.0278%" height="15" fill="rgb(231,124,27)" fg:x="58489423789" fg:w="19228329"/><text x="84.8084%" y="287.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (53,909,607 samples, 0.08%)</title><rect x="84.5862%" y="389" width="0.0779%" height="15" fill="rgb(249,195,6)" fg:x="58508652118" fg:w="53909607"/><text x="84.8362%" y="399.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (53,909,607 samples, 0.08%)</title><rect x="84.5862%" y="373" width="0.0779%" height="15" fill="rgb(237,174,47)" fg:x="58508652118" fg:w="53909607"/><text x="84.8362%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (53,909,607 samples, 0.08%)</title><rect x="84.5862%" y="357" width="0.0779%" height="15" fill="rgb(206,201,31)" fg:x="58508652118" fg:w="53909607"/><text x="84.8362%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (53,909,607 samples, 0.08%)</title><rect x="84.5862%" y="341" width="0.0779%" height="15" fill="rgb(231,57,52)" fg:x="58508652118" fg:w="53909607"/><text x="84.8362%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (53,909,607 samples, 0.08%)</title><rect x="84.5862%" y="325" width="0.0779%" height="15" fill="rgb(248,177,22)" fg:x="58508652118" fg:w="53909607"/><text x="84.8362%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (53,909,607 samples, 0.08%)</title><rect x="84.5862%" y="309" width="0.0779%" height="15" fill="rgb(215,211,37)" fg:x="58508652118" fg:w="53909607"/><text x="84.8362%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (53,909,607 samples, 0.08%)</title><rect x="84.5862%" y="293" width="0.0779%" height="15" fill="rgb(241,128,51)" fg:x="58508652118" fg:w="53909607"/><text x="84.8362%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (53,909,607 samples, 0.08%)</title><rect x="84.5862%" y="277" width="0.0779%" height="15" fill="rgb(227,165,31)" fg:x="58508652118" fg:w="53909607"/><text x="84.8362%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (49,761,523 samples, 0.07%)</title><rect x="84.5922%" y="261" width="0.0719%" height="15" fill="rgb(228,167,24)" fg:x="58512800202" fg:w="49761523"/><text x="84.8422%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49,761,523 samples, 0.07%)</title><rect x="84.5922%" y="245" width="0.0719%" height="15" fill="rgb(228,143,12)" fg:x="58512800202" fg:w="49761523"/><text x="84.8422%" y="255.50"></text></g><g><title>[libc.so.6] (49,761,523 samples, 0.07%)</title><rect x="84.5922%" y="229" width="0.0719%" height="15" fill="rgb(249,149,8)" fg:x="58512800202" fg:w="49761523"/><text x="84.8422%" y="239.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="373" width="0.2659%" height="15" fill="rgb(243,35,44)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="357" width="0.2659%" height="15" fill="rgb(246,89,9)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="341" width="0.2659%" height="15" fill="rgb(233,213,13)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="325" width="0.2659%" height="15" fill="rgb(233,141,41)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="309" width="0.2659%" height="15" fill="rgb(239,167,4)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="293" width="0.2659%" height="15" fill="rgb(209,217,16)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="277" width="0.2659%" height="15" fill="rgb(219,88,35)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="261" width="0.2659%" height="15" fill="rgb(220,193,23)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="245" width="0.2659%" height="15" fill="rgb(230,90,52)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="229" width="0.2659%" height="15" fill="rgb(252,106,19)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="239.50"></text></g><g><title>[libc.so.6] (183,928,042 samples, 0.27%)</title><rect x="84.6825%" y="213" width="0.2659%" height="15" fill="rgb(206,74,20)" fg:x="58575256146" fg:w="183928042"/><text x="84.9325%" y="223.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="373" width="0.0408%" height="15" fill="rgb(230,138,44)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="357" width="0.0408%" height="15" fill="rgb(235,182,43)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="341" width="0.0408%" height="15" fill="rgb(242,16,51)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="325" width="0.0408%" height="15" fill="rgb(248,9,4)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="309" width="0.0408%" height="15" fill="rgb(210,31,22)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="293" width="0.0408%" height="15" fill="rgb(239,54,39)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="277" width="0.0408%" height="15" fill="rgb(230,99,41)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="261" width="0.0408%" height="15" fill="rgb(253,106,12)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="245" width="0.0408%" height="15" fill="rgb(213,46,41)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="229" width="0.0408%" height="15" fill="rgb(215,133,35)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="213" width="0.0408%" height="15" fill="rgb(213,28,5)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="197" width="0.0408%" height="15" fill="rgb(215,77,49)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="181" width="0.0408%" height="15" fill="rgb(248,100,22)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (28,190,528 samples, 0.04%)</title><rect x="84.9484%" y="165" width="0.0408%" height="15" fill="rgb(208,67,9)" fg:x="58759184188" fg:w="28190528"/><text x="85.1984%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (24,019,893 samples, 0.03%)</title><rect x="84.9544%" y="149" width="0.0347%" height="15" fill="rgb(219,133,21)" fg:x="58763354823" fg:w="24019893"/><text x="85.2044%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24,019,893 samples, 0.03%)</title><rect x="84.9544%" y="133" width="0.0347%" height="15" fill="rgb(246,46,29)" fg:x="58763354823" fg:w="24019893"/><text x="85.2044%" y="143.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (20,930,335 samples, 0.03%)</title><rect x="84.9589%" y="117" width="0.0303%" height="15" fill="rgb(246,185,52)" fg:x="58766444381" fg:w="20930335"/><text x="85.2089%" y="127.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (8,591,114 samples, 0.01%)</title><rect x="84.9767%" y="101" width="0.0124%" height="15" fill="rgb(252,136,11)" fg:x="58778783602" fg:w="8591114"/><text x="85.2267%" y="111.50"></text></g><g><title>matrixmultiply::gemm::make_packing_buffer (8,085,159 samples, 0.01%)</title><rect x="84.9891%" y="309" width="0.0117%" height="15" fill="rgb(219,138,53)" fg:x="58787374716" fg:w="8085159"/><text x="85.2391%" y="319.50"></text></g><g><title>matrixmultiply::aligned_alloc::Alloc&lt;T&gt;::new (8,085,159 samples, 0.01%)</title><rect x="84.9891%" y="293" width="0.0117%" height="15" fill="rgb(211,51,23)" fg:x="58787374716" fg:w="8085159"/><text x="85.2391%" y="303.50"></text></g><g><title>alloc::alloc::alloc (8,085,159 samples, 0.01%)</title><rect x="84.9891%" y="277" width="0.0117%" height="15" fill="rgb(247,221,28)" fg:x="58787374716" fg:w="8085159"/><text x="85.2391%" y="287.50"></text></g><g><title>__rdl_alloc (8,085,159 samples, 0.01%)</title><rect x="84.9891%" y="261" width="0.0117%" height="15" fill="rgb(251,222,45)" fg:x="58787374716" fg:w="8085159"/><text x="85.2391%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8,085,159 samples, 0.01%)</title><rect x="84.9891%" y="245" width="0.0117%" height="15" fill="rgb(217,162,53)" fg:x="58787374716" fg:w="8085159"/><text x="85.2391%" y="255.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (99,508,180 samples, 0.14%)</title><rect x="85.0677%" y="181" width="0.1439%" height="15" fill="rgb(229,93,14)" fg:x="58841717777" fg:w="99508180"/><text x="85.3177%" y="191.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (99,508,180 samples, 0.14%)</title><rect x="85.0677%" y="165" width="0.1439%" height="15" fill="rgb(209,67,49)" fg:x="58841717777" fg:w="99508180"/><text x="85.3177%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (20,298,539 samples, 0.03%)</title><rect x="85.2176%" y="181" width="0.0293%" height="15" fill="rgb(213,87,29)" fg:x="58945420703" fg:w="20298539"/><text x="85.4676%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_shuffle_pd (8,299,614 samples, 0.01%)</title><rect x="85.2528%" y="181" width="0.0120%" height="15" fill="rgb(205,151,52)" fg:x="58969723572" fg:w="8299614"/><text x="85.5028%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (8,910,283 samples, 0.01%)</title><rect x="85.2648%" y="181" width="0.0129%" height="15" fill="rgb(253,215,39)" fg:x="58978023186" fg:w="8910283"/><text x="85.5148%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (8,910,283 samples, 0.01%)</title><rect x="85.2648%" y="165" width="0.0129%" height="15" fill="rgb(221,220,41)" fg:x="58978023186" fg:w="8910283"/><text x="85.5148%" y="175.50"></text></g><g><title>core::ptr::write_unaligned (8,910,283 samples, 0.01%)</title><rect x="85.2648%" y="149" width="0.0129%" height="15" fill="rgb(218,133,21)" fg:x="58978023186" fg:w="8910283"/><text x="85.5148%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8,910,283 samples, 0.01%)</title><rect x="85.2648%" y="133" width="0.0129%" height="15" fill="rgb(221,193,43)" fg:x="58978023186" fg:w="8910283"/><text x="85.5148%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8,362,136 samples, 0.01%)</title><rect x="85.2776%" y="181" width="0.0121%" height="15" fill="rgb(240,128,52)" fg:x="58986933469" fg:w="8362136"/><text x="85.5276%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8,362,136 samples, 0.01%)</title><rect x="85.2776%" y="165" width="0.0121%" height="15" fill="rgb(253,114,12)" fg:x="58986933469" fg:w="8362136"/><text x="85.5276%" y="175.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (204,223,209 samples, 0.30%)</title><rect x="85.0067%" y="229" width="0.2952%" height="15" fill="rgb(215,223,47)" fg:x="58799502994" fg:w="204223209"/><text x="85.2567%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (197,174,742 samples, 0.29%)</title><rect x="85.0169%" y="213" width="0.2851%" height="15" fill="rgb(248,225,23)" fg:x="58806551461" fg:w="197174742"/><text x="85.2669%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (182,040,149 samples, 0.26%)</title><rect x="85.0388%" y="197" width="0.2632%" height="15" fill="rgb(250,108,0)" fg:x="58821686054" fg:w="182040149"/><text x="85.2888%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8,430,598 samples, 0.01%)</title><rect x="85.2897%" y="181" width="0.0122%" height="15" fill="rgb(228,208,7)" fg:x="58995295605" fg:w="8430598"/><text x="85.5397%" y="191.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (20,602,908 samples, 0.03%)</title><rect x="85.3136%" y="165" width="0.0298%" height="15" fill="rgb(244,45,10)" fg:x="59011781809" fg:w="20602908"/><text x="85.5636%" y="175.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (20,602,908 samples, 0.03%)</title><rect x="85.3136%" y="149" width="0.0298%" height="15" fill="rgb(207,125,25)" fg:x="59011781809" fg:w="20602908"/><text x="85.5636%" y="159.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (28,938,648 samples, 0.04%)</title><rect x="85.3077%" y="213" width="0.0418%" height="15" fill="rgb(210,195,18)" fg:x="59007687484" fg:w="28938648"/><text x="85.5577%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (28,938,648 samples, 0.04%)</title><rect x="85.3077%" y="197" width="0.0418%" height="15" fill="rgb(249,80,12)" fg:x="59007687484" fg:w="28938648"/><text x="85.5577%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (24,844,323 samples, 0.04%)</title><rect x="85.3136%" y="181" width="0.0359%" height="15" fill="rgb(221,65,9)" fg:x="59011781809" fg:w="24844323"/><text x="85.5636%" y="191.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (245,325,922 samples, 0.35%)</title><rect x="85.0008%" y="277" width="0.3547%" height="15" fill="rgb(235,49,36)" fg:x="58795459875" fg:w="245325922"/><text x="85.2508%" y="287.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (245,325,922 samples, 0.35%)</title><rect x="85.0008%" y="261" width="0.3547%" height="15" fill="rgb(225,32,20)" fg:x="58795459875" fg:w="245325922"/><text x="85.2508%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (245,325,922 samples, 0.35%)</title><rect x="85.0008%" y="245" width="0.3547%" height="15" fill="rgb(215,141,46)" fg:x="58795459875" fg:w="245325922"/><text x="85.2508%" y="255.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (37,059,594 samples, 0.05%)</title><rect x="85.3019%" y="229" width="0.0536%" height="15" fill="rgb(250,160,47)" fg:x="59003726203" fg:w="37059594"/><text x="85.5519%" y="239.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (321,091,415 samples, 0.46%)</title><rect x="84.9891%" y="373" width="0.4642%" height="15" fill="rgb(216,222,40)" fg:x="58787374716" fg:w="321091415"/><text x="85.2391%" y="383.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (321,091,415 samples, 0.46%)</title><rect x="84.9891%" y="357" width="0.4642%" height="15" fill="rgb(234,217,39)" fg:x="58787374716" fg:w="321091415"/><text x="85.2391%" y="367.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (321,091,415 samples, 0.46%)</title><rect x="84.9891%" y="341" width="0.4642%" height="15" fill="rgb(207,178,40)" fg:x="58787374716" fg:w="321091415"/><text x="85.2391%" y="351.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (321,091,415 samples, 0.46%)</title><rect x="84.9891%" y="325" width="0.4642%" height="15" fill="rgb(221,136,13)" fg:x="58787374716" fg:w="321091415"/><text x="85.2391%" y="335.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (313,006,256 samples, 0.45%)</title><rect x="85.0008%" y="309" width="0.4525%" height="15" fill="rgb(249,199,10)" fg:x="58795459875" fg:w="313006256"/><text x="85.2508%" y="319.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (313,006,256 samples, 0.45%)</title><rect x="85.0008%" y="293" width="0.4525%" height="15" fill="rgb(249,222,13)" fg:x="58795459875" fg:w="313006256"/><text x="85.2508%" y="303.50"></text></g><g><title>matrixmultiply::gemm::pack (67,680,334 samples, 0.10%)</title><rect x="85.3555%" y="277" width="0.0978%" height="15" fill="rgb(244,185,38)" fg:x="59040785797" fg:w="67680334"/><text x="85.6055%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49,486,090 samples, 0.07%)</title><rect x="85.3818%" y="261" width="0.0715%" height="15" fill="rgb(236,202,9)" fg:x="59058980041" fg:w="49486090"/><text x="85.6318%" y="271.50"></text></g><g><title>core::ptr::write (10,316,412 samples, 0.01%)</title><rect x="85.4709%" y="245" width="0.0149%" height="15" fill="rgb(250,229,37)" fg:x="59120586460" fg:w="10316412"/><text x="85.7209%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,386,140,334 samples, 2.00%)</title><rect x="85.4533%" y="277" width="2.0039%" height="15" fill="rgb(206,174,23)" fg:x="59108466131" fg:w="1386140334"/><text x="85.7033%" y="287.50">&lt;..</text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (1,386,139,286 samples, 2.00%)</title><rect x="85.4534%" y="261" width="2.0039%" height="15" fill="rgb(211,33,43)" fg:x="59108467179" fg:w="1386139286"/><text x="85.7034%" y="271.50">n..</text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (1,363,703,593 samples, 1.97%)</title><rect x="85.4858%" y="245" width="1.9715%" height="15" fill="rgb(245,58,50)" fg:x="59130902872" fg:w="1363703593"/><text x="85.7358%" y="255.50">n..</text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (1,363,703,593 samples, 1.97%)</title><rect x="85.4858%" y="229" width="1.9715%" height="15" fill="rgb(244,68,36)" fg:x="59130902872" fg:w="1363703593"/><text x="85.7358%" y="239.50">r..</text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (1,363,703,593 samples, 1.97%)</title><rect x="85.4858%" y="213" width="1.9715%" height="15" fill="rgb(232,229,15)" fg:x="59130902872" fg:w="1363703593"/><text x="85.7358%" y="223.50">s..</text></g><g><title>tanhf32x (1,355,947,582 samples, 1.96%)</title><rect x="85.4970%" y="197" width="1.9603%" height="15" fill="rgb(254,30,23)" fg:x="59138658883" fg:w="1355947582"/><text x="85.7470%" y="207.50">t..</text></g><g><title>[libm.so.6] (892,107,329 samples, 1.29%)</title><rect x="86.1676%" y="181" width="1.2897%" height="15" fill="rgb(235,160,14)" fg:x="59602499136" fg:w="892107329"/><text x="86.4176%" y="191.50"></text></g><g><title>rkl::core::layers::Dense::forward (1,923,541,622 samples, 2.78%)</title><rect x="84.6825%" y="389" width="2.7809%" height="15" fill="rgb(212,155,44)" fg:x="58575256146" fg:w="1923541622"/><text x="84.9325%" y="399.50">rk..</text></g><g><title>rkl::core::activations::Activation::forward (1,390,331,637 samples, 2.01%)</title><rect x="85.4533%" y="373" width="2.0100%" height="15" fill="rgb(226,2,50)" fg:x="59108466131" fg:w="1390331637"/><text x="85.7033%" y="383.50">r..</text></g><g><title>rkl::core::activations::tanh_forward (1,390,331,637 samples, 2.01%)</title><rect x="85.4533%" y="357" width="2.0100%" height="15" fill="rgb(234,177,6)" fg:x="59108466131" fg:w="1390331637"/><text x="85.7033%" y="367.50">r..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (1,390,331,637 samples, 2.01%)</title><rect x="85.4533%" y="341" width="2.0100%" height="15" fill="rgb(217,24,9)" fg:x="59108466131" fg:w="1390331637"/><text x="85.7033%" y="351.50">n..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (1,390,331,637 samples, 2.01%)</title><rect x="85.4533%" y="325" width="2.0100%" height="15" fill="rgb(220,13,46)" fg:x="59108466131" fg:w="1390331637"/><text x="85.7033%" y="335.50">n..</text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (1,390,331,637 samples, 2.01%)</title><rect x="85.4533%" y="309" width="2.0100%" height="15" fill="rgb(239,221,27)" fg:x="59108466131" fg:w="1390331637"/><text x="85.7033%" y="319.50">n..</text></g><g><title>ndarray::iterators::to_vec_mapped (1,390,331,637 samples, 2.01%)</title><rect x="85.4533%" y="293" width="2.0100%" height="15" fill="rgb(222,198,25)" fg:x="59108466131" fg:w="1390331637"/><text x="85.7033%" y="303.50">n..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S,D&gt;&gt; for f64&gt;::mul (8,340,681 samples, 0.01%)</title><rect x="87.4692%" y="373" width="0.0121%" height="15" fill="rgb(211,99,13)" fg:x="60502867696" fg:w="8340681"/><text x="87.7192%" y="383.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (8,340,681 samples, 0.01%)</title><rect x="87.4692%" y="357" width="0.0121%" height="15" fill="rgb(232,111,31)" fg:x="60502867696" fg:w="8340681"/><text x="87.7192%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map_inplace (8,340,681 samples, 0.01%)</title><rect x="87.4692%" y="341" width="0.0121%" height="15" fill="rgb(245,82,37)" fg:x="60502867696" fg:w="8340681"/><text x="87.7192%" y="351.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (8,340,681 samples, 0.01%)</title><rect x="87.4692%" y="325" width="0.0121%" height="15" fill="rgb(227,149,46)" fg:x="60502867696" fg:w="8340681"/><text x="87.7192%" y="335.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul::_{{closure}} (8,340,681 samples, 0.01%)</title><rect x="87.4692%" y="309" width="0.0121%" height="15" fill="rgb(218,36,50)" fg:x="60502867696" fg:w="8340681"/><text x="87.7192%" y="319.50"></text></g><g><title>rkl::core::losses::criteria (20,780,333 samples, 0.03%)</title><rect x="87.4634%" y="389" width="0.0300%" height="15" fill="rgb(226,80,48)" fg:x="60498797768" fg:w="20780333"/><text x="87.7134%" y="399.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (8,369,724 samples, 0.01%)</title><rect x="87.4813%" y="373" width="0.0121%" height="15" fill="rgb(238,224,15)" fg:x="60511208377" fg:w="8369724"/><text x="87.7313%" y="383.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect (8,369,724 samples, 0.01%)</title><rect x="87.4813%" y="357" width="0.0121%" height="15" fill="rgb(241,136,10)" fg:x="60511208377" fg:w="8369724"/><text x="87.7313%" y="367.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned (8,369,724 samples, 0.01%)</title><rect x="87.4813%" y="341" width="0.0121%" height="15" fill="rgb(208,32,45)" fg:x="60511208377" fg:w="8369724"/><text x="87.7313%" y="351.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (8,369,724 samples, 0.01%)</title><rect x="87.4813%" y="325" width="0.0121%" height="15" fill="rgb(207,135,9)" fg:x="60511208377" fg:w="8369724"/><text x="87.7313%" y="335.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (237,343,586 samples, 0.34%)</title><rect x="87.5058%" y="373" width="0.3431%" height="15" fill="rgb(206,86,44)" fg:x="60528167664" fg:w="237343586"/><text x="87.7558%" y="383.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (237,343,586 samples, 0.34%)</title><rect x="87.5058%" y="357" width="0.3431%" height="15" fill="rgb(245,177,15)" fg:x="60528167664" fg:w="237343586"/><text x="87.7558%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (233,871,548 samples, 0.34%)</title><rect x="87.5108%" y="341" width="0.3381%" height="15" fill="rgb(206,64,50)" fg:x="60531639702" fg:w="233871548"/><text x="87.7608%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (233,871,548 samples, 0.34%)</title><rect x="87.5108%" y="325" width="0.3381%" height="15" fill="rgb(234,36,40)" fg:x="60531639702" fg:w="233871548"/><text x="87.7608%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (233,871,548 samples, 0.34%)</title><rect x="87.5108%" y="309" width="0.3381%" height="15" fill="rgb(213,64,8)" fg:x="60531639702" fg:w="233871548"/><text x="87.7608%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (233,871,548 samples, 0.34%)</title><rect x="87.5108%" y="293" width="0.3381%" height="15" fill="rgb(210,75,36)" fg:x="60531639702" fg:w="233871548"/><text x="87.7608%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (233,871,548 samples, 0.34%)</title><rect x="87.5108%" y="277" width="0.3381%" height="15" fill="rgb(229,88,21)" fg:x="60531639702" fg:w="233871548"/><text x="87.7608%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (233,871,548 samples, 0.34%)</title><rect x="87.5108%" y="261" width="0.3381%" height="15" fill="rgb(252,204,47)" fg:x="60531639702" fg:w="233871548"/><text x="87.7608%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (229,945,729 samples, 0.33%)</title><rect x="87.5165%" y="245" width="0.3324%" height="15" fill="rgb(208,77,27)" fg:x="60535565521" fg:w="229945729"/><text x="87.7665%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (229,945,729 samples, 0.33%)</title><rect x="87.5165%" y="229" width="0.3324%" height="15" fill="rgb(221,76,26)" fg:x="60535565521" fg:w="229945729"/><text x="87.7665%" y="239.50"></text></g><g><title>[libc.so.6] (229,945,729 samples, 0.33%)</title><rect x="87.5165%" y="213" width="0.3324%" height="15" fill="rgb(225,139,18)" fg:x="60535565521" fg:w="229945729"/><text x="87.7665%" y="223.50"></text></g><g><title>[unknown] (19,350,971 samples, 0.03%)</title><rect x="87.8210%" y="197" width="0.0280%" height="15" fill="rgb(230,137,11)" fg:x="60746160279" fg:w="19350971"/><text x="88.0710%" y="207.50"></text></g><g><title>[unknown] (19,350,971 samples, 0.03%)</title><rect x="87.8210%" y="181" width="0.0280%" height="15" fill="rgb(212,28,1)" fg:x="60746160279" fg:w="19350971"/><text x="88.0710%" y="191.50"></text></g><g><title>[unknown] (15,183,361 samples, 0.02%)</title><rect x="87.8270%" y="165" width="0.0220%" height="15" fill="rgb(248,164,17)" fg:x="60750327889" fg:w="15183361"/><text x="88.0770%" y="175.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="373" width="0.0439%" height="15" fill="rgb(222,171,42)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="383.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="357" width="0.0439%" height="15" fill="rgb(243,84,45)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="367.50"></text></g><g><title>alloc::vec::from_elem (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="341" width="0.0439%" height="15" fill="rgb(252,49,23)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="325" width="0.0439%" height="15" fill="rgb(215,19,7)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="309" width="0.0439%" height="15" fill="rgb(238,81,41)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="293" width="0.0439%" height="15" fill="rgb(210,199,37)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="277" width="0.0439%" height="15" fill="rgb(244,192,49)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="261" width="0.0439%" height="15" fill="rgb(226,211,11)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="245" width="0.0439%" height="15" fill="rgb(236,162,54)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="229" width="0.0439%" height="15" fill="rgb(220,229,9)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="239.50"></text></g><g><title>[libc.so.6] (30,346,636 samples, 0.04%)</title><rect x="87.8489%" y="213" width="0.0439%" height="15" fill="rgb(250,87,22)" fg:x="60765511250" fg:w="30346636"/><text x="88.0989%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign (1,853,252,831 samples, 2.68%)</title><rect x="87.8928%" y="373" width="2.6793%" height="15" fill="rgb(239,43,17)" fg:x="60795857886" fg:w="1853252831"/><text x="88.1428%" y="383.50">nd..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (1,853,252,831 samples, 2.68%)</title><rect x="87.8928%" y="357" width="2.6793%" height="15" fill="rgb(231,177,25)" fg:x="60795857886" fg:w="1853252831"/><text x="88.1428%" y="367.50">nd..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (1,853,252,831 samples, 2.68%)</title><rect x="87.8928%" y="341" width="2.6793%" height="15" fill="rgb(219,179,1)" fg:x="60795857886" fg:w="1853252831"/><text x="88.1428%" y="351.50">nd..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (1,853,252,831 samples, 2.68%)</title><rect x="87.8928%" y="325" width="2.6793%" height="15" fill="rgb(238,219,53)" fg:x="60795857886" fg:w="1853252831"/><text x="88.1428%" y="335.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (1,853,252,831 samples, 2.68%)</title><rect x="87.8928%" y="309" width="2.6793%" height="15" fill="rgb(232,167,36)" fg:x="60795857886" fg:w="1853252831"/><text x="88.1428%" y="319.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (1,853,252,831 samples, 2.68%)</title><rect x="87.8928%" y="293" width="2.6793%" height="15" fill="rgb(244,19,51)" fg:x="60795857886" fg:w="1853252831"/><text x="88.1428%" y="303.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (1,853,252,831 samples, 2.68%)</title><rect x="87.8928%" y="277" width="2.6793%" height="15" fill="rgb(224,6,22)" fg:x="60795857886" fg:w="1853252831"/><text x="88.1428%" y="287.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (1,853,252,831 samples, 2.68%)</title><rect x="87.8928%" y="261" width="2.6793%" height="15" fill="rgb(224,145,5)" fg:x="60795857886" fg:w="1853252831"/><text x="88.1428%" y="271.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (1,853,252,831 samples, 2.68%)</title><rect x="87.8928%" y="245" width="2.6793%" height="15" fill="rgb(234,130,49)" fg:x="60795857886" fg:w="1853252831"/><text x="88.1428%" y="255.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (1,815,134,420 samples, 2.62%)</title><rect x="87.9479%" y="229" width="2.6241%" height="15" fill="rgb(254,6,2)" fg:x="60833976297" fg:w="1815134420"/><text x="88.1979%" y="239.50">nd..</text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (1,815,134,420 samples, 2.62%)</title><rect x="87.9479%" y="213" width="2.6241%" height="15" fill="rgb(208,96,46)" fg:x="60833976297" fg:w="1815134420"/><text x="88.1979%" y="223.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (1,815,134,420 samples, 2.62%)</title><rect x="87.9479%" y="197" width="2.6241%" height="15" fill="rgb(239,3,39)" fg:x="60833976297" fg:w="1815134420"/><text x="88.1979%" y="207.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (1,815,134,420 samples, 2.62%)</title><rect x="87.9479%" y="181" width="2.6241%" height="15" fill="rgb(233,210,1)" fg:x="60833976297" fg:w="1815134420"/><text x="88.1979%" y="191.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (1,815,134,420 samples, 2.62%)</title><rect x="87.9479%" y="165" width="2.6241%" height="15" fill="rgb(244,137,37)" fg:x="60833976297" fg:w="1815134420"/><text x="88.1979%" y="175.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (1,815,134,420 samples, 2.62%)</title><rect x="87.9479%" y="149" width="2.6241%" height="15" fill="rgb(240,136,2)" fg:x="60833976297" fg:w="1815134420"/><text x="88.1979%" y="159.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (1,815,134,420 samples, 2.62%)</title><rect x="87.9479%" y="133" width="2.6241%" height="15" fill="rgb(239,18,37)" fg:x="60833976297" fg:w="1815134420"/><text x="88.1979%" y="143.50">nd..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (1,531,798,241 samples, 2.21%)</title><rect x="88.3575%" y="117" width="2.2145%" height="15" fill="rgb(218,185,22)" fg:x="61117312476" fg:w="1531798241"/><text x="88.6075%" y="127.50">n..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,531,798,241 samples, 2.21%)</title><rect x="88.3575%" y="101" width="2.2145%" height="15" fill="rgb(225,218,4)" fg:x="61117312476" fg:w="1531798241"/><text x="88.6075%" y="111.50">c..</text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign::_{{closure}} (972,305,981 samples, 1.41%)</title><rect x="89.1664%" y="85" width="1.4057%" height="15" fill="rgb(230,182,32)" fg:x="61676804736" fg:w="972305981"/><text x="89.4164%" y="95.50"></text></g><g><title>core::clone::Clone::clone_from (972,305,981 samples, 1.41%)</title><rect x="89.1664%" y="69" width="1.4057%" height="15" fill="rgb(242,56,43)" fg:x="61676804736" fg:w="972305981"/><text x="89.4164%" y="79.50"></text></g><g><title>[unknown] (70,087,286 samples, 0.10%)</title><rect x="90.4707%" y="53" width="0.1013%" height="15" fill="rgb(233,99,24)" fg:x="62579023431" fg:w="70087286"/><text x="90.7207%" y="63.50"></text></g><g><title>[unknown] (12,388,673 samples, 0.02%)</title><rect x="90.5542%" y="37" width="0.0179%" height="15" fill="rgb(234,209,42)" fg:x="62636722044" fg:w="12388673"/><text x="90.8042%" y="47.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (16,428,400 samples, 0.02%)</title><rect x="90.5721%" y="373" width="0.0238%" height="15" fill="rgb(227,7,12)" fg:x="62649110717" fg:w="16428400"/><text x="90.8221%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (16,428,400 samples, 0.02%)</title><rect x="90.5721%" y="357" width="0.0238%" height="15" fill="rgb(245,203,43)" fg:x="62649110717" fg:w="16428400"/><text x="90.8221%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (16,428,400 samples, 0.02%)</title><rect x="90.5721%" y="341" width="0.0238%" height="15" fill="rgb(238,205,33)" fg:x="62649110717" fg:w="16428400"/><text x="90.8221%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (16,428,400 samples, 0.02%)</title><rect x="90.5721%" y="325" width="0.0238%" height="15" fill="rgb(231,56,7)" fg:x="62649110717" fg:w="16428400"/><text x="90.8221%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (16,428,400 samples, 0.02%)</title><rect x="90.5721%" y="309" width="0.0238%" height="15" fill="rgb(244,186,29)" fg:x="62649110717" fg:w="16428400"/><text x="90.8221%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (16,428,400 samples, 0.02%)</title><rect x="90.5721%" y="293" width="0.0238%" height="15" fill="rgb(234,111,31)" fg:x="62649110717" fg:w="16428400"/><text x="90.8221%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (16,428,400 samples, 0.02%)</title><rect x="90.5721%" y="277" width="0.0238%" height="15" fill="rgb(241,149,10)" fg:x="62649110717" fg:w="16428400"/><text x="90.8221%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (16,428,400 samples, 0.02%)</title><rect x="90.5721%" y="261" width="0.0238%" height="15" fill="rgb(249,206,44)" fg:x="62649110717" fg:w="16428400"/><text x="90.8221%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (12,820,617 samples, 0.02%)</title><rect x="90.5773%" y="245" width="0.0185%" height="15" fill="rgb(251,153,30)" fg:x="62652718500" fg:w="12820617"/><text x="90.8273%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (12,820,617 samples, 0.02%)</title><rect x="90.5773%" y="229" width="0.0185%" height="15" fill="rgb(239,152,38)" fg:x="62652718500" fg:w="12820617"/><text x="90.8273%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (12,820,617 samples, 0.02%)</title><rect x="90.5773%" y="213" width="0.0185%" height="15" fill="rgb(249,139,47)" fg:x="62652718500" fg:w="12820617"/><text x="90.8273%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (12,820,617 samples, 0.02%)</title><rect x="90.5773%" y="197" width="0.0185%" height="15" fill="rgb(244,64,35)" fg:x="62652718500" fg:w="12820617"/><text x="90.8273%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (12,820,617 samples, 0.02%)</title><rect x="90.5773%" y="181" width="0.0185%" height="15" fill="rgb(216,46,15)" fg:x="62652718500" fg:w="12820617"/><text x="90.8273%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (12,820,617 samples, 0.02%)</title><rect x="90.5773%" y="165" width="0.0185%" height="15" fill="rgb(250,74,19)" fg:x="62652718500" fg:w="12820617"/><text x="90.8273%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (12,820,617 samples, 0.02%)</title><rect x="90.5773%" y="149" width="0.0185%" height="15" fill="rgb(249,42,33)" fg:x="62652718500" fg:w="12820617"/><text x="90.8273%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (12,820,617 samples, 0.02%)</title><rect x="90.5773%" y="133" width="0.0185%" height="15" fill="rgb(242,149,17)" fg:x="62652718500" fg:w="12820617"/><text x="90.8273%" y="143.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (12,820,617 samples, 0.02%)</title><rect x="90.5773%" y="117" width="0.0185%" height="15" fill="rgb(244,29,21)" fg:x="62652718500" fg:w="12820617"/><text x="90.8273%" y="127.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (56,335,015 samples, 0.08%)</title><rect x="90.6127%" y="181" width="0.0814%" height="15" fill="rgb(220,130,37)" fg:x="62677213456" fg:w="56335015"/><text x="90.8627%" y="191.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (56,335,015 samples, 0.08%)</title><rect x="90.6127%" y="165" width="0.0814%" height="15" fill="rgb(211,67,2)" fg:x="62677213456" fg:w="56335015"/><text x="90.8627%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_pd (8,200,152 samples, 0.01%)</title><rect x="90.6941%" y="181" width="0.0119%" height="15" fill="rgb(235,68,52)" fg:x="62733548471" fg:w="8200152"/><text x="90.9441%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (15,936,428 samples, 0.02%)</title><rect x="90.7116%" y="181" width="0.0230%" height="15" fill="rgb(246,142,3)" fg:x="62745588149" fg:w="15936428"/><text x="90.9616%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (15,936,428 samples, 0.02%)</title><rect x="90.7116%" y="165" width="0.0230%" height="15" fill="rgb(241,25,7)" fg:x="62745588149" fg:w="15936428"/><text x="90.9616%" y="175.50"></text></g><g><title>core::ptr::write_unaligned (15,936,428 samples, 0.02%)</title><rect x="90.7116%" y="149" width="0.0230%" height="15" fill="rgb(242,119,39)" fg:x="62745588149" fg:w="15936428"/><text x="90.9616%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15,936,428 samples, 0.02%)</title><rect x="90.7116%" y="133" width="0.0230%" height="15" fill="rgb(241,98,45)" fg:x="62745588149" fg:w="15936428"/><text x="90.9616%" y="143.50"></text></g><g><title>[unknown] (15,936,428 samples, 0.02%)</title><rect x="90.7116%" y="117" width="0.0230%" height="15" fill="rgb(254,28,30)" fg:x="62745588149" fg:w="15936428"/><text x="90.9616%" y="127.50"></text></g><g><title>[unknown] (8,072,785 samples, 0.01%)</title><rect x="90.7229%" y="101" width="0.0117%" height="15" fill="rgb(241,142,54)" fg:x="62753451792" fg:w="8072785"/><text x="90.9729%" y="111.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (101,743,636 samples, 0.15%)</title><rect x="90.6077%" y="229" width="0.1471%" height="15" fill="rgb(222,85,15)" fg:x="62673733366" fg:w="101743636"/><text x="90.8577%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (101,743,636 samples, 0.15%)</title><rect x="90.6077%" y="213" width="0.1471%" height="15" fill="rgb(210,85,47)" fg:x="62673733366" fg:w="101743636"/><text x="90.8577%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (101,743,636 samples, 0.15%)</title><rect x="90.6077%" y="197" width="0.1471%" height="15" fill="rgb(224,206,25)" fg:x="62673733366" fg:w="101743636"/><text x="90.8577%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13,952,425 samples, 0.02%)</title><rect x="90.7346%" y="181" width="0.0202%" height="15" fill="rgb(243,201,19)" fg:x="62761524577" fg:w="13952425"/><text x="90.9846%" y="191.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (113,161,490 samples, 0.16%)</title><rect x="90.6077%" y="277" width="0.1636%" height="15" fill="rgb(236,59,4)" fg:x="62673733366" fg:w="113161490"/><text x="90.8577%" y="287.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (113,161,490 samples, 0.16%)</title><rect x="90.6077%" y="261" width="0.1636%" height="15" fill="rgb(254,179,45)" fg:x="62673733366" fg:w="113161490"/><text x="90.8577%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (113,161,490 samples, 0.16%)</title><rect x="90.6077%" y="245" width="0.1636%" height="15" fill="rgb(226,14,10)" fg:x="62673733366" fg:w="113161490"/><text x="90.8577%" y="255.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (11,417,854 samples, 0.02%)</title><rect x="90.7548%" y="229" width="0.0165%" height="15" fill="rgb(244,27,41)" fg:x="62775477002" fg:w="11417854"/><text x="91.0048%" y="239.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (11,417,854 samples, 0.02%)</title><rect x="90.7548%" y="213" width="0.0165%" height="15" fill="rgb(235,35,32)" fg:x="62775477002" fg:w="11417854"/><text x="91.0048%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (11,417,854 samples, 0.02%)</title><rect x="90.7548%" y="197" width="0.0165%" height="15" fill="rgb(218,68,31)" fg:x="62775477002" fg:w="11417854"/><text x="91.0048%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (11,417,854 samples, 0.02%)</title><rect x="90.7548%" y="181" width="0.0165%" height="15" fill="rgb(207,120,37)" fg:x="62775477002" fg:w="11417854"/><text x="91.0048%" y="191.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (11,417,854 samples, 0.02%)</title><rect x="90.7548%" y="165" width="0.0165%" height="15" fill="rgb(227,98,0)" fg:x="62775477002" fg:w="11417854"/><text x="91.0048%" y="175.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (11,417,854 samples, 0.02%)</title><rect x="90.7548%" y="149" width="0.0165%" height="15" fill="rgb(207,7,3)" fg:x="62775477002" fg:w="11417854"/><text x="91.0048%" y="159.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (142,485,863 samples, 0.21%)</title><rect x="90.5958%" y="373" width="0.2060%" height="15" fill="rgb(206,98,19)" fg:x="62665539117" fg:w="142485863"/><text x="90.8458%" y="383.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (142,485,863 samples, 0.21%)</title><rect x="90.5958%" y="357" width="0.2060%" height="15" fill="rgb(217,5,26)" fg:x="62665539117" fg:w="142485863"/><text x="90.8458%" y="367.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (142,485,863 samples, 0.21%)</title><rect x="90.5958%" y="341" width="0.2060%" height="15" fill="rgb(235,190,38)" fg:x="62665539117" fg:w="142485863"/><text x="90.8458%" y="351.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (142,485,863 samples, 0.21%)</title><rect x="90.5958%" y="325" width="0.2060%" height="15" fill="rgb(247,86,24)" fg:x="62665539117" fg:w="142485863"/><text x="90.8458%" y="335.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (134,291,614 samples, 0.19%)</title><rect x="90.6077%" y="309" width="0.1941%" height="15" fill="rgb(205,101,16)" fg:x="62673733366" fg:w="134291614"/><text x="90.8577%" y="319.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (134,291,614 samples, 0.19%)</title><rect x="90.6077%" y="293" width="0.1941%" height="15" fill="rgb(246,168,33)" fg:x="62673733366" fg:w="134291614"/><text x="90.8577%" y="303.50"></text></g><g><title>matrixmultiply::gemm::pack (21,130,124 samples, 0.03%)</title><rect x="90.7713%" y="277" width="0.0305%" height="15" fill="rgb(231,114,1)" fg:x="62786894856" fg:w="21130124"/><text x="91.0213%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21,130,124 samples, 0.03%)</title><rect x="90.7713%" y="261" width="0.0305%" height="15" fill="rgb(207,184,53)" fg:x="62786894856" fg:w="21130124"/><text x="91.0213%" y="271.50"></text></g><g><title>ndarray::stacking::concatenate (1,179,755,742 samples, 1.71%)</title><rect x="90.8018%" y="373" width="1.7056%" height="15" fill="rgb(224,95,51)" fg:x="62808024980" fg:w="1179755742"/><text x="91.0518%" y="383.50"></text></g><g><title>ndarray::impl_owned_array::&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (1,173,776,724 samples, 1.70%)</title><rect x="90.8105%" y="357" width="1.6969%" height="15" fill="rgb(212,188,45)" fg:x="62814003998" fg:w="1173776724"/><text x="91.0605%" y="367.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (1,173,776,724 samples, 1.70%)</title><rect x="90.8105%" y="341" width="1.6969%" height="15" fill="rgb(223,154,38)" fg:x="62814003998" fg:w="1173776724"/><text x="91.0605%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (1,173,776,724 samples, 1.70%)</title><rect x="90.8105%" y="325" width="1.6969%" height="15" fill="rgb(251,22,52)" fg:x="62814003998" fg:w="1173776724"/><text x="91.0605%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (1,173,776,724 samples, 1.70%)</title><rect x="90.8105%" y="309" width="1.6969%" height="15" fill="rgb(229,209,22)" fg:x="62814003998" fg:w="1173776724"/><text x="91.0605%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (1,173,776,724 samples, 1.70%)</title><rect x="90.8105%" y="293" width="1.6969%" height="15" fill="rgb(234,138,34)" fg:x="62814003998" fg:w="1173776724"/><text x="91.0605%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (1,173,776,724 samples, 1.70%)</title><rect x="90.8105%" y="277" width="1.6969%" height="15" fill="rgb(212,95,11)" fg:x="62814003998" fg:w="1173776724"/><text x="91.0605%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (912,157,562 samples, 1.32%)</title><rect x="91.1887%" y="261" width="1.3187%" height="15" fill="rgb(240,179,47)" fg:x="63075623160" fg:w="912157562"/><text x="91.4387%" y="271.50"></text></g><g><title>ndarray::impl_owned_array::_&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append::_{{closure}} (912,157,562 samples, 1.32%)</title><rect x="91.1887%" y="245" width="1.3187%" height="15" fill="rgb(240,163,11)" fg:x="63075623160" fg:w="912157562"/><text x="91.4387%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (912,157,562 samples, 1.32%)</title><rect x="91.1887%" y="229" width="1.3187%" height="15" fill="rgb(236,37,12)" fg:x="63075623160" fg:w="912157562"/><text x="91.4387%" y="239.50"></text></g><g><title>core::ptr::write (912,157,562 samples, 1.32%)</title><rect x="91.1887%" y="213" width="1.3187%" height="15" fill="rgb(232,164,16)" fg:x="63075623160" fg:w="912157562"/><text x="91.4387%" y="223.50"></text></g><g><title>[unknown] (191,372,981 samples, 0.28%)</title><rect x="92.2307%" y="197" width="0.2767%" height="15" fill="rgb(244,205,15)" fg:x="63796407741" fg:w="191372981"/><text x="92.4807%" y="207.50"></text></g><g><title>[unknown] (122,373,697 samples, 0.18%)</title><rect x="92.3305%" y="181" width="0.1769%" height="15" fill="rgb(223,117,47)" fg:x="63865407025" fg:w="122373697"/><text x="92.5805%" y="191.50"></text></g><g><title>[unknown] (7,699,359 samples, 0.01%)</title><rect x="92.4963%" y="165" width="0.0111%" height="15" fill="rgb(244,107,35)" fg:x="63980081363" fg:w="7699359"/><text x="92.7463%" y="175.50"></text></g><g><title>core::ptr::write (12,948,727 samples, 0.02%)</title><rect x="92.5074%" y="245" width="0.0187%" height="15" fill="rgb(205,140,8)" fg:x="63987780722" fg:w="12948727"/><text x="92.7574%" y="255.50"></text></g><g><title>rkl::core::activations::Activation::forward (653,410,296 samples, 0.94%)</title><rect x="92.5074%" y="373" width="0.9446%" height="15" fill="rgb(228,84,46)" fg:x="63987780722" fg:w="653410296"/><text x="92.7574%" y="383.50"></text></g><g><title>rkl::core::activations::tanh_forward (653,410,296 samples, 0.94%)</title><rect x="92.5074%" y="357" width="0.9446%" height="15" fill="rgb(254,188,9)" fg:x="63987780722" fg:w="653410296"/><text x="92.7574%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (653,410,296 samples, 0.94%)</title><rect x="92.5074%" y="341" width="0.9446%" height="15" fill="rgb(206,112,54)" fg:x="63987780722" fg:w="653410296"/><text x="92.7574%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (653,410,296 samples, 0.94%)</title><rect x="92.5074%" y="325" width="0.9446%" height="15" fill="rgb(216,84,49)" fg:x="63987780722" fg:w="653410296"/><text x="92.7574%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (653,410,296 samples, 0.94%)</title><rect x="92.5074%" y="309" width="0.9446%" height="15" fill="rgb(214,194,35)" fg:x="63987780722" fg:w="653410296"/><text x="92.7574%" y="319.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (653,410,296 samples, 0.94%)</title><rect x="92.5074%" y="293" width="0.9446%" height="15" fill="rgb(249,28,3)" fg:x="63987780722" fg:w="653410296"/><text x="92.7574%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (653,410,296 samples, 0.94%)</title><rect x="92.5074%" y="277" width="0.9446%" height="15" fill="rgb(222,56,52)" fg:x="63987780722" fg:w="653410296"/><text x="92.7574%" y="287.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (653,410,296 samples, 0.94%)</title><rect x="92.5074%" y="261" width="0.9446%" height="15" fill="rgb(245,217,50)" fg:x="63987780722" fg:w="653410296"/><text x="92.7574%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (640,461,569 samples, 0.93%)</title><rect x="92.5261%" y="245" width="0.9259%" height="15" fill="rgb(213,201,24)" fg:x="64000729449" fg:w="640461569"/><text x="92.7761%" y="255.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (640,461,569 samples, 0.93%)</title><rect x="92.5261%" y="229" width="0.9259%" height="15" fill="rgb(248,116,28)" fg:x="64000729449" fg:w="640461569"/><text x="92.7761%" y="239.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (640,461,569 samples, 0.93%)</title><rect x="92.5261%" y="213" width="0.9259%" height="15" fill="rgb(219,72,43)" fg:x="64000729449" fg:w="640461569"/><text x="92.7761%" y="223.50"></text></g><g><title>tanhf32x (640,461,569 samples, 0.93%)</title><rect x="92.5261%" y="197" width="0.9259%" height="15" fill="rgb(209,138,14)" fg:x="64000729449" fg:w="640461569"/><text x="92.7761%" y="207.50"></text></g><g><title>[libm.so.6] (444,403,541 samples, 0.64%)</title><rect x="92.8096%" y="181" width="0.6425%" height="15" fill="rgb(222,18,33)" fg:x="64196787477" fg:w="444403541"/><text x="93.0596%" y="191.50"></text></g><g><title>[unknown] (112,358,020 samples, 0.16%)</title><rect x="93.9260%" y="357" width="0.1624%" height="15" fill="rgb(213,199,7)" fg:x="64969068746" fg:w="112358020"/><text x="94.1760%" y="367.50"></text></g><g><title>[unknown] (55,874,172 samples, 0.08%)</title><rect x="94.0077%" y="341" width="0.0808%" height="15" fill="rgb(250,110,10)" fg:x="65025552594" fg:w="55874172"/><text x="94.2577%" y="351.50"></text></g><g><title>[unknown] (15,303,214 samples, 0.02%)</title><rect x="94.0664%" y="325" width="0.0221%" height="15" fill="rgb(248,123,6)" fg:x="65066123552" fg:w="15303214"/><text x="94.3164%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (233,775,388 samples, 0.34%)</title><rect x="94.1264%" y="325" width="0.3380%" height="15" fill="rgb(206,91,31)" fg:x="65107621825" fg:w="233775388"/><text x="94.3764%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (233,775,388 samples, 0.34%)</title><rect x="94.1264%" y="309" width="0.3380%" height="15" fill="rgb(211,154,13)" fg:x="65107621825" fg:w="233775388"/><text x="94.3764%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (284,873,613 samples, 0.41%)</title><rect x="94.0885%" y="357" width="0.4118%" height="15" fill="rgb(225,148,7)" fg:x="65081426766" fg:w="284873613"/><text x="94.3385%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (284,873,613 samples, 0.41%)</title><rect x="94.0885%" y="341" width="0.4118%" height="15" fill="rgb(220,160,43)" fg:x="65081426766" fg:w="284873613"/><text x="94.3385%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (24,903,166 samples, 0.04%)</title><rect x="94.4643%" y="325" width="0.0360%" height="15" fill="rgb(213,52,39)" fg:x="65341397213" fg:w="24903166"/><text x="94.7143%" y="335.50"></text></g><g><title>&lt;[usize: 2] as ndarray::dimension::ndindex::NdIndex&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::index_checked (15,852,707 samples, 0.02%)</title><rect x="94.5003%" y="341" width="0.0229%" height="15" fill="rgb(243,137,7)" fg:x="65366300379" fg:w="15852707"/><text x="94.7503%" y="351.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::stride_offset_checked (15,852,707 samples, 0.02%)</title><rect x="94.5003%" y="325" width="0.0229%" height="15" fill="rgb(230,79,13)" fg:x="65366300379" fg:w="15852707"/><text x="94.7503%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (131,378,663 samples, 0.19%)</title><rect x="94.5232%" y="341" width="0.1899%" height="15" fill="rgb(247,105,23)" fg:x="65382153086" fg:w="131378663"/><text x="94.7732%" y="351.50"></text></g><g><title>ndarray::arraytraits::&lt;impl core::ops::index::Index&lt;I&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::index (163,654,892 samples, 0.24%)</title><rect x="94.5003%" y="357" width="0.2366%" height="15" fill="rgb(223,179,41)" fg:x="65366300379" fg:w="163654892"/><text x="94.7503%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (16,423,522 samples, 0.02%)</title><rect x="94.7132%" y="341" width="0.0237%" height="15" fill="rgb(218,9,34)" fg:x="65513531749" fg:w="16423522"/><text x="94.9632%" y="351.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (48,861,716 samples, 0.07%)</title><rect x="94.7369%" y="357" width="0.0706%" height="15" fill="rgb(222,106,8)" fg:x="65529955271" fg:w="48861716"/><text x="94.9869%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (48,861,716 samples, 0.07%)</title><rect x="94.7369%" y="341" width="0.0706%" height="15" fill="rgb(211,220,0)" fg:x="65529955271" fg:w="48861716"/><text x="94.9869%" y="351.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (48,861,716 samples, 0.07%)</title><rect x="94.7369%" y="325" width="0.0706%" height="15" fill="rgb(229,52,16)" fg:x="65529955271" fg:w="48861716"/><text x="94.9869%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (48,861,716 samples, 0.07%)</title><rect x="94.7369%" y="309" width="0.0706%" height="15" fill="rgb(212,155,18)" fg:x="65529955271" fg:w="48861716"/><text x="94.9869%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (48,861,716 samples, 0.07%)</title><rect x="94.7369%" y="293" width="0.0706%" height="15" fill="rgb(242,21,14)" fg:x="65529955271" fg:w="48861716"/><text x="94.9869%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (48,861,716 samples, 0.07%)</title><rect x="94.7369%" y="277" width="0.0706%" height="15" fill="rgb(222,19,48)" fg:x="65529955271" fg:w="48861716"/><text x="94.9869%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (48,861,716 samples, 0.07%)</title><rect x="94.7369%" y="261" width="0.0706%" height="15" fill="rgb(232,45,27)" fg:x="65529955271" fg:w="48861716"/><text x="94.9869%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (48,861,716 samples, 0.07%)</title><rect x="94.7369%" y="245" width="0.0706%" height="15" fill="rgb(249,103,42)" fg:x="65529955271" fg:w="48861716"/><text x="94.9869%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (45,783,252 samples, 0.07%)</title><rect x="94.7414%" y="229" width="0.0662%" height="15" fill="rgb(246,81,33)" fg:x="65533033735" fg:w="45783252"/><text x="94.9914%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45,783,252 samples, 0.07%)</title><rect x="94.7414%" y="213" width="0.0662%" height="15" fill="rgb(252,33,42)" fg:x="65533033735" fg:w="45783252"/><text x="94.9914%" y="223.50"></text></g><g><title>[libc.so.6] (45,783,252 samples, 0.07%)</title><rect x="94.7414%" y="197" width="0.0662%" height="15" fill="rgb(209,212,41)" fg:x="65533033735" fg:w="45783252"/><text x="94.9914%" y="207.50"></text></g><g><title>[libc.so.6] (95,365,905 samples, 0.14%)</title><rect x="94.8076%" y="197" width="0.1379%" height="15" fill="rgb(207,154,6)" fg:x="65578816987" fg:w="95365905"/><text x="95.0576%" y="207.50"></text></g><g><title>[unknown] (7,101,356 samples, 0.01%)</title><rect x="94.9352%" y="181" width="0.0103%" height="15" fill="rgb(223,64,47)" fg:x="65667081536" fg:w="7101356"/><text x="95.1852%" y="191.50"></text></g><g><title>[unknown] (7,101,356 samples, 0.01%)</title><rect x="94.9352%" y="165" width="0.0103%" height="15" fill="rgb(211,161,38)" fg:x="65667081536" fg:w="7101356"/><text x="95.1852%" y="175.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="357" width="0.1429%" height="15" fill="rgb(219,138,40)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="367.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="341" width="0.1429%" height="15" fill="rgb(241,228,46)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="351.50"></text></g><g><title>alloc::vec::from_elem (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="325" width="0.1429%" height="15" fill="rgb(223,209,38)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="335.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="309" width="0.1429%" height="15" fill="rgb(236,164,45)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="293" width="0.1429%" height="15" fill="rgb(231,15,5)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="277" width="0.1429%" height="15" fill="rgb(252,35,15)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="261" width="0.1429%" height="15" fill="rgb(248,181,18)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="245" width="0.1429%" height="15" fill="rgb(233,39,42)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="229" width="0.1429%" height="15" fill="rgb(238,110,33)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="239.50"></text></g><g><title>alloc::alloc::alloc_zeroed (98,838,902 samples, 0.14%)</title><rect x="94.8076%" y="213" width="0.1429%" height="15" fill="rgb(233,195,10)" fg:x="65578816987" fg:w="98838902"/><text x="95.0576%" y="223.50"></text></g><g><title>ndarray::dimension::abs_index (11,534,919 samples, 0.02%)</title><rect x="95.0438%" y="293" width="0.0167%" height="15" fill="rgb(254,105,3)" fg:x="65742195304" fg:w="11534919"/><text x="95.2938%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::collapse_axis (14,067,488 samples, 0.02%)</title><rect x="95.0604%" y="293" width="0.0203%" height="15" fill="rgb(221,225,9)" fg:x="65753730223" fg:w="14067488"/><text x="95.3104%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (11,725,218 samples, 0.02%)</title><rect x="95.1376%" y="245" width="0.0170%" height="15" fill="rgb(224,227,45)" fg:x="65807127111" fg:w="11725218"/><text x="95.3876%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (140,211,816 samples, 0.20%)</title><rect x="94.9736%" y="325" width="0.2027%" height="15" fill="rgb(229,198,43)" fg:x="65693661864" fg:w="140211816"/><text x="95.2236%" y="335.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move::_{{closure}} (140,211,816 samples, 0.20%)</title><rect x="94.9736%" y="309" width="0.2027%" height="15" fill="rgb(206,209,35)" fg:x="65693661864" fg:w="140211816"/><text x="95.2236%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_axis_inplace (66,075,969 samples, 0.10%)</title><rect x="95.0808%" y="293" width="0.0955%" height="15" fill="rgb(245,195,53)" fg:x="65767797711" fg:w="66075969"/><text x="95.3308%" y="303.50"></text></g><g><title>ndarray::dimension::do_slice (66,075,969 samples, 0.10%)</title><rect x="95.0808%" y="277" width="0.0955%" height="15" fill="rgb(240,92,26)" fg:x="65767797711" fg:w="66075969"/><text x="95.3308%" y="287.50"></text></g><g><title>ndarray::dimension::to_abs_slice (36,474,906 samples, 0.05%)</title><rect x="95.1236%" y="261" width="0.0527%" height="15" fill="rgb(207,40,23)" fg:x="65797398774" fg:w="36474906"/><text x="95.3736%" y="271.50"></text></g><g><title>ndarray::dimension::abs_index (15,021,351 samples, 0.02%)</title><rect x="95.1546%" y="245" width="0.0217%" height="15" fill="rgb(223,111,35)" fg:x="65818852329" fg:w="15021351"/><text x="95.4046%" y="255.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (159,094,774 samples, 0.23%)</title><rect x="94.9505%" y="357" width="0.2300%" height="15" fill="rgb(229,147,28)" fg:x="65677655889" fg:w="159094774"/><text x="95.2005%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move (145,857,471 samples, 0.21%)</title><rect x="94.9696%" y="341" width="0.2109%" height="15" fill="rgb(211,29,28)" fg:x="65690893192" fg:w="145857471"/><text x="95.2196%" y="351.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (31,205,539 samples, 0.05%)</title><rect x="95.2017%" y="165" width="0.0451%" height="15" fill="rgb(228,72,33)" fg:x="65851455013" fg:w="31205539"/><text x="95.4517%" y="175.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (31,205,539 samples, 0.05%)</title><rect x="95.2017%" y="149" width="0.0451%" height="15" fill="rgb(205,214,31)" fg:x="65851455013" fg:w="31205539"/><text x="95.4517%" y="159.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (7,363,142 samples, 0.01%)</title><rect x="95.2468%" y="165" width="0.0106%" height="15" fill="rgb(224,111,15)" fg:x="65882660552" fg:w="7363142"/><text x="95.4968%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (19,628,969 samples, 0.03%)</title><rect x="95.2634%" y="165" width="0.0284%" height="15" fill="rgb(253,21,26)" fg:x="65894090490" fg:w="19628969"/><text x="95.5134%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (19,628,969 samples, 0.03%)</title><rect x="95.2634%" y="149" width="0.0284%" height="15" fill="rgb(245,139,43)" fg:x="65894090490" fg:w="19628969"/><text x="95.5134%" y="159.50"></text></g><g><title>core::ptr::write_unaligned (19,628,969 samples, 0.03%)</title><rect x="95.2634%" y="133" width="0.0284%" height="15" fill="rgb(252,170,7)" fg:x="65894090490" fg:w="19628969"/><text x="95.5134%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19,628,969 samples, 0.03%)</title><rect x="95.2634%" y="117" width="0.0284%" height="15" fill="rgb(231,118,14)" fg:x="65894090490" fg:w="19628969"/><text x="95.5134%" y="127.50"></text></g><g><title>[unknown] (19,628,969 samples, 0.03%)</title><rect x="95.2634%" y="101" width="0.0284%" height="15" fill="rgb(238,83,0)" fg:x="65894090490" fg:w="19628969"/><text x="95.5134%" y="111.50"></text></g><g><title>[unknown] (11,747,648 samples, 0.02%)</title><rect x="95.2747%" y="85" width="0.0170%" height="15" fill="rgb(221,39,39)" fg:x="65901971811" fg:w="11747648"/><text x="95.5247%" y="95.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (72,839,466 samples, 0.11%)</title><rect x="95.1923%" y="213" width="0.1053%" height="15" fill="rgb(222,119,46)" fg:x="65844934825" fg:w="72839466"/><text x="95.4423%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (72,839,466 samples, 0.11%)</title><rect x="95.1923%" y="197" width="0.1053%" height="15" fill="rgb(222,165,49)" fg:x="65844934825" fg:w="72839466"/><text x="95.4423%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (69,384,708 samples, 0.10%)</title><rect x="95.1973%" y="181" width="0.1003%" height="15" fill="rgb(219,113,52)" fg:x="65848389583" fg:w="69384708"/><text x="95.4473%" y="191.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (85,418,861 samples, 0.12%)</title><rect x="95.1884%" y="261" width="0.1235%" height="15" fill="rgb(214,7,15)" fg:x="65842218882" fg:w="85418861"/><text x="95.4384%" y="271.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (82,702,918 samples, 0.12%)</title><rect x="95.1923%" y="245" width="0.1196%" height="15" fill="rgb(235,32,4)" fg:x="65844934825" fg:w="82702918"/><text x="95.4423%" y="255.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (82,702,918 samples, 0.12%)</title><rect x="95.1923%" y="229" width="0.1196%" height="15" fill="rgb(238,90,54)" fg:x="65844934825" fg:w="82702918"/><text x="95.4423%" y="239.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (9,863,452 samples, 0.01%)</title><rect x="95.2976%" y="213" width="0.0143%" height="15" fill="rgb(213,208,19)" fg:x="65917774291" fg:w="9863452"/><text x="95.5476%" y="223.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (9,863,452 samples, 0.01%)</title><rect x="95.2976%" y="197" width="0.0143%" height="15" fill="rgb(233,156,4)" fg:x="65917774291" fg:w="9863452"/><text x="95.5476%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (9,863,452 samples, 0.01%)</title><rect x="95.2976%" y="181" width="0.0143%" height="15" fill="rgb(207,194,5)" fg:x="65917774291" fg:w="9863452"/><text x="95.5476%" y="191.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (9,863,452 samples, 0.01%)</title><rect x="95.2976%" y="165" width="0.0143%" height="15" fill="rgb(206,111,30)" fg:x="65917774291" fg:w="9863452"/><text x="95.5476%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24,768,228 samples, 0.04%)</title><rect x="95.3119%" y="245" width="0.0358%" height="15" fill="rgb(243,70,54)" fg:x="65927637743" fg:w="24768228"/><text x="95.5619%" y="255.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (119,222,085 samples, 0.17%)</title><rect x="95.1805%" y="357" width="0.1724%" height="15" fill="rgb(242,28,8)" fg:x="65836750663" fg:w="119222085"/><text x="95.4305%" y="367.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (119,222,085 samples, 0.17%)</title><rect x="95.1805%" y="341" width="0.1724%" height="15" fill="rgb(219,106,18)" fg:x="65836750663" fg:w="119222085"/><text x="95.4305%" y="351.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (119,222,085 samples, 0.17%)</title><rect x="95.1805%" y="325" width="0.1724%" height="15" fill="rgb(244,222,10)" fg:x="65836750663" fg:w="119222085"/><text x="95.4305%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (119,222,085 samples, 0.17%)</title><rect x="95.1805%" y="309" width="0.1724%" height="15" fill="rgb(236,179,52)" fg:x="65836750663" fg:w="119222085"/><text x="95.4305%" y="319.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (113,753,866 samples, 0.16%)</title><rect x="95.1884%" y="293" width="0.1645%" height="15" fill="rgb(213,23,39)" fg:x="65842218882" fg:w="113753866"/><text x="95.4384%" y="303.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (113,753,866 samples, 0.16%)</title><rect x="95.1884%" y="277" width="0.1645%" height="15" fill="rgb(238,48,10)" fg:x="65842218882" fg:w="113753866"/><text x="95.4384%" y="287.50"></text></g><g><title>matrixmultiply::gemm::pack (28,335,005 samples, 0.04%)</title><rect x="95.3119%" y="261" width="0.0410%" height="15" fill="rgb(251,196,23)" fg:x="65927637743" fg:w="28335005"/><text x="95.5619%" y="271.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (36,326,289 samples, 0.05%)</title><rect x="95.3528%" y="341" width="0.0525%" height="15" fill="rgb(250,152,24)" fg:x="65955972748" fg:w="36326289"/><text x="95.6028%" y="351.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (36,326,289 samples, 0.05%)</title><rect x="95.3528%" y="325" width="0.0525%" height="15" fill="rgb(209,150,17)" fg:x="65955972748" fg:w="36326289"/><text x="95.6028%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (36,326,289 samples, 0.05%)</title><rect x="95.3528%" y="309" width="0.0525%" height="15" fill="rgb(234,202,34)" fg:x="65955972748" fg:w="36326289"/><text x="95.6028%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (36,326,289 samples, 0.05%)</title><rect x="95.3528%" y="293" width="0.0525%" height="15" fill="rgb(253,148,53)" fg:x="65955972748" fg:w="36326289"/><text x="95.6028%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (32,810,832 samples, 0.05%)</title><rect x="95.3579%" y="277" width="0.0474%" height="15" fill="rgb(218,129,16)" fg:x="65959488205" fg:w="32810832"/><text x="95.6079%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (32,810,832 samples, 0.05%)</title><rect x="95.3579%" y="261" width="0.0474%" height="15" fill="rgb(216,85,19)" fg:x="65959488205" fg:w="32810832"/><text x="95.6079%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (32,810,832 samples, 0.05%)</title><rect x="95.3579%" y="245" width="0.0474%" height="15" fill="rgb(235,228,7)" fg:x="65959488205" fg:w="32810832"/><text x="95.6079%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (32,810,832 samples, 0.05%)</title><rect x="95.3579%" y="229" width="0.0474%" height="15" fill="rgb(245,175,0)" fg:x="65959488205" fg:w="32810832"/><text x="95.6079%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (32,810,832 samples, 0.05%)</title><rect x="95.3579%" y="213" width="0.0474%" height="15" fill="rgb(208,168,36)" fg:x="65959488205" fg:w="32810832"/><text x="95.6079%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (29,430,276 samples, 0.04%)</title><rect x="95.3628%" y="197" width="0.0425%" height="15" fill="rgb(246,171,24)" fg:x="65962868761" fg:w="29430276"/><text x="95.6128%" y="207.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (29,430,276 samples, 0.04%)</title><rect x="95.3628%" y="181" width="0.0425%" height="15" fill="rgb(215,142,24)" fg:x="65962868761" fg:w="29430276"/><text x="95.6128%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (29,430,276 samples, 0.04%)</title><rect x="95.3628%" y="165" width="0.0425%" height="15" fill="rgb(250,187,7)" fg:x="65962868761" fg:w="29430276"/><text x="95.6128%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (29,430,276 samples, 0.04%)</title><rect x="95.3628%" y="149" width="0.0425%" height="15" fill="rgb(228,66,33)" fg:x="65962868761" fg:w="29430276"/><text x="95.6128%" y="159.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (29,430,276 samples, 0.04%)</title><rect x="95.3628%" y="133" width="0.0425%" height="15" fill="rgb(234,215,21)" fg:x="65962868761" fg:w="29430276"/><text x="95.6128%" y="143.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (29,430,276 samples, 0.04%)</title><rect x="95.3628%" y="117" width="0.0425%" height="15" fill="rgb(222,191,20)" fg:x="65962868761" fg:w="29430276"/><text x="95.6128%" y="127.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (29,430,276 samples, 0.04%)</title><rect x="95.3628%" y="101" width="0.0425%" height="15" fill="rgb(245,79,54)" fg:x="65962868761" fg:w="29430276"/><text x="95.6128%" y="111.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (26,481,900 samples, 0.04%)</title><rect x="95.3671%" y="85" width="0.0383%" height="15" fill="rgb(240,10,37)" fg:x="65965817137" fg:w="26481900"/><text x="95.6171%" y="95.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (26,481,900 samples, 0.04%)</title><rect x="95.3671%" y="69" width="0.0383%" height="15" fill="rgb(214,192,32)" fg:x="65965817137" fg:w="26481900"/><text x="95.6171%" y="79.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (16,505,754 samples, 0.02%)</title><rect x="95.3815%" y="53" width="0.0239%" height="15" fill="rgb(209,36,54)" fg:x="65975793283" fg:w="16505754"/><text x="95.6315%" y="63.50"></text></g><g><title>core::ptr::write (17,963,705 samples, 0.03%)</title><rect x="95.4127%" y="229" width="0.0260%" height="15" fill="rgb(220,10,11)" fg:x="65997391716" fg:w="17963705"/><text x="95.6627%" y="239.50"></text></g><g><title>[unknown] (11,624,843 samples, 0.02%)</title><rect x="95.4219%" y="213" width="0.0168%" height="15" fill="rgb(221,106,17)" fg:x="66003730578" fg:w="11624843"/><text x="95.6719%" y="223.50"></text></g><g><title>rkl::core::layers::Dense::backward_jacobian (2,132,014,129 samples, 3.08%)</title><rect x="93.4520%" y="373" width="3.0823%" height="15" fill="rgb(251,142,44)" fg:x="64641191018" fg:w="2132014129"/><text x="93.7020%" y="383.50">rkl..</text></g><g><title>rkl::core::activations::Activation::backward (817,232,399 samples, 1.18%)</title><rect x="95.3528%" y="357" width="1.1815%" height="15" fill="rgb(238,13,15)" fg:x="65955972748" fg:w="817232399"/><text x="95.6028%" y="367.50"></text></g><g><title>rkl::core::activations::tanh_backward (780,906,110 samples, 1.13%)</title><rect x="95.4053%" y="341" width="1.1290%" height="15" fill="rgb(208,107,27)" fg:x="65992299037" fg:w="780906110"/><text x="95.6553%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (780,906,110 samples, 1.13%)</title><rect x="95.4053%" y="325" width="1.1290%" height="15" fill="rgb(205,136,37)" fg:x="65992299037" fg:w="780906110"/><text x="95.6553%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (780,906,110 samples, 1.13%)</title><rect x="95.4053%" y="309" width="1.1290%" height="15" fill="rgb(250,205,27)" fg:x="65992299037" fg:w="780906110"/><text x="95.6553%" y="319.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (780,906,110 samples, 1.13%)</title><rect x="95.4053%" y="293" width="1.1290%" height="15" fill="rgb(210,80,43)" fg:x="65992299037" fg:w="780906110"/><text x="95.6553%" y="303.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (780,906,110 samples, 1.13%)</title><rect x="95.4053%" y="277" width="1.1290%" height="15" fill="rgb(247,160,36)" fg:x="65992299037" fg:w="780906110"/><text x="95.6553%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (780,906,110 samples, 1.13%)</title><rect x="95.4053%" y="261" width="1.1290%" height="15" fill="rgb(234,13,49)" fg:x="65992299037" fg:w="780906110"/><text x="95.6553%" y="271.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (780,906,110 samples, 1.13%)</title><rect x="95.4053%" y="245" width="1.1290%" height="15" fill="rgb(234,122,0)" fg:x="65992299037" fg:w="780906110"/><text x="95.6553%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (757,849,726 samples, 1.10%)</title><rect x="95.4387%" y="229" width="1.0956%" height="15" fill="rgb(207,146,38)" fg:x="66015355421" fg:w="757849726"/><text x="95.6887%" y="239.50"></text></g><g><title>rkl::core::activations::tanh_backward::_{{closure}} (757,849,726 samples, 1.10%)</title><rect x="95.4387%" y="213" width="1.0956%" height="15" fill="rgb(207,177,25)" fg:x="66015355421" fg:w="757849726"/><text x="95.6887%" y="223.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (737,476,554 samples, 1.07%)</title><rect x="95.4681%" y="197" width="1.0662%" height="15" fill="rgb(211,178,42)" fg:x="66035728593" fg:w="737476554"/><text x="95.7181%" y="207.50"></text></g><g><title>tanhf32x (737,476,554 samples, 1.07%)</title><rect x="95.4681%" y="181" width="1.0662%" height="15" fill="rgb(230,69,54)" fg:x="66035728593" fg:w="737476554"/><text x="95.7181%" y="191.50"></text></g><g><title>[libm.so.6] (542,958,689 samples, 0.78%)</title><rect x="95.7493%" y="165" width="0.7850%" height="15" fill="rgb(214,135,41)" fg:x="66230246458" fg:w="542958689"/><text x="95.9993%" y="175.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (20,201,641 samples, 0.03%)</title><rect x="98.4355%" y="325" width="0.0292%" height="15" fill="rgb(237,67,25)" fg:x="68088259066" fg:w="20201641"/><text x="98.6855%" y="335.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::backward_jacobian (7,700,720,476 samples, 11.13%)</title><rect x="87.4934%" y="389" width="11.1330%" height="15" fill="rgb(222,189,50)" fg:x="60519578101" fg:w="7700720476"/><text x="87.7434%" y="399.50">rkl::models::Seq..</text></g><g><title>rkl::models::divide_rows_by_last_value (1,447,093,430 samples, 2.09%)</title><rect x="96.5343%" y="373" width="2.0921%" height="15" fill="rgb(245,148,34)" fg:x="66773205147" fg:w="1447093430"/><text x="96.7843%" y="383.50">r..</text></g><g><title>&lt;ndarray::iterators::IterMut&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (166,895,087 samples, 0.24%)</title><rect x="98.3851%" y="357" width="0.2413%" height="15" fill="rgb(222,29,6)" fg:x="68053403490" fg:w="166895087"/><text x="98.6351%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (141,443,561 samples, 0.20%)</title><rect x="98.4219%" y="341" width="0.2045%" height="15" fill="rgb(221,189,43)" fg:x="68078855016" fg:w="141443561"/><text x="98.6719%" y="351.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (111,837,870 samples, 0.16%)</title><rect x="98.4647%" y="325" width="0.1617%" height="15" fill="rgb(207,36,27)" fg:x="68108460707" fg:w="111837870"/><text x="98.7147%" y="335.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (111,837,870 samples, 0.16%)</title><rect x="98.4647%" y="309" width="0.1617%" height="15" fill="rgb(217,90,24)" fg:x="68108460707" fg:w="111837870"/><text x="98.7147%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (111,837,870 samples, 0.16%)</title><rect x="98.4647%" y="293" width="0.1617%" height="15" fill="rgb(224,66,35)" fg:x="68108460707" fg:w="111837870"/><text x="98.7147%" y="303.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (104,949,784 samples, 0.15%)</title><rect x="98.6324%" y="357" width="0.1517%" height="15" fill="rgb(221,13,50)" fg:x="68224444815" fg:w="104949784"/><text x="98.8824%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (104,949,784 samples, 0.15%)</title><rect x="98.6324%" y="341" width="0.1517%" height="15" fill="rgb(236,68,49)" fg:x="68224444815" fg:w="104949784"/><text x="98.8824%" y="351.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (104,949,784 samples, 0.15%)</title><rect x="98.6324%" y="325" width="0.1517%" height="15" fill="rgb(229,146,28)" fg:x="68224444815" fg:w="104949784"/><text x="98.8824%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (104,949,784 samples, 0.15%)</title><rect x="98.6324%" y="309" width="0.1517%" height="15" fill="rgb(225,31,38)" fg:x="68224444815" fg:w="104949784"/><text x="98.8824%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (104,949,784 samples, 0.15%)</title><rect x="98.6324%" y="293" width="0.1517%" height="15" fill="rgb(250,208,3)" fg:x="68224444815" fg:w="104949784"/><text x="98.8824%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (104,949,784 samples, 0.15%)</title><rect x="98.6324%" y="277" width="0.1517%" height="15" fill="rgb(246,54,23)" fg:x="68224444815" fg:w="104949784"/><text x="98.8824%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (104,949,784 samples, 0.15%)</title><rect x="98.6324%" y="261" width="0.1517%" height="15" fill="rgb(243,76,11)" fg:x="68224444815" fg:w="104949784"/><text x="98.8824%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (104,949,784 samples, 0.15%)</title><rect x="98.6324%" y="245" width="0.1517%" height="15" fill="rgb(245,21,50)" fg:x="68224444815" fg:w="104949784"/><text x="98.8824%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (100,583,484 samples, 0.15%)</title><rect x="98.6387%" y="229" width="0.1454%" height="15" fill="rgb(228,9,43)" fg:x="68228811115" fg:w="100583484"/><text x="98.8887%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (100,583,484 samples, 0.15%)</title><rect x="98.6387%" y="213" width="0.1454%" height="15" fill="rgb(208,100,47)" fg:x="68228811115" fg:w="100583484"/><text x="98.8887%" y="223.50"></text></g><g><title>[libc.so.6] (97,209,689 samples, 0.14%)</title><rect x="98.6435%" y="197" width="0.1405%" height="15" fill="rgb(232,26,8)" fg:x="68232184910" fg:w="97209689"/><text x="98.8935%" y="207.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (20,812,473 samples, 0.03%)</title><rect x="98.7841%" y="357" width="0.0301%" height="15" fill="rgb(216,166,38)" fg:x="68329394599" fg:w="20812473"/><text x="99.0341%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="341" width="0.0242%" height="15" fill="rgb(251,202,51)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="325" width="0.0242%" height="15" fill="rgb(254,216,34)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="309" width="0.0242%" height="15" fill="rgb(251,32,27)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="293" width="0.0242%" height="15" fill="rgb(208,127,28)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="277" width="0.0242%" height="15" fill="rgb(224,137,22)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="261" width="0.0242%" height="15" fill="rgb(254,70,32)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="245" width="0.0242%" height="15" fill="rgb(229,75,37)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="229" width="0.0242%" height="15" fill="rgb(252,64,23)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="239.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="213" width="0.0242%" height="15" fill="rgb(232,162,48)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="197" width="0.0242%" height="15" fill="rgb(246,160,12)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="181" width="0.0242%" height="15" fill="rgb(247,166,0)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="165" width="0.0242%" height="15" fill="rgb(249,219,21)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="149" width="0.0242%" height="15" fill="rgb(205,209,3)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="159.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="133" width="0.0242%" height="15" fill="rgb(243,44,1)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="117" width="0.0242%" height="15" fill="rgb(206,159,16)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="127.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (16,756,823 samples, 0.02%)</title><rect x="98.7899%" y="101" width="0.0242%" height="15" fill="rgb(244,77,30)" fg:x="68333450249" fg:w="16756823"/><text x="99.0399%" y="111.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (8,416,943 samples, 0.01%)</title><rect x="98.8020%" y="85" width="0.0122%" height="15" fill="rgb(218,69,12)" fg:x="68341790129" fg:w="8416943"/><text x="99.0520%" y="95.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (24,484,794 samples, 0.04%)</title><rect x="98.8442%" y="165" width="0.0354%" height="15" fill="rgb(212,87,7)" fg:x="68371011279" fg:w="24484794"/><text x="99.0942%" y="175.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (24,484,794 samples, 0.04%)</title><rect x="98.8442%" y="149" width="0.0354%" height="15" fill="rgb(245,114,25)" fg:x="68371011279" fg:w="24484794"/><text x="99.0942%" y="159.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_pd (17,198,312 samples, 0.02%)</title><rect x="98.8796%" y="165" width="0.0249%" height="15" fill="rgb(210,61,42)" fg:x="68395496073" fg:w="17198312"/><text x="99.1296%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_pd (8,501,016 samples, 0.01%)</title><rect x="98.9045%" y="165" width="0.0123%" height="15" fill="rgb(211,52,33)" fg:x="68412694385" fg:w="8501016"/><text x="99.1545%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_pd (8,290,472 samples, 0.01%)</title><rect x="98.9214%" y="165" width="0.0120%" height="15" fill="rgb(234,58,33)" fg:x="68424376327" fg:w="8290472"/><text x="99.1714%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (8,290,472 samples, 0.01%)</title><rect x="98.9214%" y="149" width="0.0120%" height="15" fill="rgb(220,115,36)" fg:x="68424376327" fg:w="8290472"/><text x="99.1714%" y="159.50"></text></g><g><title>core::ptr::write_unaligned (8,290,472 samples, 0.01%)</title><rect x="98.9214%" y="133" width="0.0120%" height="15" fill="rgb(243,153,54)" fg:x="68424376327" fg:w="8290472"/><text x="99.1714%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8,290,472 samples, 0.01%)</title><rect x="98.9214%" y="117" width="0.0120%" height="15" fill="rgb(251,47,18)" fg:x="68424376327" fg:w="8290472"/><text x="99.1714%" y="127.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (78,407,065 samples, 0.11%)</title><rect x="98.8383%" y="213" width="0.1134%" height="15" fill="rgb(242,102,42)" fg:x="68366925655" fg:w="78407065"/><text x="99.0883%" y="223.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (78,407,065 samples, 0.11%)</title><rect x="98.8383%" y="197" width="0.1134%" height="15" fill="rgb(234,31,38)" fg:x="68366925655" fg:w="78407065"/><text x="99.0883%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (74,321,441 samples, 0.11%)</title><rect x="98.8442%" y="181" width="0.1074%" height="15" fill="rgb(221,117,51)" fg:x="68371011279" fg:w="74321441"/><text x="99.0942%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8,336,063 samples, 0.01%)</title><rect x="98.9396%" y="165" width="0.0121%" height="15" fill="rgb(212,20,18)" fg:x="68436996657" fg:w="8336063"/><text x="99.1896%" y="175.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (99,082,263 samples, 0.14%)</title><rect x="98.8262%" y="261" width="0.1432%" height="15" fill="rgb(245,133,36)" fg:x="68358556952" fg:w="99082263"/><text x="99.0762%" y="271.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (99,082,263 samples, 0.14%)</title><rect x="98.8262%" y="245" width="0.1432%" height="15" fill="rgb(212,6,19)" fg:x="68358556952" fg:w="99082263"/><text x="99.0762%" y="255.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (90,713,560 samples, 0.13%)</title><rect x="98.8383%" y="229" width="0.1311%" height="15" fill="rgb(218,1,36)" fg:x="68366925655" fg:w="90713560"/><text x="99.0883%" y="239.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (12,306,495 samples, 0.02%)</title><rect x="98.9517%" y="213" width="0.0178%" height="15" fill="rgb(246,84,54)" fg:x="68445332720" fg:w="12306495"/><text x="99.2017%" y="223.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (8,145,030 samples, 0.01%)</title><rect x="98.9577%" y="197" width="0.0118%" height="15" fill="rgb(242,110,6)" fg:x="68449494185" fg:w="8145030"/><text x="99.2077%" y="207.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_fma (8,145,030 samples, 0.01%)</title><rect x="98.9577%" y="181" width="0.0118%" height="15" fill="rgb(214,47,5)" fg:x="68449494185" fg:w="8145030"/><text x="99.2077%" y="191.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_x86_avx (8,145,030 samples, 0.01%)</title><rect x="98.9577%" y="165" width="0.0118%" height="15" fill="rgb(218,159,25)" fg:x="68449494185" fg:w="8145030"/><text x="99.2077%" y="175.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::DMultiplyAdd&gt;::multiply_add (8,145,030 samples, 0.01%)</title><rect x="98.9577%" y="149" width="0.0118%" height="15" fill="rgb(215,211,28)" fg:x="68449494185" fg:w="8145030"/><text x="99.2077%" y="159.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_pd (8,145,030 samples, 0.01%)</title><rect x="98.9577%" y="133" width="0.0118%" height="15" fill="rgb(238,59,32)" fg:x="68449494185" fg:w="8145030"/><text x="99.2077%" y="143.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (131,823,896 samples, 0.19%)</title><rect x="98.8142%" y="357" width="0.1906%" height="15" fill="rgb(226,82,3)" fg:x="68350207072" fg:w="131823896"/><text x="99.0642%" y="367.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (131,823,896 samples, 0.19%)</title><rect x="98.8142%" y="341" width="0.1906%" height="15" fill="rgb(240,164,32)" fg:x="68350207072" fg:w="131823896"/><text x="99.0642%" y="351.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (131,823,896 samples, 0.19%)</title><rect x="98.8142%" y="325" width="0.1906%" height="15" fill="rgb(232,46,7)" fg:x="68350207072" fg:w="131823896"/><text x="99.0642%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (131,823,896 samples, 0.19%)</title><rect x="98.8142%" y="309" width="0.1906%" height="15" fill="rgb(229,129,53)" fg:x="68350207072" fg:w="131823896"/><text x="99.0642%" y="319.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (123,474,016 samples, 0.18%)</title><rect x="98.8262%" y="293" width="0.1785%" height="15" fill="rgb(234,188,29)" fg:x="68358556952" fg:w="123474016"/><text x="99.0762%" y="303.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (123,474,016 samples, 0.18%)</title><rect x="98.8262%" y="277" width="0.1785%" height="15" fill="rgb(246,141,4)" fg:x="68358556952" fg:w="123474016"/><text x="99.0762%" y="287.50"></text></g><g><title>matrixmultiply::gemm::pack (24,391,753 samples, 0.04%)</title><rect x="98.9695%" y="261" width="0.0353%" height="15" fill="rgb(229,23,39)" fg:x="68457639215" fg:w="24391753"/><text x="99.2195%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20,246,981 samples, 0.03%)</title><rect x="98.9755%" y="245" width="0.0293%" height="15" fill="rgb(206,12,3)" fg:x="68461783987" fg:w="20246981"/><text x="99.2255%" y="255.50"></text></g><g><title>[libm.so.6] (395,283,512 samples, 0.57%)</title><rect x="99.3455%" y="165" width="0.5715%" height="15" fill="rgb(252,226,20)" fg:x="68717740945" fg:w="395283512"/><text x="99.5955%" y="175.50"></text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::predict_with_normalization (896,840,042 samples, 1.30%)</title><rect x="98.6264%" y="389" width="1.2966%" height="15" fill="rgb(216,123,35)" fg:x="68220298577" fg:w="896840042"/><text x="98.8764%" y="399.50"></text></g><g><title>rkl::core::layers::Dense::forward (896,840,042 samples, 1.30%)</title><rect x="98.6264%" y="373" width="1.2966%" height="15" fill="rgb(212,68,40)" fg:x="68220298577" fg:w="896840042"/><text x="98.8764%" y="383.50"></text></g><g><title>rkl::core::activations::Activation::forward (635,107,651 samples, 0.92%)</title><rect x="99.0048%" y="357" width="0.9182%" height="15" fill="rgb(254,125,32)" fg:x="68482030968" fg:w="635107651"/><text x="99.2548%" y="367.50"></text></g><g><title>rkl::core::activations::tanh_forward (631,008,015 samples, 0.91%)</title><rect x="99.0107%" y="341" width="0.9123%" height="15" fill="rgb(253,97,22)" fg:x="68486130604" fg:w="631008015"/><text x="99.2607%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (631,008,015 samples, 0.91%)</title><rect x="99.0107%" y="325" width="0.9123%" height="15" fill="rgb(241,101,14)" fg:x="68486130604" fg:w="631008015"/><text x="99.2607%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (631,008,015 samples, 0.91%)</title><rect x="99.0107%" y="309" width="0.9123%" height="15" fill="rgb(238,103,29)" fg:x="68486130604" fg:w="631008015"/><text x="99.2607%" y="319.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (631,008,015 samples, 0.91%)</title><rect x="99.0107%" y="293" width="0.9123%" height="15" fill="rgb(233,195,47)" fg:x="68486130604" fg:w="631008015"/><text x="99.2607%" y="303.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (631,008,015 samples, 0.91%)</title><rect x="99.0107%" y="277" width="0.9123%" height="15" fill="rgb(246,218,30)" fg:x="68486130604" fg:w="631008015"/><text x="99.2607%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (631,008,015 samples, 0.91%)</title><rect x="99.0107%" y="261" width="0.9123%" height="15" fill="rgb(219,145,47)" fg:x="68486130604" fg:w="631008015"/><text x="99.2607%" y="271.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (631,008,015 samples, 0.91%)</title><rect x="99.0107%" y="245" width="0.9123%" height="15" fill="rgb(243,12,26)" fg:x="68486130604" fg:w="631008015"/><text x="99.2607%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (626,619,401 samples, 0.91%)</title><rect x="99.0170%" y="229" width="0.9059%" height="15" fill="rgb(214,87,16)" fg:x="68490519218" fg:w="626619401"/><text x="99.2670%" y="239.50"></text></g><g><title>rkl::core::activations::tanh_forward::_{{closure}} (626,619,401 samples, 0.91%)</title><rect x="99.0170%" y="213" width="0.9059%" height="15" fill="rgb(208,99,42)" fg:x="68490519218" fg:w="626619401"/><text x="99.2670%" y="223.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::tanh (626,619,401 samples, 0.91%)</title><rect x="99.0170%" y="197" width="0.9059%" height="15" fill="rgb(253,99,2)" fg:x="68490519218" fg:w="626619401"/><text x="99.2670%" y="207.50"></text></g><g><title>tanhf32x (626,619,401 samples, 0.91%)</title><rect x="99.0170%" y="181" width="0.9059%" height="15" fill="rgb(220,168,23)" fg:x="68490519218" fg:w="626619401"/><text x="99.2670%" y="191.50"></text></g><g><title>_start (69,089,852,890 samples, 99.88%)</title><rect x="0.0639%" y="677" width="99.8835%" height="15" fill="rgb(242,38,24)" fg:x="44171733" fg:w="69089852890"/><text x="0.3139%" y="687.50">_start</text></g><g><title>__libc_start_main (69,089,852,890 samples, 99.88%)</title><rect x="0.0639%" y="661" width="99.8835%" height="15" fill="rgb(225,182,9)" fg:x="44171733" fg:w="69089852890"/><text x="0.3139%" y="671.50">__libc_start_main</text></g><g><title>[libc.so.6] (69,089,852,890 samples, 99.88%)</title><rect x="0.0639%" y="645" width="99.8835%" height="15" fill="rgb(243,178,37)" fg:x="44171733" fg:w="69089852890"/><text x="0.3139%" y="655.50">[libc.so.6]</text></g><g><title>main (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="629" width="99.8782%" height="15" fill="rgb(232,139,19)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="613" width="99.8782%" height="15" fill="rgb(225,201,24)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="597" width="99.8782%" height="15" fill="rgb(221,47,46)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="581" width="99.8782%" height="15" fill="rgb(249,23,13)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="565" width="99.8782%" height="15" fill="rgb(219,9,5)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="549" width="99.8782%" height="15" fill="rgb(254,171,16)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="559.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="533" width="99.8782%" height="15" fill="rgb(230,171,20)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="517" width="99.8782%" height="15" fill="rgb(210,71,41)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="501" width="99.8782%" height="15" fill="rgb(206,173,20)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="485" width="99.8782%" height="15" fill="rgb(233,88,34)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="469" width="99.8782%" height="15" fill="rgb(223,209,46)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="479.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="453" width="99.8782%" height="15" fill="rgb(250,43,18)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="437" width="99.8782%" height="15" fill="rgb(208,13,10)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>main_benchmark::main (69,086,174,768 samples, 99.88%)</title><rect x="0.0692%" y="421" width="99.8782%" height="15" fill="rgb(212,200,36)" fg:x="47849855" fg:w="69086174768"/><text x="0.3192%" y="431.50">main_benchmark::main</text></g><g><title>rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit (69,082,049,104 samples, 99.87%)</title><rect x="0.0751%" y="405" width="99.8722%" height="15" fill="rgb(225,90,30)" fg:x="51975519" fg:w="69082049104"/><text x="0.3251%" y="415.50">rkl::models::Sequential&lt;rkl::core::layers::Dense&gt;::fit</text></g><g><title>std::io::stdio::_print (16,886,004 samples, 0.02%)</title><rect x="99.9229%" y="389" width="0.0244%" height="15" fill="rgb(236,182,39)" fg:x="69117138619" fg:w="16886004"/><text x="100.1729%" y="399.50"></text></g><g><title>std::io::stdio::print_to (16,886,004 samples, 0.02%)</title><rect x="99.9229%" y="373" width="0.0244%" height="15" fill="rgb(212,144,35)" fg:x="69117138619" fg:w="16886004"/><text x="100.1729%" y="383.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (16,886,004 samples, 0.02%)</title><rect x="99.9229%" y="357" width="0.0244%" height="15" fill="rgb(228,63,44)" fg:x="69117138619" fg:w="16886004"/><text x="100.1729%" y="367.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (16,886,004 samples, 0.02%)</title><rect x="99.9229%" y="341" width="0.0244%" height="15" fill="rgb(228,109,6)" fg:x="69117138619" fg:w="16886004"/><text x="100.1729%" y="351.50"></text></g><g><title>std::io::Write::write_fmt (16,886,004 samples, 0.02%)</title><rect x="99.9229%" y="325" width="0.0244%" height="15" fill="rgb(238,117,24)" fg:x="69117138619" fg:w="16886004"/><text x="100.1729%" y="335.50"></text></g><g><title>core::fmt::write (16,886,004 samples, 0.02%)</title><rect x="99.9229%" y="309" width="0.0244%" height="15" fill="rgb(242,26,26)" fg:x="69117138619" fg:w="16886004"/><text x="100.1729%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (12,798,508 samples, 0.02%)</title><rect x="99.9288%" y="293" width="0.0185%" height="15" fill="rgb(221,92,48)" fg:x="69121226115" fg:w="12798508"/><text x="100.1788%" y="303.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (9,093,860 samples, 0.01%)</title><rect x="99.9342%" y="277" width="0.0131%" height="15" fill="rgb(209,209,32)" fg:x="69124930763" fg:w="9093860"/><text x="100.1842%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (9,093,860 samples, 0.01%)</title><rect x="99.9342%" y="261" width="0.0131%" height="15" fill="rgb(221,70,22)" fg:x="69124930763" fg:w="9093860"/><text x="100.1842%" y="271.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (9,093,860 samples, 0.01%)</title><rect x="99.9342%" y="245" width="0.0131%" height="15" fill="rgb(248,145,5)" fg:x="69124930763" fg:w="9093860"/><text x="100.1842%" y="255.50"></text></g><g><title>plotters::chart::mesh::MeshStyle&lt;X,Y,DB&gt;::draw (13,336,981 samples, 0.02%)</title><rect x="99.9473%" y="677" width="0.0193%" height="15" fill="rgb(226,116,26)" fg:x="69134024623" fg:w="13336981"/><text x="100.1973%" y="687.50"></text></g><g><title>plotters::chart::context::cartesian2d::draw_impl::&lt;impl plotters::chart::context::ChartContext&lt;DB,plotters::coord::ranged2d::cartesian::Cartesian2d&lt;X,Y&gt;&gt;&gt;::draw_mesh (13,336,981 samples, 0.02%)</title><rect x="99.9473%" y="661" width="0.0193%" height="15" fill="rgb(244,5,17)" fg:x="69134024623" fg:w="13336981"/><text x="100.1973%" y="671.50"></text></g><g><title>rkl::plot::plot_comparision::plot_comparison (9,241,640 samples, 0.01%)</title><rect x="99.9666%" y="677" width="0.0134%" height="15" fill="rgb(252,159,33)" fg:x="69147361604" fg:w="9241640"/><text x="100.2166%" y="687.50"></text></g><g><title>all (69,170,449,300 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(206,71,0)" fg:x="0" fg:w="69170449300"/><text x="0.2500%" y="719.50"></text></g><g><title>main_benchmark (69,170,449,300 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(233,118,54)" fg:x="0" fg:w="69170449300"/><text x="0.2500%" y="703.50">main_benchmark</text></g><g><title>rkl::plot::plot_errors_over_epochs::plot_errors_over_epochs (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="677" width="0.0200%" height="15" fill="rgb(234,83,48)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="687.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::present (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="661" width="0.0200%" height="15" fill="rgb(228,3,54)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="671.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::backend_ops (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="645" width="0.0200%" height="15" fill="rgb(226,155,13)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="655.50"></text></g><g><title>plotters::drawing::area::DrawingArea&lt;DB,CT&gt;::present::_{{closure}} (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="629" width="0.0200%" height="15" fill="rgb(241,28,37)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="639.50"></text></g><g><title>&lt;plotters_bitmap::bitmap::BitMapBackend&lt;P&gt; as plotters_backend::DrawingBackend&gt;::present (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="613" width="0.0200%" height="15" fill="rgb(233,93,10)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="623.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::save (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="597" width="0.0200%" height="15" fill="rgb(225,113,19)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="607.50"></text></g><g><title>image::dynimage::save_buffer (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="581" width="0.0200%" height="15" fill="rgb(241,2,18)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="591.50"></text></g><g><title>image::io::free_functions::save_buffer_impl (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="565" width="0.0200%" height="15" fill="rgb(228,207,21)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="575.50"></text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="549" width="0.0200%" height="15" fill="rgb(213,211,35)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="559.50"></text></g><g><title>image::io::free_functions::write_buffer_impl (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="533" width="0.0200%" height="15" fill="rgb(209,83,10)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="543.50"></text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="517" width="0.0200%" height="15" fill="rgb(209,164,1)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="527.50"></text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="501" width="0.0200%" height="15" fill="rgb(213,184,43)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="511.50"></text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (13,846,056 samples, 0.02%)</title><rect x="99.9800%" y="485" width="0.0200%" height="15" fill="rgb(231,61,34)" fg:x="69156603244" fg:w="13846056"/><text x="100.2300%" y="495.50"></text></g><g><title>png::filter::filter (10,551,708 samples, 0.02%)</title><rect x="99.9847%" y="469" width="0.0153%" height="15" fill="rgb(235,75,3)" fg:x="69159897592" fg:w="10551708"/><text x="100.2347%" y="479.50"></text></g><g><title>png::filter::filter_internal (10,551,708 samples, 0.02%)</title><rect x="99.9847%" y="453" width="0.0153%" height="15" fill="rgb(220,106,47)" fg:x="69159897592" fg:w="10551708"/><text x="100.2347%" y="463.50"></text></g><g><title>png::filter::filter_paeth (10,551,708 samples, 0.02%)</title><rect x="99.9847%" y="437" width="0.0153%" height="15" fill="rgb(210,196,33)" fg:x="69159897592" fg:w="10551708"/><text x="100.2347%" y="447.50"></text></g></svg></svg>